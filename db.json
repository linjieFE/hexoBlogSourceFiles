{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1},{"_id":"themes/yilia/source/img/rn_helloworld.png","path":"img/rn_helloworld.png","modified":1},{"_id":"themes/yilia/source/img/rn-desk.png","path":"img/rn-desk.png","modified":1},{"_id":"themes/yilia/source/img/react_files.jpg","path":"img/react_files.jpg","modified":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":1},{"_id":"themes/yilia/source/img/mac.jpg","path":"img/mac.jpg","modified":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1},{"_id":"themes/yilia/source/img/linjie.jpg","path":"img/linjie.jpg","modified":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1},{"_id":"themes/yilia/source/img/ico.jpg","path":"img/ico.jpg","modified":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1}],"Cache":[{"_id":"source/_posts/Javascript-严格模式.md","shasum":"cfdf8f9a5bcf4dae8ab0441af6715ef96372344b","modified":1454309736000},{"_id":"source/_posts/Mac-OS-x-使用技巧.md","shasum":"f01a57d4511b89990d00ecff5513b1b740c9ff90","modified":1453281088000},{"_id":"source/_posts/VIM学习笔记.md","shasum":"8f1114516e09cf439b2a2488623ed4b32f733bf5","modified":1453276355000},{"_id":"source/_posts/for循环的执行顺序.md","shasum":"62791ded56c96111e69a82f4175ab03662382b17","modified":1454413139000},{"_id":"source/_posts/gulp学习笔记.md","shasum":"b5af3cda0fd946540e119e122a972368b4e68736","modified":1471226711000},{"_id":"source/_posts/mac终端常用命令.md","shasum":"51550052f7397a5d60879ceb01d7ea381ef74f5a","modified":1453276346000},{"_id":"source/_posts/react-native-第一个demo.md","shasum":"8e57b4ec82a6511e9f06740832ea175a812d97b7","modified":1476950865000},{"_id":"source/_posts/react-环境搭建.md","shasum":"41d57c2e1dcfb446bf21e83653a37fe3b6c9936c","modified":1476961017000},{"_id":"source/_posts/关于haslayout.md","shasum":"8ea98c9457b26e4202b43450a5939581b47e5d1f","modified":1453788352000},{"_id":"source/_posts/关于面试.md","shasum":"dd1035cc892d70798d99f06dc797d90b7b0c94b2","modified":1453788546000},{"_id":"source/_posts/重新开博－hexo建站笔记.md","shasum":"d4f83f8037d50c0ee0f18e96d3549de536f9df68","modified":1453276359000},{"_id":"themes/yilia/README.md","shasum":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1453113894000},{"_id":"themes/yilia/_config.yml","shasum":"f534e7b83e0107f0d792fd25b93e0febcf71a38e","modified":1454309274000},{"_id":"themes/yilia/languages/de.yml","shasum":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1453113894000},{"_id":"themes/yilia/languages/default.yml","shasum":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1453113894000},{"_id":"themes/yilia/languages/en.yml","shasum":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1453113894000},{"_id":"themes/yilia/languages/fr-FR.yml","shasum":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1453113894000},{"_id":"themes/yilia/languages/ru.yml","shasum":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1453113894000},{"_id":"themes/yilia/languages/zh-Hans.yml","shasum":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1453113894000},{"_id":"themes/yilia/languages/zh-hk.yml","shasum":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1453113894000},{"_id":"themes/yilia/languages/zh-tw.yml","shasum":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","shasum":"082504c9fd8600306d4ca55f03e3cbb0ddd99dd7","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","shasum":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/archive.ejs","shasum":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/article.ejs","shasum":"d6306cd897683c25184a50b29931aa1fa18d119c","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/footer.ejs","shasum":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/head.ejs","shasum":"f7068535c0df7e7bc6614a046e7d4b262a65d8b2","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","shasum":"47dc7c1d35928a7b026c683547f8482d2e524c63","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","shasum":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","shasum":"fff29e619af2b1abcab7d5d2d6f78428272f18f7","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","shasum":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","shasum":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","shasum":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","shasum":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","shasum":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","shasum":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","shasum":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1453113894000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1453113894000},{"_id":"themes/yilia/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1453113894000},{"_id":"themes/yilia/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1453113894000},{"_id":"themes/yilia/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1453113894000},{"_id":"themes/yilia/layout/layout.ejs","shasum":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1453113894000},{"_id":"themes/yilia/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1453113894000},{"_id":"themes/yilia/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1453113894000},{"_id":"themes/yilia/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1453113894000},{"_id":"themes/yilia/package.json","shasum":"00357ef6f24eb049074da81809e98f973f528cca","modified":1453113894000},{"_id":"themes/yilia/source/css/_extend.styl","shasum":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1453113894000},{"_id":"themes/yilia/source/css/_partial/archive.styl","shasum":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1453113894000},{"_id":"themes/yilia/source/css/_partial/article.styl","shasum":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1453113894000},{"_id":"themes/yilia/source/css/_partial/footer.styl","shasum":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1453113894000},{"_id":"themes/yilia/source/css/_partial/header.styl","shasum":"67e59feb18eee6026717cb440d86ab9551782628","modified":1453113894000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","shasum":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1453113894000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","shasum":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1453113894000},{"_id":"themes/yilia/source/css/_partial/main.styl","shasum":"70e6cfb2f5b4bc857c99cbb96ddd23b8446fc160","modified":1453193715000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","shasum":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1453113894000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","shasum":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1453113894000},{"_id":"themes/yilia/source/css/_partial/page.styl","shasum":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1453113894000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","shasum":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1453113894000},{"_id":"themes/yilia/source/css/_partial/share.styl","shasum":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1453113894000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","shasum":"af0115de5c6455f899a2e09225b50224982c039d","modified":1453113894000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","shasum":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1453113894000},{"_id":"themes/yilia/source/css/_util/grid.styl","shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1453113894000},{"_id":"themes/yilia/source/css/_variables.styl","shasum":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1453113894000},{"_id":"themes/yilia/source/css/_util/mixin.styl","shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1453113894000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1453113894000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1453113894000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1453113894000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","shasum":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1453113894000},{"_id":"themes/yilia/source/css/style.styl","shasum":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","shasum":"a82597493d75ea989ca586e09173cff332efe41e","modified":1453113894000},{"_id":"themes/yilia/source/img/coderwall.png","shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1453113894000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1453113894000},{"_id":"themes/yilia/source/img/delicious.png","shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1453113894000},{"_id":"themes/yilia/source/img/douban.png","shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1453113894000},{"_id":"themes/yilia/source/img/facebook.png","shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1453113894000},{"_id":"themes/yilia/source/img/github.png","shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1453113894000},{"_id":"themes/yilia/source/img/google.png","shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1453113894000},{"_id":"themes/yilia/source/img/ico.jpg","shasum":"ca8b6122ce2ef697e44964df237693e357298fd8","modified":1453259779000},{"_id":"themes/yilia/source/img/img-err.png","shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1453113894000},{"_id":"themes/yilia/source/img/img-loading.png","shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1453113894000},{"_id":"themes/yilia/source/img/linkedin.png","shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1453113894000},{"_id":"themes/yilia/source/img/linjie.jpg","shasum":"2aa300ad81a0b3e6fb5311177d526d39a9d15f78","modified":1452852916000},{"_id":"themes/yilia/source/img/mail.png","shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1453113894000},{"_id":"themes/yilia/source/img/pinboard.png","shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1453113894000},{"_id":"themes/yilia/source/img/pinterest.png","shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1453113894000},{"_id":"themes/yilia/source/img/react_files.jpg","shasum":"fdda6997c9ab03f49a480c646f22bb89f9555bc5","modified":1476957863000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1453113894000},{"_id":"themes/yilia/source/img/stackoverflow.png","shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1453113894000},{"_id":"themes/yilia/source/img/twitter.png","shasum":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1453113894000},{"_id":"themes/yilia/source/img/rn_helloworld.png","shasum":"d9485c357005a16175c22e6f43c7f940597eeb6b","modified":1476949084000},{"_id":"themes/yilia/source/img/weibo.png","shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1453113894000},{"_id":"themes/yilia/source/img/rss.png","shasum":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1453113894000},{"_id":"themes/yilia/source/img/zhihu.png","shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1453113894000},{"_id":"themes/yilia/source/js/instagram.js","shasum":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1453113894000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1453113894000},{"_id":"themes/yilia/source/js/main.js","shasum":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1453113894000},{"_id":"themes/yilia/source/js/mobile.js","shasum":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1453113894000},{"_id":"themes/yilia/source/js/pc.js","shasum":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1453113894000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1453113894000},{"_id":"themes/yilia/source/img/rn-desk.png","shasum":"96ff8c534ec0d8e8ffa0b654a90b552de649fcff","modified":1476949061000},{"_id":"themes/yilia/source/img/mac.jpg","shasum":"c90963ac87cd2240c357ba29db945e50beefa3eb","modified":1453272736000}],"Category":[{"name":"学习笔记","_id":"ciuid0loe0001nbto7wyyfoto"},{"name":"技术摘录","_id":"ciuid0lpp000tnbtoosoxaeu5"},{"name":"知识点滴","_id":"ciuid0lpw0015nbtoy97bpett"}],"Data":[],"Page":[],"Post":[{"title":"Javascript 严格模式","date":"2016-02-01T03:08:22.000Z","_content":"除了正常运行模式，ECMAscript 5添加了第二种运行模式：\"[严格模式](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\"（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。\n## 设立\"严格模式\"的目的:\n``` JavaScript\n   - 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n　　- 消除代码运行的一些不安全之处，保证代码运行的安全；\n　　- 提高编译器效率，增加运行速度；\n　　- 为未来新版本的Javascript做好铺垫。\n```\n<!--more-->\n\"严格模式\"体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。\n另一方面，同样的代码，在\"严格模式\"中，可能会有不一样的运行结果；一些在\"正常模式\"下可以运行的语句，在\"严格模式\"下将不能运行。掌握这些内容，有助于更细致深入地理解Javascript，让你变成一个更好的程序员。\n本文将对\"严格模式\"做详细介绍。\n## 二、进入标志\n进入\"严格模式\"的标志，是下面这行语句：\n``` JavaScript\n　　\"use strict\";\n```\n老版本的浏览器会把它当作一行普通字符串，加以忽略。\n## 三、如何调用\n\"严格模式\"有两种调用方法，适用于不同的场合。\n### 3.1 针对整个脚本文件\n将\"use strict\"放在脚本文件的第一行，则整个脚本都将以\"严格模式\"运行。如果这行语句不在第一行，则无效，整个脚本以\"正常模式\"运行。如果不同模式的代码文件合并成一个文件，这一点需要特别注意。\n(严格地说，只要前面不是产生实际运行结果的语句，\"use strict\"可以不在第一行，比如直接跟在一个空的分号后面。)\n``` JavaScript\n　　<script>\n　　　　\"use strict\";\n　　　　console.log(\"这是严格模式。\");\n　　</script>\n　　<script>\n　　　　console.log(\"这是正常模式。\");\n　　</script>\n```\n上面的代码表示，一个网页中依次有两段Javascript代码。前一个script标签是严格模式，后一个不是。\n### 3.2 针对单个函数\n将\"use strict\"放在函数体的第一行，则整个函数以\"严格模式\"运行。\n``` JavaScript\n　　function strict(){\n　　　　\"use strict\";\n　　　　return \"这是严格模式。\";\n　　}\n　　function notStrict() {\n　　　　return \"这是正常模式。\";\n　　}\n```\n### 3.3 脚本文件的变通写法\n因为第一种调用方法不利于文件合并，所以更好的做法是，借用第二种方法，将整个脚本文件放在一个立即执行的匿名函数之中。\n``` JavaScript\n　　(function (){\n\n　　　　\"use strict\";\n　　　　// some code here\n\n　　 })();\n```\n## 四、语法和行为改变\n严格模式对Javascript的语法和行为，都做了一些改变。\n### 4.1 全局变量显式声明\n在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。\n``` JavaScript\n\"use strict\";\n　　v = 1; // 报错，v未声明\n　　for(i = 0; i < 2; i++) { // 报错，i未声明\n　　}\n```\n因此，严格模式下，变量都必须先用var命令声明，然后再使用。\n### 4.2 静态绑定\nJavascript语言的一个特点，就是允许\"动态绑定\"，即某些属性和方法到底属于哪一个对象，不是在编译时确定的，而是在运行时（runtime）确定的。\n严格模式对动态绑定做了一些限制。某些情况下，只允许静态绑定。也就是说，属性和方法到底归属哪个对象，在编译阶段就确定。这样做有利于编译效率的提高，也使得代码更容易阅读，更少出现意外。\n具体来说，涉及以下几个方面。\n（1）禁止使用with语句\n因为with语句无法在编译时就确定，属性到底归属哪个对象。\n``` JavaScript\n　　\"use strict\";\n　　var v = 1;\n　　with (o){ // 语法错误\n　　　　v = 2;\n　　}\n```\n（2）创设eval作用域\n正常模式下，Javascript语言有两种变量作用域（scope）：全局作用域和函数作用域。严格模式创设了第三种作用域：eval作用域。\n正常模式下，eval语句的作用域，取决于它处于全局作用域，还是处于函数作用域。严格模式下，eval语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于eval内部。\n``` JavaScript\n　　\"use strict\";\n　　var x = 2;\n　　console.info(eval(\"var x = 5; x\")); // 5\n　　console.info(x); // 2\n```\n### 4.3 增强的安全措施\n（1）禁止this关键字指向全局对象\n``` JavaScript\n　　function f(){\n　　　　return !this;\n　　}\n　　// 返回false，因为\"this\"指向全局对象，\"!this\"就是false\n　　function f(){\n　　　　\"use strict\";\n　　　　return !this;\n　　}\n```\n　　// 返回true，因为严格模式下，this的值为undefined，所以\"!this\"为true。\n因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。\n``` JavaScript\n　　function f(){\n　　　　\"use strict\";\n　　　　this.a = 1;\n　　};\n　　f();// 报错，this未定义\n```\n（2）禁止在函数内部遍历调用栈\n``` JavaScript\n　　function f1(){\n　　　　\"use strict\";\n　　　　f1.caller; // 报错\n　　　　f1.arguments; // 报错\n　　}\n　　f1();\n```\n### 4.4 禁止删除变量\n严格模式下无法删除变量。只有configurable设置为true的对象属性，才能被删除。\n``` JavaScript\n　　\"use strict\";\n　　var x;\n　　delete x; // 语法错误\n　　var o = Object.create(null, {'x': {\n　　　　　　value: 1,\n　　　　　　configurable: true\n　　}});\n　　delete o.x; // 删除成功\n```\n## 4.5 显式报错\n正常模式下，对一个对象的只读属性进行赋值，不会报错，只会默默地失败。严格模式下，将报错。\n``` JavaScript\n　　\"use strict\";\n\n　　var o = {};\n　　Object.defineProperty(o, \"v\", { value: 1, writable: false });\n　　o.v = 2; // 报错\n```\n严格模式下，对一个使用getter方法读取的属性进行赋值，会报错。\n``` JavaScript\n　　\"use strict\";\n\n　　var o = {\n\n　　　　get v() { return 1; }\n　　};\n　　o.v = 2; // 报错\n```\n严格模式下，对禁止扩展的对象添加新属性，会报错。\n``` JavaScript\n　　\"use strict\";\n　　var o = {};\n　　Object.preventExtensions(o);\n　　o.v = 1; // 报错\n```\n严格模式下，删除一个不可删除的属性，会报错。\n``` JavaScript\n　　\"use strict\";\n　　delete Object.prototype; // 报错\n```\n### 4.6 重名错误\n严格模式新增了一些语法错误。\n（1）对象不能有重名的属性\n正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。\n``` JavaScript\n　　\"use strict\";\n　　var o = {\n　　　　p: 1,\n　　　　p: 2\n　　}; // 语法错误\n```\n（2）函数不能有重名的参数\n正常模式下，如果函数有多个重名的参数，可以用arguments[i]读取。严格模式下，这属于语法错误。\n``` JavaScript\n　　\"use strict\";\n　　function f(a, a, b) { // 语法错误\n　　　　return ;\n　　}\n```\n### 4.7 禁止八进制表示法\n正常模式下，整数的第一位如果是0，表示这是八进制数，比如0100等于十进制的64。严格模式禁止这种表示法，整数第一位为0，将报错。\n``` JavaScript\n   \"use strict\";\n　　var n = 0100; // 语法错误\n```\n### 4.8 arguments对象的限制\narguments是函数的参数对象，严格模式对它的使用做了限制。\n（1）不允许对arguments赋值\n``` JavaScript\n　　\"use strict\";\n　　arguments++; // 语法错误\n　　var obj = { set p(arguments) { } }; // 语法错误\n　　try { } catch (arguments) { } // 语法错误\n　　function arguments() { } // 语法错误\n　　var f = new Function(\"arguments\", \"'use strict'; return 17;\"); // 语法错误\n```\n（2）arguments不再追踪参数的变化\n``` JavaScript\n　　function f(a) {\n　　　　a = 2;\n　　　　return [a, arguments[0]];\n　　}\n　　f(1); // 正常模式为[2,2]\n　　function f(a) {\n　　　　\"use strict\";\n　　　　a = 2;\n　　　　return [a, arguments[0]];\n　　}\n　　f(1); // 严格模式为[2,1]\n```\n（3）禁止使用arguments.callee\n这意味着，你无法在匿名函数内部调用自身了。\n``` JavaScript\n　　\"use strict\";\n　　var f = function() { return arguments.callee; };\n　　f(); // 报错\n```\n### 4.9 函数必须声明在顶层\n将来Javascript的新版本会引入\"块级作用域\"。为了与新版本接轨，严格模式只允许在全局作用域或函数作用域的顶层声明函数。也就是说，不允许在非函数的代码块内声明函数。\n``` JavaScript\n　　\"use strict\";\n　　if (true) {\n　　　　function f() { } // 语法错误\n　　}\n　　for (var i = 0; i < 5; i++) {\n　　　　function f2() { } // 语法错误\n　　}\n```\n### 4.10 保留字\n为了向将来Javascript的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。\n使用这些词作为变量名将会报错。\n``` JavaScript\n　　function package(protected) { // 语法错误\n　　　　\"use strict\";\n　　　　var implements; // 语法错误\n　　}\n```\n此外，ECMAscript第五版本身还规定了另一些保留字（class, enum, export, extends, import, super），以及各大浏览器自行增加的const保留字，也是不能作为变量名的。\n","source":"_posts/Javascript-严格模式.md","raw":"---\ntitle: Javascript 严格模式\ndate: 2016-02-01 11:08:22\ncategories: 学习笔记\ntags:\n- javascript\n- 学习笔记\n---\n除了正常运行模式，ECMAscript 5添加了第二种运行模式：\"[严格模式](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\"（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。\n## 设立\"严格模式\"的目的:\n``` JavaScript\n   - 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n　　- 消除代码运行的一些不安全之处，保证代码运行的安全；\n　　- 提高编译器效率，增加运行速度；\n　　- 为未来新版本的Javascript做好铺垫。\n```\n<!--more-->\n\"严格模式\"体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。\n另一方面，同样的代码，在\"严格模式\"中，可能会有不一样的运行结果；一些在\"正常模式\"下可以运行的语句，在\"严格模式\"下将不能运行。掌握这些内容，有助于更细致深入地理解Javascript，让你变成一个更好的程序员。\n本文将对\"严格模式\"做详细介绍。\n## 二、进入标志\n进入\"严格模式\"的标志，是下面这行语句：\n``` JavaScript\n　　\"use strict\";\n```\n老版本的浏览器会把它当作一行普通字符串，加以忽略。\n## 三、如何调用\n\"严格模式\"有两种调用方法，适用于不同的场合。\n### 3.1 针对整个脚本文件\n将\"use strict\"放在脚本文件的第一行，则整个脚本都将以\"严格模式\"运行。如果这行语句不在第一行，则无效，整个脚本以\"正常模式\"运行。如果不同模式的代码文件合并成一个文件，这一点需要特别注意。\n(严格地说，只要前面不是产生实际运行结果的语句，\"use strict\"可以不在第一行，比如直接跟在一个空的分号后面。)\n``` JavaScript\n　　<script>\n　　　　\"use strict\";\n　　　　console.log(\"这是严格模式。\");\n　　</script>\n　　<script>\n　　　　console.log(\"这是正常模式。\");\n　　</script>\n```\n上面的代码表示，一个网页中依次有两段Javascript代码。前一个script标签是严格模式，后一个不是。\n### 3.2 针对单个函数\n将\"use strict\"放在函数体的第一行，则整个函数以\"严格模式\"运行。\n``` JavaScript\n　　function strict(){\n　　　　\"use strict\";\n　　　　return \"这是严格模式。\";\n　　}\n　　function notStrict() {\n　　　　return \"这是正常模式。\";\n　　}\n```\n### 3.3 脚本文件的变通写法\n因为第一种调用方法不利于文件合并，所以更好的做法是，借用第二种方法，将整个脚本文件放在一个立即执行的匿名函数之中。\n``` JavaScript\n　　(function (){\n\n　　　　\"use strict\";\n　　　　// some code here\n\n　　 })();\n```\n## 四、语法和行为改变\n严格模式对Javascript的语法和行为，都做了一些改变。\n### 4.1 全局变量显式声明\n在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。\n``` JavaScript\n\"use strict\";\n　　v = 1; // 报错，v未声明\n　　for(i = 0; i < 2; i++) { // 报错，i未声明\n　　}\n```\n因此，严格模式下，变量都必须先用var命令声明，然后再使用。\n### 4.2 静态绑定\nJavascript语言的一个特点，就是允许\"动态绑定\"，即某些属性和方法到底属于哪一个对象，不是在编译时确定的，而是在运行时（runtime）确定的。\n严格模式对动态绑定做了一些限制。某些情况下，只允许静态绑定。也就是说，属性和方法到底归属哪个对象，在编译阶段就确定。这样做有利于编译效率的提高，也使得代码更容易阅读，更少出现意外。\n具体来说，涉及以下几个方面。\n（1）禁止使用with语句\n因为with语句无法在编译时就确定，属性到底归属哪个对象。\n``` JavaScript\n　　\"use strict\";\n　　var v = 1;\n　　with (o){ // 语法错误\n　　　　v = 2;\n　　}\n```\n（2）创设eval作用域\n正常模式下，Javascript语言有两种变量作用域（scope）：全局作用域和函数作用域。严格模式创设了第三种作用域：eval作用域。\n正常模式下，eval语句的作用域，取决于它处于全局作用域，还是处于函数作用域。严格模式下，eval语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于eval内部。\n``` JavaScript\n　　\"use strict\";\n　　var x = 2;\n　　console.info(eval(\"var x = 5; x\")); // 5\n　　console.info(x); // 2\n```\n### 4.3 增强的安全措施\n（1）禁止this关键字指向全局对象\n``` JavaScript\n　　function f(){\n　　　　return !this;\n　　}\n　　// 返回false，因为\"this\"指向全局对象，\"!this\"就是false\n　　function f(){\n　　　　\"use strict\";\n　　　　return !this;\n　　}\n```\n　　// 返回true，因为严格模式下，this的值为undefined，所以\"!this\"为true。\n因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。\n``` JavaScript\n　　function f(){\n　　　　\"use strict\";\n　　　　this.a = 1;\n　　};\n　　f();// 报错，this未定义\n```\n（2）禁止在函数内部遍历调用栈\n``` JavaScript\n　　function f1(){\n　　　　\"use strict\";\n　　　　f1.caller; // 报错\n　　　　f1.arguments; // 报错\n　　}\n　　f1();\n```\n### 4.4 禁止删除变量\n严格模式下无法删除变量。只有configurable设置为true的对象属性，才能被删除。\n``` JavaScript\n　　\"use strict\";\n　　var x;\n　　delete x; // 语法错误\n　　var o = Object.create(null, {'x': {\n　　　　　　value: 1,\n　　　　　　configurable: true\n　　}});\n　　delete o.x; // 删除成功\n```\n## 4.5 显式报错\n正常模式下，对一个对象的只读属性进行赋值，不会报错，只会默默地失败。严格模式下，将报错。\n``` JavaScript\n　　\"use strict\";\n\n　　var o = {};\n　　Object.defineProperty(o, \"v\", { value: 1, writable: false });\n　　o.v = 2; // 报错\n```\n严格模式下，对一个使用getter方法读取的属性进行赋值，会报错。\n``` JavaScript\n　　\"use strict\";\n\n　　var o = {\n\n　　　　get v() { return 1; }\n　　};\n　　o.v = 2; // 报错\n```\n严格模式下，对禁止扩展的对象添加新属性，会报错。\n``` JavaScript\n　　\"use strict\";\n　　var o = {};\n　　Object.preventExtensions(o);\n　　o.v = 1; // 报错\n```\n严格模式下，删除一个不可删除的属性，会报错。\n``` JavaScript\n　　\"use strict\";\n　　delete Object.prototype; // 报错\n```\n### 4.6 重名错误\n严格模式新增了一些语法错误。\n（1）对象不能有重名的属性\n正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。\n``` JavaScript\n　　\"use strict\";\n　　var o = {\n　　　　p: 1,\n　　　　p: 2\n　　}; // 语法错误\n```\n（2）函数不能有重名的参数\n正常模式下，如果函数有多个重名的参数，可以用arguments[i]读取。严格模式下，这属于语法错误。\n``` JavaScript\n　　\"use strict\";\n　　function f(a, a, b) { // 语法错误\n　　　　return ;\n　　}\n```\n### 4.7 禁止八进制表示法\n正常模式下，整数的第一位如果是0，表示这是八进制数，比如0100等于十进制的64。严格模式禁止这种表示法，整数第一位为0，将报错。\n``` JavaScript\n   \"use strict\";\n　　var n = 0100; // 语法错误\n```\n### 4.8 arguments对象的限制\narguments是函数的参数对象，严格模式对它的使用做了限制。\n（1）不允许对arguments赋值\n``` JavaScript\n　　\"use strict\";\n　　arguments++; // 语法错误\n　　var obj = { set p(arguments) { } }; // 语法错误\n　　try { } catch (arguments) { } // 语法错误\n　　function arguments() { } // 语法错误\n　　var f = new Function(\"arguments\", \"'use strict'; return 17;\"); // 语法错误\n```\n（2）arguments不再追踪参数的变化\n``` JavaScript\n　　function f(a) {\n　　　　a = 2;\n　　　　return [a, arguments[0]];\n　　}\n　　f(1); // 正常模式为[2,2]\n　　function f(a) {\n　　　　\"use strict\";\n　　　　a = 2;\n　　　　return [a, arguments[0]];\n　　}\n　　f(1); // 严格模式为[2,1]\n```\n（3）禁止使用arguments.callee\n这意味着，你无法在匿名函数内部调用自身了。\n``` JavaScript\n　　\"use strict\";\n　　var f = function() { return arguments.callee; };\n　　f(); // 报错\n```\n### 4.9 函数必须声明在顶层\n将来Javascript的新版本会引入\"块级作用域\"。为了与新版本接轨，严格模式只允许在全局作用域或函数作用域的顶层声明函数。也就是说，不允许在非函数的代码块内声明函数。\n``` JavaScript\n　　\"use strict\";\n　　if (true) {\n　　　　function f() { } // 语法错误\n　　}\n　　for (var i = 0; i < 5; i++) {\n　　　　function f2() { } // 语法错误\n　　}\n```\n### 4.10 保留字\n为了向将来Javascript的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。\n使用这些词作为变量名将会报错。\n``` JavaScript\n　　function package(protected) { // 语法错误\n　　　　\"use strict\";\n　　　　var implements; // 语法错误\n　　}\n```\n此外，ECMAscript第五版本身还规定了另一些保留字（class, enum, export, extends, import, super），以及各大浏览器自行增加的const保留字，也是不能作为变量名的。\n","slug":"Javascript-严格模式","published":1,"updated":"2016-02-01T06:55:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuid0lo70000nbto81cev47i"},{"title":"重新开博－hexo建站笔记","date":"2016-01-20T01:51:37.000Z","_content":"这两天重新搭了hexo博客.过程中一直不停的踩坑踩到脚软。一年前我搭过一个hexo博客。\n由于博客的域名前缀必须跟github账号名一至。介于以前的github用户名有点土，不符合我的个人风格，\n于是为了更土一点就重新注了个github账号。好了,开始入坑：\n<!-- more -->\n坑一：\n重新关联个帐呈本来不是什么难事，我以为本地仓库不用管，只要是把远程对接仓库的ssh和本地ssh对应上就好了。\n事实证明我to young to simple。\n本地的全局配置的用户名和邮箱没改，所以每次提交都说我的远程仓库没权限管理以前用户（yea..，土就不说全名了）。\n执行查看了一下全局配置：\n``` bash\n$ git config -l\n```\n 发现全局用户名和邮箱还是以前的，把这些依次改了，提交前会提示输入sshkey的密码。问题解决\n（其实这个问题上周五就解决过一次，当时不知道为啥好了。关机周一再启动又坏了。总之做之前先pull一下再说）以上是坑一。\n\n坑二:\nhexo搭建的时候我npm和hexo都全局安了。但hexo init后总报错.提示init完还要在npm install一下。\n我自作聪明的以为npm都全局安了就不用再install了。结果再次证明我to yuong to simple,\n老老实实按照提示安装（npm更新到最新版本以后不再提示再装）\n\n``` bash\n$ npm install \n```\n出现三个报错。后来在网上找了解决方案。\n\n``` bash\n$ sudo npm install --no-optional\n```\n\n不报了错了。其实这个报错不影响什么，但每执行都跟着就是很烦,强迫症的人不能忍。\n（ps:之后升级了npm以后这个错误又出现了,所以如果你也是mac能sudo尽量sudo吧）\n问题解决继续下一步，\n``` bash\n$ hexo generate。\n```\n启动本地服务：\n``` bash\n$ hexo server\n```\n启动服务后可以预览。发现皮肤太丑。就去git上找了个主题。下载完按要求到cd themes/xxx 执行了↪git pull。 \n发现主题没更新!觉得是缓存就hexo clean 下。我以为跟fis一样关掉再重新监听一下就好了。结果又一次证明我to yuong to simple。本地彻底访问不了了。一气之下把终端关了再启动，提示我没有npm指令。奇怪的是node和依赖npm下的各种包webpage.gulp less都在。上网求解答有人出主意说把npm下的这些包都删了，重新装npm再把这些包一个个安上就好了。我打开npm的目录一看里面不下十个。\n够安一阵了。一想姐如果就为搭个hexo把电脑都重装了也真是够了。\n再一琢磨，好像npm是集成在node上的。抱着试试看的心里重新安了一下node，npm好了。但博客依然访问不了仍报错。\n\n就这个问题去找我们前端组的领袖@凯哥[凯歌博客](http://blog.css6.com)。他已经是hexo的老用户了,博客建的很好，经常去学习。\n哥看完对比了下他自己配置环境与我的不同，揣测我可能是node和npm版本太高了，建议我下个稳定版的。白天大家有工作缠身也不便多扰。\n大神给了建议就照着路子回去自己摸索吧。\n回座位在网上找了半天低版本无果。我心想既然如此。索性就把所有都升到最高。于是\n``` bash\nnpm upload npm -g\n```\n把npm等类都升到了最高。果然能跑起来了。然后我拷了模板（模板拷到themes目录在把就可以了，但是 git pull：相当于是从远程获取最新版本并merge到本地。git pull origin master相当于git fetch 和 git merge ） 和配置文件（配置文件不能拷贝覆盖？反正我只要逐行修改保存就可以，直接覆盖就崩溃，内容始终没找到差异，有知道的朋友欢迎指证）。\n我对着凯哥的配置文件一行行改。改一行启动服务一次查看，从头对到尾也没找出差异。\n继续下一步\n\n``` bash\nhexo new \"文章名\"\n```\n随便编了个内容部署到github:\n``` bash\nhexo deloy\n```\n\n报了一个错  hexo ERROR Deployer not found: github\n找了解决方案hexo3.0以上的版本:\n1.安装sudo npm install hexo-deployer-git --save\n2.将deploy 的 type由github改为git\n\n再次deloy成功部署到gibhub上。页面是404我的git用户名叫linjieFE。所以我的博客也得叫linjieaFE.github.io[我的博客地址](http://linjieaFE.github.io)。\n但是不能大写改成jinjiefe就好了。\n最后终于大功告成了。\n\n这里只是蜻蜓点水，如果想把博客建的更好更漂亮，\n一定要好好研读[hexo文档](http://wiki.jikexueyuan.com/project/hexo-document/)\n这里提供一些参考文档,也希望能对见到此文的人有所帮助都少踩坑:\n[Hexo 静态博客使用指南](http://www.jianshu.com/p/73779eacb494)\n[hexo常见问题解决方案](http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88)\n","source":"_posts/重新开博－hexo建站笔记.md","raw":"---\ntitle: 重新开博－hexo建站笔记\ndate: 2016-01-20 09:51:37\ncategories: 学习笔记\ntags:\n- hexo\n- 随笔\n---\n这两天重新搭了hexo博客.过程中一直不停的踩坑踩到脚软。一年前我搭过一个hexo博客。\n由于博客的域名前缀必须跟github账号名一至。介于以前的github用户名有点土，不符合我的个人风格，\n于是为了更土一点就重新注了个github账号。好了,开始入坑：\n<!-- more -->\n坑一：\n重新关联个帐呈本来不是什么难事，我以为本地仓库不用管，只要是把远程对接仓库的ssh和本地ssh对应上就好了。\n事实证明我to young to simple。\n本地的全局配置的用户名和邮箱没改，所以每次提交都说我的远程仓库没权限管理以前用户（yea..，土就不说全名了）。\n执行查看了一下全局配置：\n``` bash\n$ git config -l\n```\n 发现全局用户名和邮箱还是以前的，把这些依次改了，提交前会提示输入sshkey的密码。问题解决\n（其实这个问题上周五就解决过一次，当时不知道为啥好了。关机周一再启动又坏了。总之做之前先pull一下再说）以上是坑一。\n\n坑二:\nhexo搭建的时候我npm和hexo都全局安了。但hexo init后总报错.提示init完还要在npm install一下。\n我自作聪明的以为npm都全局安了就不用再install了。结果再次证明我to yuong to simple,\n老老实实按照提示安装（npm更新到最新版本以后不再提示再装）\n\n``` bash\n$ npm install \n```\n出现三个报错。后来在网上找了解决方案。\n\n``` bash\n$ sudo npm install --no-optional\n```\n\n不报了错了。其实这个报错不影响什么，但每执行都跟着就是很烦,强迫症的人不能忍。\n（ps:之后升级了npm以后这个错误又出现了,所以如果你也是mac能sudo尽量sudo吧）\n问题解决继续下一步，\n``` bash\n$ hexo generate。\n```\n启动本地服务：\n``` bash\n$ hexo server\n```\n启动服务后可以预览。发现皮肤太丑。就去git上找了个主题。下载完按要求到cd themes/xxx 执行了↪git pull。 \n发现主题没更新!觉得是缓存就hexo clean 下。我以为跟fis一样关掉再重新监听一下就好了。结果又一次证明我to yuong to simple。本地彻底访问不了了。一气之下把终端关了再启动，提示我没有npm指令。奇怪的是node和依赖npm下的各种包webpage.gulp less都在。上网求解答有人出主意说把npm下的这些包都删了，重新装npm再把这些包一个个安上就好了。我打开npm的目录一看里面不下十个。\n够安一阵了。一想姐如果就为搭个hexo把电脑都重装了也真是够了。\n再一琢磨，好像npm是集成在node上的。抱着试试看的心里重新安了一下node，npm好了。但博客依然访问不了仍报错。\n\n就这个问题去找我们前端组的领袖@凯哥[凯歌博客](http://blog.css6.com)。他已经是hexo的老用户了,博客建的很好，经常去学习。\n哥看完对比了下他自己配置环境与我的不同，揣测我可能是node和npm版本太高了，建议我下个稳定版的。白天大家有工作缠身也不便多扰。\n大神给了建议就照着路子回去自己摸索吧。\n回座位在网上找了半天低版本无果。我心想既然如此。索性就把所有都升到最高。于是\n``` bash\nnpm upload npm -g\n```\n把npm等类都升到了最高。果然能跑起来了。然后我拷了模板（模板拷到themes目录在把就可以了，但是 git pull：相当于是从远程获取最新版本并merge到本地。git pull origin master相当于git fetch 和 git merge ） 和配置文件（配置文件不能拷贝覆盖？反正我只要逐行修改保存就可以，直接覆盖就崩溃，内容始终没找到差异，有知道的朋友欢迎指证）。\n我对着凯哥的配置文件一行行改。改一行启动服务一次查看，从头对到尾也没找出差异。\n继续下一步\n\n``` bash\nhexo new \"文章名\"\n```\n随便编了个内容部署到github:\n``` bash\nhexo deloy\n```\n\n报了一个错  hexo ERROR Deployer not found: github\n找了解决方案hexo3.0以上的版本:\n1.安装sudo npm install hexo-deployer-git --save\n2.将deploy 的 type由github改为git\n\n再次deloy成功部署到gibhub上。页面是404我的git用户名叫linjieFE。所以我的博客也得叫linjieaFE.github.io[我的博客地址](http://linjieaFE.github.io)。\n但是不能大写改成jinjiefe就好了。\n最后终于大功告成了。\n\n这里只是蜻蜓点水，如果想把博客建的更好更漂亮，\n一定要好好研读[hexo文档](http://wiki.jikexueyuan.com/project/hexo-document/)\n这里提供一些参考文档,也希望能对见到此文的人有所帮助都少踩坑:\n[Hexo 静态博客使用指南](http://www.jianshu.com/p/73779eacb494)\n[hexo常见问题解决方案](http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88)\n","slug":"重新开博－hexo建站笔记","published":1,"updated":"2016-01-20T07:52:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuid0lok0007nbtob51vto7a"},{"title":"关于面试","date":"2016-01-25T15:32:50.000Z","_content":"今天天小组会的时候组长wh模拟了一次面试。面试对象是猴哥，但问题几乎虐翻全场。\n这两年也经过的一些面试，总结感受。我觉得面试有三个要点，一看真实实力，二看运气，三看面试你的人。对whao这种技术狂人来说，面试是一个互劈的过程。当然我是面试官可能也不太会以自己软肋接别人硬拳头。所以通过他进入平安的人都是js逼，绝逼不可能有css逼。我看得出他十分享受别人被他问的一愣一愣又一脸崇拜的样子。他问猴哥的问题我印象里在去年他做过一次分享会。既是能拿出手的一定是他强项。当然，这不代表他其他方面就弱。所以记住一点，面试官问的问题一般都是有备而来，胸有成竹的。所以不会就谦虚点坦言自己不会，千万别不会还一本正经的胡说八道。技不如人不丢人，通过后天学习可以弥补。但不会做人就是品质问题了。会做事是(IQ)而处理事的态度是(EQ)。我觉得实际工作中情商比智商更重要。\n\n当然如果你足够有聪慧又健谈，也可以争得主动权引导着面试官跟着你的思路走。多聊你自己擅长的东西，但前提得是你这方面真的牛逼，否则不要轻易撕逼，否则撕完你就成傻逼。前端是一个知识很广泛的圈。只要不是到了专家的变态级别应该不会有人真的各个方面都无懈可击。\n一般来说去面试跟你聊生活的是行政人事，聊技术的是同事或Leader， 聊情怀和理想的是老板。其他俩个随便扯扯淡即可，聊技术的，决定了你今后跟什么样的人和团队共事。 从面试官的身上可以直接反映这个前端团队的技术层次和应征单位前端职位的受重视程度。这是一个互相试水的过程。所以一定要诚实对待，假如你跟面你的人话不投机就别妄想了。就算你趋炎附势混进去，终有一天也会因各种水土不服滚出来。我常说面试跟相亲一样，虽然我没相过亲，但没吃过猪肉也看过猪跑。面试二字，面首先是眼缘，第一印象，话语是否投机，沟通是否顺畅，其次是试。这试具体前面已经说过，不再赘述。有机会还是多去知名的大公司去。我不是对小公司有偏见，也不否认小公司也有强人，而是概率问题，就像我相信“鸡窝里也能飞出金凤凰”，但毕竟少数个例，总能看见鸡窝里飞出凤凰的概率还是极低的。\n附几个较新的前端面试题链接。平时可以自己做一下。心里有个底，不足则加勉。\n来源阿里的寒冬witer老师(github:@wintercn)\n[前端开发面试题](https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md?from=timeline&isappinstalled=0)\n来源凯歌博客[前端开发面试题](https://github.com/jsonxu/F2E-Blog/blob/master/2015%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md)\n[前端开发面试问题及答案整理1](https://github.com/hawx1993/Front-end-Interview-questions)\n[前端开发面试问题及答案整理2](https://github.com/AutumnsWind/Front-end-questions-to-the-interview-stage)\n[前端开发面试问题及答案整理3](https://github.com/paddingme/Front-end-Web-Development-Interview-Question)\n[前端开发面试问题及答案整理4](https://github.com/qiu-deqing/FE-interview)\n说完面试，再聊聊最近学习上的一些感悟。进入平安金科也有1年半。各个小组也都共事过一圈。从一账通到官网到旗舰店，平安金融卫士，到现在的移动端。每个小组和组长都有自己的特点，优势和不足。这一年收获很大。美国有句谚语“学会游泳的最好办法 就是把鸭子扔进河里”想学到东西方法很多，最有用的途径绝不是照本宣科，而是投在实际项目中不断的打怪升级。不要畏惧辛苦，手里有项目做，并且是有价值的项目是一件极好的事。\n人无论水平高还是低，在自学的过程中都会有自己的瓶颈和盲点。有时我们或许很用心认真的按自己的逻辑完成一个demo，你觉得你已经倾其所能把它做到极致了。OK你觉得很完美。其实远远不够，多看别人的代码，会从中获取新的能量。我有时常看zf的代码会发现他做了跟我同样的东西，却用了不同的办法。然后思考他为什么这么做？好处是什么？思考之后，去其糟粕，取其精华，再回头把自己原来的代码进一步优化。可能忽然一下如醍醐灌顶。 \n\n古话说“他山之石，可以功玉” 可能你开始只会把别人的代码拷过来，后来渐渐会改一点。一点点从借用到巧用，但只要足够坚持，天道酬勤总有一天你会写出自己的东西。\n我很喜欢图灵的书，觉的几乎每本都是精华，但每本图灵的书封总有那句话“站在巨人的肩膀上”!\n 我觉得不管用什么方式，只要不涉及版权和盈利目地，在合理范围内以正常途径的抄写，借鉴，引用……只要可以从中吸收营养，推进自己进步都不失为一种好的学习途径。\n","source":"_posts/关于面试.md","raw":"---\ntitle: 关于面试\ndate: 2016-01-25 23:32:50\ntags:\n- 前题面试题\n- 随笔\n---\n今天天小组会的时候组长wh模拟了一次面试。面试对象是猴哥，但问题几乎虐翻全场。\n这两年也经过的一些面试，总结感受。我觉得面试有三个要点，一看真实实力，二看运气，三看面试你的人。对whao这种技术狂人来说，面试是一个互劈的过程。当然我是面试官可能也不太会以自己软肋接别人硬拳头。所以通过他进入平安的人都是js逼，绝逼不可能有css逼。我看得出他十分享受别人被他问的一愣一愣又一脸崇拜的样子。他问猴哥的问题我印象里在去年他做过一次分享会。既是能拿出手的一定是他强项。当然，这不代表他其他方面就弱。所以记住一点，面试官问的问题一般都是有备而来，胸有成竹的。所以不会就谦虚点坦言自己不会，千万别不会还一本正经的胡说八道。技不如人不丢人，通过后天学习可以弥补。但不会做人就是品质问题了。会做事是(IQ)而处理事的态度是(EQ)。我觉得实际工作中情商比智商更重要。\n\n当然如果你足够有聪慧又健谈，也可以争得主动权引导着面试官跟着你的思路走。多聊你自己擅长的东西，但前提得是你这方面真的牛逼，否则不要轻易撕逼，否则撕完你就成傻逼。前端是一个知识很广泛的圈。只要不是到了专家的变态级别应该不会有人真的各个方面都无懈可击。\n一般来说去面试跟你聊生活的是行政人事，聊技术的是同事或Leader， 聊情怀和理想的是老板。其他俩个随便扯扯淡即可，聊技术的，决定了你今后跟什么样的人和团队共事。 从面试官的身上可以直接反映这个前端团队的技术层次和应征单位前端职位的受重视程度。这是一个互相试水的过程。所以一定要诚实对待，假如你跟面你的人话不投机就别妄想了。就算你趋炎附势混进去，终有一天也会因各种水土不服滚出来。我常说面试跟相亲一样，虽然我没相过亲，但没吃过猪肉也看过猪跑。面试二字，面首先是眼缘，第一印象，话语是否投机，沟通是否顺畅，其次是试。这试具体前面已经说过，不再赘述。有机会还是多去知名的大公司去。我不是对小公司有偏见，也不否认小公司也有强人，而是概率问题，就像我相信“鸡窝里也能飞出金凤凰”，但毕竟少数个例，总能看见鸡窝里飞出凤凰的概率还是极低的。\n附几个较新的前端面试题链接。平时可以自己做一下。心里有个底，不足则加勉。\n来源阿里的寒冬witer老师(github:@wintercn)\n[前端开发面试题](https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md?from=timeline&isappinstalled=0)\n来源凯歌博客[前端开发面试题](https://github.com/jsonxu/F2E-Blog/blob/master/2015%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md)\n[前端开发面试问题及答案整理1](https://github.com/hawx1993/Front-end-Interview-questions)\n[前端开发面试问题及答案整理2](https://github.com/AutumnsWind/Front-end-questions-to-the-interview-stage)\n[前端开发面试问题及答案整理3](https://github.com/paddingme/Front-end-Web-Development-Interview-Question)\n[前端开发面试问题及答案整理4](https://github.com/qiu-deqing/FE-interview)\n说完面试，再聊聊最近学习上的一些感悟。进入平安金科也有1年半。各个小组也都共事过一圈。从一账通到官网到旗舰店，平安金融卫士，到现在的移动端。每个小组和组长都有自己的特点，优势和不足。这一年收获很大。美国有句谚语“学会游泳的最好办法 就是把鸭子扔进河里”想学到东西方法很多，最有用的途径绝不是照本宣科，而是投在实际项目中不断的打怪升级。不要畏惧辛苦，手里有项目做，并且是有价值的项目是一件极好的事。\n人无论水平高还是低，在自学的过程中都会有自己的瓶颈和盲点。有时我们或许很用心认真的按自己的逻辑完成一个demo，你觉得你已经倾其所能把它做到极致了。OK你觉得很完美。其实远远不够，多看别人的代码，会从中获取新的能量。我有时常看zf的代码会发现他做了跟我同样的东西，却用了不同的办法。然后思考他为什么这么做？好处是什么？思考之后，去其糟粕，取其精华，再回头把自己原来的代码进一步优化。可能忽然一下如醍醐灌顶。 \n\n古话说“他山之石，可以功玉” 可能你开始只会把别人的代码拷过来，后来渐渐会改一点。一点点从借用到巧用，但只要足够坚持，天道酬勤总有一天你会写出自己的东西。\n我很喜欢图灵的书，觉的几乎每本都是精华，但每本图灵的书封总有那句话“站在巨人的肩膀上”!\n 我觉得不管用什么方式，只要不涉及版权和盈利目地，在合理范围内以正常途径的抄写，借鉴，引用……只要可以从中吸收营养，推进自己进步都不失为一种好的学习途径。\n","slug":"关于面试","published":1,"updated":"2016-01-26T06:09:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuid0lot000dnbtoi3u5tpbf"},{"title":"关于IE的下的haslayout问题","date":"2016-01-26T02:58:48.000Z","_content":"今天早上我们一个前端同事GQL遇到一个问题。在IE7下position:relative层在动态渲染时出现偏移.\n跟下面这个demo情景相似\n\n``` html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <title>IE7 absolute positioning bug</title>\n    <style type=\"text/css\">\n      #panel { position: relative; border: solid 1px black; }\n      #spacer { height: 100px; }\n      #footer { position: absolute; bottom: 0px; }\n    </style>\n    <script type=\"text/javascript\">\n      function toggle() {\n        var spacer = document.getElementById(\"spacer\");\n        var style = \"block\";\n        if (spacer.style.display == \"block\" || spacer.style.display == \"\") {\n          style = \"none\";\n        }\n        spacer.style.display = style;\n      }\n    </script>\n  </head>\n  <body>\n    <div id=\"panel\">\n      <button onclick=\"toggle();\">Click me</button>\n      <br /><br /><br />\n      <div id=\"spacer\"></div>\n      <div id=\"footer\">This is some footer</div>\n    </div>\n  </body>\n</html>\n```\n\n在IE7中，点击\"Click me\"，“This is some footer”没有随着边框向上走。在IE8/9/10/11，firefox里面都是正常。\n\n二、原因分析\n1 \\#panel没有布局，因此当#panel重新布局的时候，IE7没有重画#panel的孩子。\n2 position:relative没有触发IE的hasLayout属性。只有当元素的hasLayout属性被设为了true，才能对自己和子孙元素进行尺寸计算和定位。\n3 overflow:hidden和float:left和zoom:1都能触发hasLayout属性。\n<!--more-->\n至于为什么一定要触发hasLayout属性，才会对元素和元素的子孙进行重新定位，请参照【资料1】。\n\n三、解决方法\n\\#panel的属性中添加 overflow:hidden，或者添加float:left;width:100%; 再或者zoom:1 。这三种方法都是可以修复这个bug的。\n\n四、参考资料\n资料1：[IE7 relative/absolute positioning bug with dynamically modified page content](http://stackoverflow.com/questions/2473171/ie7-relative-absolute-positioning-bug-with-dynamically-modified-page-content)\n\n即然问题出在haslayout上，那下面就着重介绍一下haslayout\n\n# haslayout详解\n\nIE，这个令所有网站设计人员讨厌，但又不得不为它工作的浏览器。不论是6、7还是8，它们都有一个共同的渲染标准haslayout，所以haslayout 是一个非常有必要彻底弄清除的概念。大多 数IE下的显示错误，就是源于它。\n\n## 什么是Layout呢？\n\n\"Layout\"是IE的一个私有属性，并不是W3C标准。它决定了一个对象（就是一个标签div、li等）在内容中如何显示、与周围对象的位置关系、以及怎样响应程序或用户产生的事件。\n\n这个属性可以被一些css强制激活。一些HTML标签默认具有haslayout。\nPS：一个对象的layout属性被激活，它的具体表现就是haslayout=true。我们可以用IE Developer Toolbar工具看到被激活的对象带有\"haslayout = -1\"的属性。\n\n## 下面这些标签默认拥有haslayout属性：\n\n\n``` html\n<html>, <body>\n<table>, <tr>, <th>, <td>\n<img>\n<hr>\n<input>, <button>, <select>, <textarea>, <fieldset>, <legend>\n<iframe>, <embed>, <object>, <applet>\n<marquee>\n```\n<!--<p>&lt;html&gt;, &lt;body&gt;\n&lt;table&gt;, &lt;tr&gt;, &lt;th&gt;, &lt;td&gt;\n&lt;img&gt;\n&lt;hr&gt;\n&lt;input&gt;, &lt;button&gt;, &lt;select&gt;, &lt;textarea&gt;, &lt;fieldset&gt;, &lt;legend&gt;\n&lt;iframe&gt;, &lt;embed&gt;, &lt;object&gt;, &lt;applet&gt;\n&lt;marquee&gt;</p>-->\n\n\n你可能就问：微软干嘛要设layout这个东西呢？当一个对象的layout被激活时，它以及它的子对象的定位和尺寸计算将独立进行，不受附近对象 的干扰。也就是说它拥有一个独立的布局（layout）。因此浏览器要花费更多的代价来处理拥有haslayout的对象。为了提高性能，微软增加了 layout这个IE私有的概念。\n\n## 怎样激活layout？\n\n### 下面列出的css属性可以激活对象的layout：\n\nposition: absolute\n设置绝对定位可能会引发新的问题。\nfloat: left|right\nIE下的浮动也会产生一些莫名其妙的问题。\ndisplay: inline-block\n当一个内联元素需要haslayout属性时就需要用它，但是IE本身不支持inline-block的，只是表现得像标准里说的inline-block。\nwidth: 除'auto'外的任意值\n优先考虑使用该属性。\nheight: 除'auto'外的任意值\n对 IE6 及更早版本来说很常用，该方法被称为霍莉破解(Holly hack)，即设定这个元素的高度为 1% (height:1%;)。但是要注意，当这个元素的 overflow 属性被设置为 visible 时，这个方法就失效了。\nzoom: 除'normal'外的任意值\n又一个ie私有属性，不兼容标准。zoom:1可以在测试或者不追求标准的情况下使用，效果不错。\nwriting-mode: tb-rl\nie私有属性，不推荐用。\n### IE7 还有一些额外的属性：\n\nmin-height: (任意值)\nmax-height: (除 none 外任意值)\nmin-width: (任意值)\nmax-width: (除 none 外任意值)\noverflow: (除 visible 外任意值)\noverflow-x: (除 visible 外任意值)\noverflow-y: (除 visible 外任意值)\nposition: fixed\n重置haslayout\n\n### 在没有其它属性激活layout的情况下，使用下面的css可以重置haslayout属性：\n\nwidth, height (设为 \"auto\")\nmax-width, max-height (设为 \"none\")(在 IE 7 中)\nposition (设为 \"static\")\nfloat (设为 \"none\")\noverflow (设为 \"visible\") (在 IE 7 中)\nzoom (设为 \"normal\")\nwriting-mode (从 \"tb-rl\" 设为 \"lr-t\")\ndisplay 属性的不同：当用\"inline-block\"激活了haslayout 属性时，就算在一条独立的规则中覆盖这个属性为\"block\"或\"inline\"，haslayout 这个标志位也不会被重置为 false。\n\n把 mid-width, mid-height 设为它们的默认值\"0\"仍然会赋予 hasLayout，但是 IE 7 却可以接受一个不合法的属性\"auto\"来重置 hasLayout。\n","source":"_posts/关于haslayout.md","raw":"---\ntitle: '关于IE的下的haslayout问题'\ndate: 2016-01-26 10:58:48\ntags:\n  - 学习笔记\ncategories: 学习笔记\n---\n今天早上我们一个前端同事GQL遇到一个问题。在IE7下position:relative层在动态渲染时出现偏移.\n跟下面这个demo情景相似\n\n``` html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <title>IE7 absolute positioning bug</title>\n    <style type=\"text/css\">\n      #panel { position: relative; border: solid 1px black; }\n      #spacer { height: 100px; }\n      #footer { position: absolute; bottom: 0px; }\n    </style>\n    <script type=\"text/javascript\">\n      function toggle() {\n        var spacer = document.getElementById(\"spacer\");\n        var style = \"block\";\n        if (spacer.style.display == \"block\" || spacer.style.display == \"\") {\n          style = \"none\";\n        }\n        spacer.style.display = style;\n      }\n    </script>\n  </head>\n  <body>\n    <div id=\"panel\">\n      <button onclick=\"toggle();\">Click me</button>\n      <br /><br /><br />\n      <div id=\"spacer\"></div>\n      <div id=\"footer\">This is some footer</div>\n    </div>\n  </body>\n</html>\n```\n\n在IE7中，点击\"Click me\"，“This is some footer”没有随着边框向上走。在IE8/9/10/11，firefox里面都是正常。\n\n二、原因分析\n1 \\#panel没有布局，因此当#panel重新布局的时候，IE7没有重画#panel的孩子。\n2 position:relative没有触发IE的hasLayout属性。只有当元素的hasLayout属性被设为了true，才能对自己和子孙元素进行尺寸计算和定位。\n3 overflow:hidden和float:left和zoom:1都能触发hasLayout属性。\n<!--more-->\n至于为什么一定要触发hasLayout属性，才会对元素和元素的子孙进行重新定位，请参照【资料1】。\n\n三、解决方法\n\\#panel的属性中添加 overflow:hidden，或者添加float:left;width:100%; 再或者zoom:1 。这三种方法都是可以修复这个bug的。\n\n四、参考资料\n资料1：[IE7 relative/absolute positioning bug with dynamically modified page content](http://stackoverflow.com/questions/2473171/ie7-relative-absolute-positioning-bug-with-dynamically-modified-page-content)\n\n即然问题出在haslayout上，那下面就着重介绍一下haslayout\n\n# haslayout详解\n\nIE，这个令所有网站设计人员讨厌，但又不得不为它工作的浏览器。不论是6、7还是8，它们都有一个共同的渲染标准haslayout，所以haslayout 是一个非常有必要彻底弄清除的概念。大多 数IE下的显示错误，就是源于它。\n\n## 什么是Layout呢？\n\n\"Layout\"是IE的一个私有属性，并不是W3C标准。它决定了一个对象（就是一个标签div、li等）在内容中如何显示、与周围对象的位置关系、以及怎样响应程序或用户产生的事件。\n\n这个属性可以被一些css强制激活。一些HTML标签默认具有haslayout。\nPS：一个对象的layout属性被激活，它的具体表现就是haslayout=true。我们可以用IE Developer Toolbar工具看到被激活的对象带有\"haslayout = -1\"的属性。\n\n## 下面这些标签默认拥有haslayout属性：\n\n\n``` html\n<html>, <body>\n<table>, <tr>, <th>, <td>\n<img>\n<hr>\n<input>, <button>, <select>, <textarea>, <fieldset>, <legend>\n<iframe>, <embed>, <object>, <applet>\n<marquee>\n```\n<!--<p>&lt;html&gt;, &lt;body&gt;\n&lt;table&gt;, &lt;tr&gt;, &lt;th&gt;, &lt;td&gt;\n&lt;img&gt;\n&lt;hr&gt;\n&lt;input&gt;, &lt;button&gt;, &lt;select&gt;, &lt;textarea&gt;, &lt;fieldset&gt;, &lt;legend&gt;\n&lt;iframe&gt;, &lt;embed&gt;, &lt;object&gt;, &lt;applet&gt;\n&lt;marquee&gt;</p>-->\n\n\n你可能就问：微软干嘛要设layout这个东西呢？当一个对象的layout被激活时，它以及它的子对象的定位和尺寸计算将独立进行，不受附近对象 的干扰。也就是说它拥有一个独立的布局（layout）。因此浏览器要花费更多的代价来处理拥有haslayout的对象。为了提高性能，微软增加了 layout这个IE私有的概念。\n\n## 怎样激活layout？\n\n### 下面列出的css属性可以激活对象的layout：\n\nposition: absolute\n设置绝对定位可能会引发新的问题。\nfloat: left|right\nIE下的浮动也会产生一些莫名其妙的问题。\ndisplay: inline-block\n当一个内联元素需要haslayout属性时就需要用它，但是IE本身不支持inline-block的，只是表现得像标准里说的inline-block。\nwidth: 除'auto'外的任意值\n优先考虑使用该属性。\nheight: 除'auto'外的任意值\n对 IE6 及更早版本来说很常用，该方法被称为霍莉破解(Holly hack)，即设定这个元素的高度为 1% (height:1%;)。但是要注意，当这个元素的 overflow 属性被设置为 visible 时，这个方法就失效了。\nzoom: 除'normal'外的任意值\n又一个ie私有属性，不兼容标准。zoom:1可以在测试或者不追求标准的情况下使用，效果不错。\nwriting-mode: tb-rl\nie私有属性，不推荐用。\n### IE7 还有一些额外的属性：\n\nmin-height: (任意值)\nmax-height: (除 none 外任意值)\nmin-width: (任意值)\nmax-width: (除 none 外任意值)\noverflow: (除 visible 外任意值)\noverflow-x: (除 visible 外任意值)\noverflow-y: (除 visible 外任意值)\nposition: fixed\n重置haslayout\n\n### 在没有其它属性激活layout的情况下，使用下面的css可以重置haslayout属性：\n\nwidth, height (设为 \"auto\")\nmax-width, max-height (设为 \"none\")(在 IE 7 中)\nposition (设为 \"static\")\nfloat (设为 \"none\")\noverflow (设为 \"visible\") (在 IE 7 中)\nzoom (设为 \"normal\")\nwriting-mode (从 \"tb-rl\" 设为 \"lr-t\")\ndisplay 属性的不同：当用\"inline-block\"激活了haslayout 属性时，就算在一条独立的规则中覆盖这个属性为\"block\"或\"inline\"，haslayout 这个标志位也不会被重置为 false。\n\n把 mid-width, mid-height 设为它们的默认值\"0\"仍然会赋予 hasLayout，但是 IE 7 却可以接受一个不合法的属性\"auto\"来重置 hasLayout。\n","slug":"关于haslayout","published":1,"updated":"2016-01-26T06:05:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuid0lpe000hnbto3x3pz7n9"},{"title":"react 环境搭建","date":"2016-10-20T10:12:15.000Z","_content":"\n## 1、node安装\n首先，需要node环境支持，如果你还没有安装node.js，请移步[nodejs官网](https://nodejs.org/en/)。\n\n## 2、初始化项目\n```bash\nnpm init\n```\n回车即可 到最后，你的项目根目录会多一个package.json的文件。\n\n## 3、添加项目依赖\n\n接下来，我们打开package.json文件，给项目添加依赖包。当然，最简单的方法便是直接修改package.json文件，然后通过npm install安装依赖即可，但是考虑到依赖包的不断更新迭代，或许今后的不久就已经不是当前版本，为了能保证，我们每个看到这边文章的童鞋都是用的最新依赖包，我们直接通过npm install  **  --save-dev方式来安装我们依赖包。\n\n首先，我们来安装dependencies：\n\n```bash\nnpm install --save react react-dom lodash\n```\n按理来说，上面的命令并没有任何问题，但是小编却在这里遇到一个坑，那就是项目取名为react，然后再安装react的时候被拒绝\n当然，解决方法就是重新命名，为了避免不必要的麻烦，还是推荐小伙伴们不要把项目名称命名成你要安装的包名，譬如：react，webpack等等。\n\n泪的教训：如果你遇到上述的错误，请删掉该项目重新新建一个项目，因为无论如何也还是会报这个错误，包括重启也是于事无补。\n\n再次安装react的时候，切忌一定要安装到生产依赖。\n```bash\nnpm install --save-dev react\n```\n不出意外，应该是可以了，接下来我们就可以安装其他依赖。\n```bash\nnpm install babel babel-core babel-loader babel-preset-es2015 babel-preset-react css-loader style-loader react-router webpack webpack-dev-server\n```\n\n```bash\nnpm install react-dom lodash --save\n```\n最后提醒一下，webpack和webpack-dev-server这两个包需要全局安装。\n```bash\nnpm install -g webpack webpack-dev-server\n```\n到这里我们的依赖包就安装完毕。\n\n以下便是package.json的最终代码：\n```bash\n{\n\n\"name\": \"react-demo\",\n\n\"version\": \"1.0.0\",\n\n\"description\": \"\",\n\n\"main\": \"index.js\",\n\n\"scripts\": {\n\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n\n},\n\n\"author\": \"\",\n\n\"license\": \"ISC\",\n\n\"devDependencies\": {\n\n\"babel\": \"^6.5.2\",\n\n\"babel-core\": \"^6.13.2\",\n\n\"babel-loader\": \"^6.2.4\",\n\n\"babel-preset-es2015\": \"^6.13.2\",\n\n\"babel-preset-react\": \"^6.11.1\",\n\n\"css-loader\": \"^0.23.1\",\n\n\"react\": \"^15.3.0\",\n\n\"react-hot-loader\": \"^1.3.0\",\n\n\"react-router\": \"^2.6.1\",\n\n\"style-loader\": \"^0.13.1\",\n\n\"webpack\": \"^1.13.1\",\n\n\"webpack-dev-server\": \"^1.14.1\"\n\n},\n\n\"dependencies\": {\n\n\"lodash\": \"^4.15.0\",\n\n\"react-dom\": \"^15.3.0\"\n\n}\n\n}\n\n```\n## 4、配置webpack\n新建一个webpack.config.js文件。\n```bash\nvar webpack = require(\"webpack\")\n\nvar path = require(\"path\")\n\nmodule.exports = {\n\ndevtool: \"inline-source-map\",\n\nentry: [\n\n\"webpack-dev-server/client?http://127.0.0.1:8080/\",\n\n\"webpack/hot/only-dev-server\",\n\n\"./app\"\n\n],\n\noutput: {\n\npath: path.join(__dirname, \"public\"),\n\nfilename: \"bundle.js\"\n\n},\n\nresolve: {\n\nmodulesDirectories: [\"node_modules\", \"app\"],\n\nextensions: [\"\", \".js\"]\n\n},\n\nmodule: {\n\nloaders: [\n\n{\n\ntest: /\\.jsx?$/,\n\nexclude: /node_modules/,\n\nloaders: [\"react-hot\", \"babel?presets[]=react,presets[]=es2015\"]\n\n},\n\n{\n\ntest: /\\.css?$/,\n\nexclude: /node_modules/,\n\nloaders: [\"style\", \"css\"]\n\n}\n]\n\n},\n\nplugins: [\n\nnew webpack.HotModuleReplacementPlugin(),\n\nnew webpack.NoErrorsPlugin()\n\n]\n\n}\n\n```\n以上便是webpack的基本配置，具体的webpack配置以后会单独介绍。\n## 5、项目文件\n![](img/react_files.jpg)\n\nindex.html\n```html\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>React demo</title>\n\n</head>\n\n<body>\n\n<div id=\"app\"></div>\n\n<script src=\"bundle.js\"></script>\n\n</body>\n\n</html>\n\n```\nindex.js\n```html\nimport React from 'react'\n\nimport {render} from 'react-dom'render(\n\nrender(<div>hello wold</div>,document.getElementById(\"app\"));\n```\n\n这个时候，一个简单的hello word就已经完成，运行如下命令\n\n```bash\nwebpack-dev-server\n```\n使用浏览器打开http://127.0.0.1:8080就能看到hello world。这里的webpack-dev-server可以实时监测文件修改，已实时观看最终效果。\n\n但是每次要预览效果，我们要输入这么一大串，难免有所不便，\n\n打开package.json文件，找到scripts结点，更改如下所示：\n```bash\n\"scripts\": {\n\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n\n\"dev\":\"webpack-dev-server\"\n\n}\n```\n这样，我们就只需要在命令行中输入：\n```bash\nnpm run dev\n```\n\n当然，如果你嫌上面的步骤太过繁琐，你可以直接下载[github](https://github.com/swimly/react-demo)上面的代码，然后直接运行：\n```bash\nnpm install\n```\n\n\n文／Swimly（简书作者）\n原文链接：http://www.jianshu.com/p/0d7a70e39d2e\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。\n\n","source":"_posts/react-环境搭建.md","raw":"---\ntitle: react 环境搭建\ndate: 2016-10-20 18:12:15\ntags:\n- react\n---\n\n## 1、node安装\n首先，需要node环境支持，如果你还没有安装node.js，请移步[nodejs官网](https://nodejs.org/en/)。\n\n## 2、初始化项目\n```bash\nnpm init\n```\n回车即可 到最后，你的项目根目录会多一个package.json的文件。\n\n## 3、添加项目依赖\n\n接下来，我们打开package.json文件，给项目添加依赖包。当然，最简单的方法便是直接修改package.json文件，然后通过npm install安装依赖即可，但是考虑到依赖包的不断更新迭代，或许今后的不久就已经不是当前版本，为了能保证，我们每个看到这边文章的童鞋都是用的最新依赖包，我们直接通过npm install  **  --save-dev方式来安装我们依赖包。\n\n首先，我们来安装dependencies：\n\n```bash\nnpm install --save react react-dom lodash\n```\n按理来说，上面的命令并没有任何问题，但是小编却在这里遇到一个坑，那就是项目取名为react，然后再安装react的时候被拒绝\n当然，解决方法就是重新命名，为了避免不必要的麻烦，还是推荐小伙伴们不要把项目名称命名成你要安装的包名，譬如：react，webpack等等。\n\n泪的教训：如果你遇到上述的错误，请删掉该项目重新新建一个项目，因为无论如何也还是会报这个错误，包括重启也是于事无补。\n\n再次安装react的时候，切忌一定要安装到生产依赖。\n```bash\nnpm install --save-dev react\n```\n不出意外，应该是可以了，接下来我们就可以安装其他依赖。\n```bash\nnpm install babel babel-core babel-loader babel-preset-es2015 babel-preset-react css-loader style-loader react-router webpack webpack-dev-server\n```\n\n```bash\nnpm install react-dom lodash --save\n```\n最后提醒一下，webpack和webpack-dev-server这两个包需要全局安装。\n```bash\nnpm install -g webpack webpack-dev-server\n```\n到这里我们的依赖包就安装完毕。\n\n以下便是package.json的最终代码：\n```bash\n{\n\n\"name\": \"react-demo\",\n\n\"version\": \"1.0.0\",\n\n\"description\": \"\",\n\n\"main\": \"index.js\",\n\n\"scripts\": {\n\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n\n},\n\n\"author\": \"\",\n\n\"license\": \"ISC\",\n\n\"devDependencies\": {\n\n\"babel\": \"^6.5.2\",\n\n\"babel-core\": \"^6.13.2\",\n\n\"babel-loader\": \"^6.2.4\",\n\n\"babel-preset-es2015\": \"^6.13.2\",\n\n\"babel-preset-react\": \"^6.11.1\",\n\n\"css-loader\": \"^0.23.1\",\n\n\"react\": \"^15.3.0\",\n\n\"react-hot-loader\": \"^1.3.0\",\n\n\"react-router\": \"^2.6.1\",\n\n\"style-loader\": \"^0.13.1\",\n\n\"webpack\": \"^1.13.1\",\n\n\"webpack-dev-server\": \"^1.14.1\"\n\n},\n\n\"dependencies\": {\n\n\"lodash\": \"^4.15.0\",\n\n\"react-dom\": \"^15.3.0\"\n\n}\n\n}\n\n```\n## 4、配置webpack\n新建一个webpack.config.js文件。\n```bash\nvar webpack = require(\"webpack\")\n\nvar path = require(\"path\")\n\nmodule.exports = {\n\ndevtool: \"inline-source-map\",\n\nentry: [\n\n\"webpack-dev-server/client?http://127.0.0.1:8080/\",\n\n\"webpack/hot/only-dev-server\",\n\n\"./app\"\n\n],\n\noutput: {\n\npath: path.join(__dirname, \"public\"),\n\nfilename: \"bundle.js\"\n\n},\n\nresolve: {\n\nmodulesDirectories: [\"node_modules\", \"app\"],\n\nextensions: [\"\", \".js\"]\n\n},\n\nmodule: {\n\nloaders: [\n\n{\n\ntest: /\\.jsx?$/,\n\nexclude: /node_modules/,\n\nloaders: [\"react-hot\", \"babel?presets[]=react,presets[]=es2015\"]\n\n},\n\n{\n\ntest: /\\.css?$/,\n\nexclude: /node_modules/,\n\nloaders: [\"style\", \"css\"]\n\n}\n]\n\n},\n\nplugins: [\n\nnew webpack.HotModuleReplacementPlugin(),\n\nnew webpack.NoErrorsPlugin()\n\n]\n\n}\n\n```\n以上便是webpack的基本配置，具体的webpack配置以后会单独介绍。\n## 5、项目文件\n![](img/react_files.jpg)\n\nindex.html\n```html\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>React demo</title>\n\n</head>\n\n<body>\n\n<div id=\"app\"></div>\n\n<script src=\"bundle.js\"></script>\n\n</body>\n\n</html>\n\n```\nindex.js\n```html\nimport React from 'react'\n\nimport {render} from 'react-dom'render(\n\nrender(<div>hello wold</div>,document.getElementById(\"app\"));\n```\n\n这个时候，一个简单的hello word就已经完成，运行如下命令\n\n```bash\nwebpack-dev-server\n```\n使用浏览器打开http://127.0.0.1:8080就能看到hello world。这里的webpack-dev-server可以实时监测文件修改，已实时观看最终效果。\n\n但是每次要预览效果，我们要输入这么一大串，难免有所不便，\n\n打开package.json文件，找到scripts结点，更改如下所示：\n```bash\n\"scripts\": {\n\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n\n\"dev\":\"webpack-dev-server\"\n\n}\n```\n这样，我们就只需要在命令行中输入：\n```bash\nnpm run dev\n```\n\n当然，如果你嫌上面的步骤太过繁琐，你可以直接下载[github](https://github.com/swimly/react-demo)上面的代码，然后直接运行：\n```bash\nnpm install\n```\n\n\n文／Swimly（简书作者）\n原文链接：http://www.jianshu.com/p/0d7a70e39d2e\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。\n\n","slug":"react-环境搭建","published":1,"updated":"2016-10-20T10:56:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuid0lph000knbtojpwehxj4"},{"title":"react-native 第一个demo","date":"2016-10-20T07:18:06.000Z","_content":"# React Native Mac环境搭建\n\n## 1、安装Homebrew\n安装Homebrew是为安装Node.js做前提准备。 \n安装命令:\n``` bash\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n注：可以通过下面命令查看Homebrew是否安装成功\n``` bash\nbrew -v\nHomebrew/homebrew-core (git revision 93f1; last commit 2016-05-23)\n```\n\n## 2、安装Node.js\n\n下载双击安装即可： \n下载地址： \n[https://nodejs.org/en/](https://nodejs.org/en/)\nNode.js 需要 4.0 及其以上版本。安装好之后，npm 也有了。\n\n## 3、安装React Native 命令行工具\n\n``` bash\nsudo npm install -g react-native-cli\n```\n\n## 4、安装Xcode，估计iOS开发的基本都安装有.\n\nXcode 7.0 或更高版本下载地 址： \n[https://developer.apple.com/xcode/downloads/](https://developer.apple.com/xcode/downloads/)\n\n## 5、安装 watchman 和 flow\n\n监控文件变化和类型检查的。安装如下\n\n``` bash \nbrew install watchman\nbrew install flow\n```\n\n## 6、初始化一个项目\n\n打开终端，在某个目录下输入命令(这一步会有点慢，耐心等待一下): \n``` bash\nreact-native init HelloWorld \n```\n### 运行项目\n\n![](img/rn-desk.png)\n\n用XCode打开ios/HelloWorld.xcodeproj文件，点击键盘\"⌘-R”或者点击\"Run\"，编译运行项目。会启动React-Native服务和iOS模拟器。\n在iOS模拟器中可以看到如图界面：\n![](img/rn_helloworld.png)\n\nReact-Native服务在编写过程中要一直开着 如果不小心把它关了，没关系，可以在终端输入：\n\n``` bash\nnpm start\n```\n来重新开启服务\n\n好了，看到这里，如果你已经成功配置了React-Native的环境，并且新建并成功运行了第一个程序了。那么，就先恭喜了，我们甚至没有写一行代码，就已经成功运行了第一个React-Native的程序，是不是还挺简单的。正所谓，良好的开端是成功的一半。\n\n\n\n\n\n","source":"_posts/react-native-第一个demo.md","raw":"---\ntitle: react-native 第一个demo\ndate: 2016-10-20 15:18:06\ncategories: 学习笔记\ntags:\n- 学习笔记\n- react-native\n---\n# React Native Mac环境搭建\n\n## 1、安装Homebrew\n安装Homebrew是为安装Node.js做前提准备。 \n安装命令:\n``` bash\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n注：可以通过下面命令查看Homebrew是否安装成功\n``` bash\nbrew -v\nHomebrew/homebrew-core (git revision 93f1; last commit 2016-05-23)\n```\n\n## 2、安装Node.js\n\n下载双击安装即可： \n下载地址： \n[https://nodejs.org/en/](https://nodejs.org/en/)\nNode.js 需要 4.0 及其以上版本。安装好之后，npm 也有了。\n\n## 3、安装React Native 命令行工具\n\n``` bash\nsudo npm install -g react-native-cli\n```\n\n## 4、安装Xcode，估计iOS开发的基本都安装有.\n\nXcode 7.0 或更高版本下载地 址： \n[https://developer.apple.com/xcode/downloads/](https://developer.apple.com/xcode/downloads/)\n\n## 5、安装 watchman 和 flow\n\n监控文件变化和类型检查的。安装如下\n\n``` bash \nbrew install watchman\nbrew install flow\n```\n\n## 6、初始化一个项目\n\n打开终端，在某个目录下输入命令(这一步会有点慢，耐心等待一下): \n``` bash\nreact-native init HelloWorld \n```\n### 运行项目\n\n![](img/rn-desk.png)\n\n用XCode打开ios/HelloWorld.xcodeproj文件，点击键盘\"⌘-R”或者点击\"Run\"，编译运行项目。会启动React-Native服务和iOS模拟器。\n在iOS模拟器中可以看到如图界面：\n![](img/rn_helloworld.png)\n\nReact-Native服务在编写过程中要一直开着 如果不小心把它关了，没关系，可以在终端输入：\n\n``` bash\nnpm start\n```\n来重新开启服务\n\n好了，看到这里，如果你已经成功配置了React-Native的环境，并且新建并成功运行了第一个程序了。那么，就先恭喜了，我们甚至没有写一行代码，就已经成功运行了第一个React-Native的程序，是不是还挺简单的。正所谓，良好的开端是成功的一半。\n\n\n\n\n\n","slug":"react-native-第一个demo","published":1,"updated":"2016-10-20T08:07:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuid0lpk000nnbtoqab4z6nn"},{"title":"MAC终端常用命令行","date":"2016-01-18T01:51:37.000Z","photos":["/img/mac.jpg"],"_content":"\n## mac 终端 常用命令\n\n## 基本命令\n\n### 1、列出文件\nls 参数 目录名 例: 看看驱动目录下有什么:ls /System/Library/Extensions\n参数 -w 显示中文，-l 详细信息， -a 包括隐藏文件\n\n### 2、转换目录\ncd 例：想到驱动目录下溜达一圈 cd /System/Library/Extensions\n\n### 3、建立新目录\nmkdir 目录名 例：在驱动目录下建一个备份目录 backup mkdir /System/Library/Extensions/backup\n在桌面上建一个备份目录 backup mkdir /User/用户名/Desktop/backup\n\n### 4、拷贝文件\ncp 参数 源文件 目标文件 例：想把桌面的Natit.kext 拷贝到驱动目录中 cp -R /User/用户名/Desktop/Natit.kext /System/Library/Extensions\n参数R表示对目录进行递归操作，kext在图形界面下看起来是个文件，实际上是个文件夹。\n把驱动目录下的所有文件备份到桌面backup\ncp -R /System/Library/Extensions/* /User/用户名/Desktop/backup\n\n### 5、删除文件\nrm 参数 文件 例：想删除驱动的缓存 rm -rf /System/Library/Extensions.kextcache rm -rf /System/Library/Extensions.mkext\n参数－rf 表示递归和强制，千万要小心使用，如果执行了 rm -rf / 你的系统就全没了\n<!-- more -->\n### 6、移动文件\nmv 文件 例：想把AppleHDA.Kext 移到桌面 mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop\n想把AppleHDA.Kext 移到备份目录中 mv /System/Library/Extensions/AppleHDA.kext /System/Library/Extensions/backup\n\n### 7、文本编辑\nnano 文件名 例：编辑natit Info.plist nano /System/Library/Extensions/Natit.kext/Info.plist\n<!-- more -->\n## 目录操作\n\n命令名 功能描述 使用举例\n\nmkdir 创建一个目录 mkdir dirname\n\nrmdir 删除一个目录 rmdir dirname\n\nmvdir 移动或重命名一个目录 mvdir dir1 dir2\n\ncd 改变当前目录 cd dirname\n\npwd 显示当前目录的路径名 pwd\n\nls 显示当前目录的内容 ls -la\n\n## 文件操作\n\n命令名 功能描述 使用举例\n\ncat 显示或连接文件 cat filename\n\nod 显示非文本文件的内容 od -c filename\n\ncp 复制文件或目录 cp file1 file2\n\nrm 删除文件或目录 rm filename\n\nmv 改变文件名或所在目录 mv file1 file2\n\nfind 使用匹配表达式查找文件 find . -name “*.c” -print\n\nfile 显示文件类型 file filename\n\n## 选择操作\n\n命令名 功能描述 使用举例\n\nhead 显示文件的最初几行 head -20 filename\n\ntail 显示文件的最后几行 tail -15 filename\n\ncut 显示文件每行中的某些域 cut -f1,7 -d: /etc/passwd\n\ncolrm 从标准输入中删除若干列 colrm 8 20 file2\n\ndiff 比较并显示两个文件的差异 diff file1 file2\n\nsort 排序或归并文件 sort -d -f -u file1\n\nuniq 去掉文件中的重复行 uniq file1 file2\n\ncomm 显示两有序文件的公共和非公共行 comm file1 file2\n\nwc 统计文件的字符数、词数和行数 wc filename\n\nnl 给文件加上行号 nl file1 >file2\n\n## 进程操作\n\n命令名 功能描述 使用举例\n\nps 显示进程当前状态 ps u\n\nkill 终止进程 kill -9 30142\n\n## 时间操作\n\n命令名 功能描述 使用举例\n\ndate 显示系统的当前日期和时间 date\n\ncal 显示日历 cal 8 1996\n\ntime 统计程序的执行时间 time a.out\n\n网络与通信操作\n\n命令名 功能描述 使用举例\n\ntelnet 远程登录 telnet hpc.sp.net.edu.cn\n\nrlogin 远程登录 rlogin hostname -l username\n\nrsh 在远程主机执行指定命令 rsh f01n03 date\n\nftp 在本地主机与远程主机之间传输文件 ftpftp.sp.net.edu.cn\n\nrcp 在本地主机与远程主机 之间复制文件 rcp file1 host1:file2\n\nping 给一个网络主机发送 回应请求 ping hpc.sp.net.edu.cn\n\nmail 阅读和发送电子邮件 mail\n\nwrite 给另一用户发送报文 write username pts/1\n\nmesg 允许或拒绝接收报文 mesg n\n\n## Korn Shell 命令\n\n命令名 功能描述 使用举例\n\nhistory 列出最近执行过的 几条命令及编号 history\n\nr 重复执行最近执行过的 某条命令 r -2\n\nalias 给某个命令定义别名 alias del=rm -i\n\nunalias 取消对某个别名的定义 unalias del\n\n## 其它命令\n\n命令名 功能描述 使用举例\n\nuname 显示操作系统的有关信息 uname -a\n\nclear 清除屏幕或窗口内容 clear\n\nenv 显示当前所有设置过的环境变量 env\n\nwho 列出当前登录的所有用户 who\n\nwhoami 显示当前正进行操作的用户名 whoami\n\ntty 显示终端或伪终端的名称 tty\n\nstty 显示或重置控制键定义 stty -a\n\ndu 查询磁盘使用情况 du -k subdir\n\ndf /tmp 显示文件系统的总空间和可用空间\n\nw 显示当前系统活动的总信息\n\n本文来源:[凯哥的博客](http://blog.css6.com/2014/12/25/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/)\n另附相关网摘 [mac终端命令大全介绍](http://www.douban.com/note/75797151/)\n","source":"_posts/mac终端常用命令.md","raw":"---\ntitle: MAC终端常用命令行\ndate: 2016-01-18 09:51:37\nphotos:\n- /img/mac.jpg\ncategories: 技术摘录\ntag:\n- mac技巧\n- 终端\n---\n\n## mac 终端 常用命令\n\n## 基本命令\n\n### 1、列出文件\nls 参数 目录名 例: 看看驱动目录下有什么:ls /System/Library/Extensions\n参数 -w 显示中文，-l 详细信息， -a 包括隐藏文件\n\n### 2、转换目录\ncd 例：想到驱动目录下溜达一圈 cd /System/Library/Extensions\n\n### 3、建立新目录\nmkdir 目录名 例：在驱动目录下建一个备份目录 backup mkdir /System/Library/Extensions/backup\n在桌面上建一个备份目录 backup mkdir /User/用户名/Desktop/backup\n\n### 4、拷贝文件\ncp 参数 源文件 目标文件 例：想把桌面的Natit.kext 拷贝到驱动目录中 cp -R /User/用户名/Desktop/Natit.kext /System/Library/Extensions\n参数R表示对目录进行递归操作，kext在图形界面下看起来是个文件，实际上是个文件夹。\n把驱动目录下的所有文件备份到桌面backup\ncp -R /System/Library/Extensions/* /User/用户名/Desktop/backup\n\n### 5、删除文件\nrm 参数 文件 例：想删除驱动的缓存 rm -rf /System/Library/Extensions.kextcache rm -rf /System/Library/Extensions.mkext\n参数－rf 表示递归和强制，千万要小心使用，如果执行了 rm -rf / 你的系统就全没了\n<!-- more -->\n### 6、移动文件\nmv 文件 例：想把AppleHDA.Kext 移到桌面 mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop\n想把AppleHDA.Kext 移到备份目录中 mv /System/Library/Extensions/AppleHDA.kext /System/Library/Extensions/backup\n\n### 7、文本编辑\nnano 文件名 例：编辑natit Info.plist nano /System/Library/Extensions/Natit.kext/Info.plist\n<!-- more -->\n## 目录操作\n\n命令名 功能描述 使用举例\n\nmkdir 创建一个目录 mkdir dirname\n\nrmdir 删除一个目录 rmdir dirname\n\nmvdir 移动或重命名一个目录 mvdir dir1 dir2\n\ncd 改变当前目录 cd dirname\n\npwd 显示当前目录的路径名 pwd\n\nls 显示当前目录的内容 ls -la\n\n## 文件操作\n\n命令名 功能描述 使用举例\n\ncat 显示或连接文件 cat filename\n\nod 显示非文本文件的内容 od -c filename\n\ncp 复制文件或目录 cp file1 file2\n\nrm 删除文件或目录 rm filename\n\nmv 改变文件名或所在目录 mv file1 file2\n\nfind 使用匹配表达式查找文件 find . -name “*.c” -print\n\nfile 显示文件类型 file filename\n\n## 选择操作\n\n命令名 功能描述 使用举例\n\nhead 显示文件的最初几行 head -20 filename\n\ntail 显示文件的最后几行 tail -15 filename\n\ncut 显示文件每行中的某些域 cut -f1,7 -d: /etc/passwd\n\ncolrm 从标准输入中删除若干列 colrm 8 20 file2\n\ndiff 比较并显示两个文件的差异 diff file1 file2\n\nsort 排序或归并文件 sort -d -f -u file1\n\nuniq 去掉文件中的重复行 uniq file1 file2\n\ncomm 显示两有序文件的公共和非公共行 comm file1 file2\n\nwc 统计文件的字符数、词数和行数 wc filename\n\nnl 给文件加上行号 nl file1 >file2\n\n## 进程操作\n\n命令名 功能描述 使用举例\n\nps 显示进程当前状态 ps u\n\nkill 终止进程 kill -9 30142\n\n## 时间操作\n\n命令名 功能描述 使用举例\n\ndate 显示系统的当前日期和时间 date\n\ncal 显示日历 cal 8 1996\n\ntime 统计程序的执行时间 time a.out\n\n网络与通信操作\n\n命令名 功能描述 使用举例\n\ntelnet 远程登录 telnet hpc.sp.net.edu.cn\n\nrlogin 远程登录 rlogin hostname -l username\n\nrsh 在远程主机执行指定命令 rsh f01n03 date\n\nftp 在本地主机与远程主机之间传输文件 ftpftp.sp.net.edu.cn\n\nrcp 在本地主机与远程主机 之间复制文件 rcp file1 host1:file2\n\nping 给一个网络主机发送 回应请求 ping hpc.sp.net.edu.cn\n\nmail 阅读和发送电子邮件 mail\n\nwrite 给另一用户发送报文 write username pts/1\n\nmesg 允许或拒绝接收报文 mesg n\n\n## Korn Shell 命令\n\n命令名 功能描述 使用举例\n\nhistory 列出最近执行过的 几条命令及编号 history\n\nr 重复执行最近执行过的 某条命令 r -2\n\nalias 给某个命令定义别名 alias del=rm -i\n\nunalias 取消对某个别名的定义 unalias del\n\n## 其它命令\n\n命令名 功能描述 使用举例\n\nuname 显示操作系统的有关信息 uname -a\n\nclear 清除屏幕或窗口内容 clear\n\nenv 显示当前所有设置过的环境变量 env\n\nwho 列出当前登录的所有用户 who\n\nwhoami 显示当前正进行操作的用户名 whoami\n\ntty 显示终端或伪终端的名称 tty\n\nstty 显示或重置控制键定义 stty -a\n\ndu 查询磁盘使用情况 du -k subdir\n\ndf /tmp 显示文件系统的总空间和可用空间\n\nw 显示当前系统活动的总信息\n\n本文来源:[凯哥的博客](http://blog.css6.com/2014/12/25/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/)\n另附相关网摘 [mac终端命令大全介绍](http://www.douban.com/note/75797151/)\n","slug":"mac终端常用命令","published":1,"updated":"2016-01-20T07:52:26.000Z","comments":1,"layout":"post","link":"","_id":"ciuid0lpo000snbtof0vj33nt"},{"title":"gulp学习笔记","date":"2016-07-12T03:51:33.000Z","_content":"Gulp前端自动化：Gulp的高度集成化开发环境，释放了前端开发中大量时间，如css压缩、js压缩、错误检查、合并js、压缩图片、压缩html、模块构造等，只要你能想到的基本都可以通过Gulp插件去实现。\n\n## 前端自动化的目的\n在一个项目过程中，重复而枯燥的工作太多了……绳命就这样浪费了。\n我们需要一个自动化的工作流程，让我们更专注于coding，而不是coding外的繁琐工作。于是Gulp应运而生。可以想像，如果在node环境下，一行命令搞定一个场景，So Cool…\n然而通过了解，显然可看出Gulp\n### 功能\n\n1.版本控制\n2.检查JS\n3.图片合并\n4.压缩CSS\n5.压缩JS\n6.编译SASS\n\n目前最知名的构建工具： Gulp、Grunt、NPM + Webpack；\n\n. grunt是前端工程化的先驱\n\n. gulp更自然基于流的方式连接任务\n\n. Webpack最年轻，擅长用于依赖管理，配置稍较复杂\n\n. 推荐使用Gulp，Gulp基于nodejs中stream，效率更好语法更自然,不需要编写复杂的配置文件\n\n## 安装前准备：\nGulp是基于 Node.js的，需要要安装 Node.js\n\n为了确保依赖环境正确，我们先执行几个简单的命令检查。\n``` bash\n$ node -v\n\nv5.3.0\n\nNode是一个基于Chrome JavaScript V8引擎建立的一个解释器\n检测Node是否已经安装，如果正确安装的话你会看到所安装的Node的版本号\n\n接下来看看npm，它是 node 的包管理工具，可以利用它安装 gulp 所需的包\n\n$ npm -v\n\n3.3.12\n\n这同样能得到npm的版本号，装 Node 时已经自动安装了npm\n\n```\n## 开始全局安装Gulp\n\n``` bash\n$ npm install -g gulp\n```\n``` bash\n$ gulp -v\n\n[18:39:18] CLI version 3.9.1\n\n得到gulp的版本号，确认安装成功\n\n```\n## 创建工程\n\n``` bash\n\nTestProject     (项目名称)\n|–.git               通过git进行版本控制,项目自动生成这个文件\n|–node_modules       组件包目录\n|–dist               发布环境（编译自动生成的）\n    |–css                 样式文件(style.css style.min.css)\n    |–img                 图片文件(压缩图片\\合并后的图片)\n    |–js                  js文件(main.js main.min.js)\n    |–index.html          静态页面文件(压缩html)\n\n|–src                开发环境\n    |–sass                sass文件\n    |–images              图片文件\n    |–js                  js文件\n    |–index.html          静态文件\n|–gulpfile.js        gulp配置文件\n|–package.json       依赖模块json文件,在项目目录下npm install会安装项目所有的依赖模块，简化项目的安装程序\n\n```\n## 创建package.json\n\n我们先使用npm init来创建类似Nuget package的package.config一样的文件，这样我们就知道项目依赖哪些插件，而且我们不需要把插件提交到代码库，其它程序员只需要使用 npm install 就可以安装所有配置的插件\n\n``` bash\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg> --save` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\nname: (test) test                  //名称\nversion: (1.0.0) 1.0.0             //版本\ndescription: test description      //描述\nentry point: (index.js)            //\ntest command:                      //测试代码\ngit repository:                    //Git版本库\nkeywords:                          //关键词\nauthor: luuman                     //作者\nlicense: (ISC)                     //协议\nAbout to write to F:\\Gulp\\test\\package.json:\n\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"test description\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"luuman\",\n  \"license\": \"ISC\"\n}\n\nIs this ok? (yes)\n\n```\n## 我们要进去到项目的根目录再安装一遍\n\n``` bash\n$ npm install gulp --save-dev\n\n```\n## 新建gulpfile.js文件\n我们将要使用Gulp插件来完成我们以下任务：\n\n. sass的编译（gulp-sass）\n. 自动添加css前缀（gulp-autoprefixer）\n. 压缩css（gulp-minify-css）\n. js代码校验（gulp-jshint）\n. 合并js文件（gulp-concat）\n. 压缩js代码（gulp-uglify）\n. 压缩图片（gulp-imagemin）\n. 自动刷新页面（gulp-livereload）\n. 图片缓存，只有图片替换了才压缩（gulp-cache）\n. 更改提醒（gulp-notify）\n\n### 安装这些插件需要运行如下命令：\n\n```bash\nnpm install gulp-jshint gulp-sass gulp-less gulp-autoprefixer gulp-clean-css gulp-imagemin gulp-notify gulp-cache imagemin-pngquant gulp-livereload gulp-concat gulp-uglify  gulp-rename  gulp-babel del --save-dev\n```\ngulp功能模块的文件会放在项目所在的目录的./node_modules 下\n更多插件可以看这里[gulpjs.com/plugins/](http://gulpjs.com/plugins/)\n\n接着我们要创建一个gulpfile.js在根目录下，gulp只有四个API： task，watch，src，和 dest\n\n``` bash\ntask--这个API用来创建任务，在命令行下可以输入 gulp test 来执行test的任务。\nwatch--这个API用来监听任务。\nsrc--这个API设置需要处理的文件的路径，可以是多个文件以数组的形式[main.scss, vender.scss]，也可以是正则表达式/**/*.scss。\n\ndest--这个API设置生成文件的路径，一个任务可以有多个生成路径，一个可以输出未压缩的版本，另一个可以输出压缩后的版本。\n\n```\n### 加载插件：\n\n``` bash\n// 引入gulp\nvar gulp = require('gulp');\n\n// 引入组件\nvar jshint = require('gulp-jshint'); //检查js代码校验\nvar sass = require('gulp-sass'); //编译Sass\nvar less = require('gulp-less'); //编译less\nvar autoprefixer = require('gulp-autoprefixer');\nvar cleancss = require('gulp-clean-css');\nvar imagemin = require('gulp-imagemin'); //压缩图片\nvar notify = require('gulp-notify'); //处理报错\nvar cache = require('gulp-cache'); //图片缓存，只有图片替换了才压缩\nvar pngquant = require('imagemin-pngquant'); //深度压缩图片\nvar livereload = require('gulp-livereload'); //服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）\nvar concat = require('gulp-concat'); //合并js\nvar uglify = require('gulp-uglify'); //uglify 组件（用于压缩 JS）\nvar rename = require('gulp-rename'); //重命名\nvar babel = require('gulp-babel'); //编译es6\nvar del = require('del');//清除文件\nvar plumber = require('gulp-plumber');//当发生异常时提示错误\n\n```\n最后是我自己设置的项目文件路径\n\n|--/src/--------开发环境\n|--/desc/-------生成目录\n|--/plugin/-----插件存放目录\n|--gulpfile.js\n\n###  编译sass、自动添加css前缀和压缩\n首先我们编译sass，添加前缀，保存到我们指定的目录下面，还没结束，我们还要压缩，给文件添加 .min 后缀再输出压缩文件到指定目录，最后提醒任务完成了：\n\n``` bash\n// Styles任务\ngulp.task('styles', function() {\n    //编译sass\n    return gulp.src(['src/less/*.less','src/css/*.css'])\n    //css 合并\n    .pipe(concat('all.css'))\n    //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n    .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n    .pipe(less())\n    .pipe(gulp.dest('src/css'))\n    //添加前缀\n    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))\n    //保存未压缩文件到我们指定的目录下面\n    .pipe(gulp.dest('src'))\n    //给文件添加.min后缀\n    .pipe(rename({ suffix: '.min' }))\n    //压缩样式文件\n    .pipe(cleancss())\n    //输出压缩文件到指定目录\n    .pipe(gulp.dest('dist/css'))    \n    //提醒任务完成\n    .pipe(notify({ message: 'Styles task complete' }));\n});\n```\n### js代码校验、合并和压缩\n\n``` bash\n// 合并，压缩js文件\n// 找到 js/ 目录下的所有 js 文件，压缩，重命名，最后将处理完成的js存放在 dist/js/ 目录下\ngulp.task('scripts', function() {\n    return gulp.src('src/js/*.js') //可配置你需要检查脚本的具体名字。\n        //js代码校验\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'))\n        //js代码合并\n        .pipe(concat('all.js'))\n        //压缩脚本文件\n        .pipe(uglify())\n        //给文件添加.min后缀\n        .pipe(rename({ suffix: '.min' }))\n        //压缩脚本文件\n        .pipe(uglify())\n        //输出压缩文件到指定目录\n        .pipe(gulp.dest('dist/js'))\n    //提醒任务完成\n    .pipe(notify({ message: 'Scripts task complete' }))\n    console.log('gulp task is done'); //自定义提醒信息\n});\n\n```\n### 图片压缩\n``` bash\n//压缩图片\ngulp.task('testImagemin', function() {\n   return gulp.src('src/img/*.{png,jpg,gif,ico}')\n        .pipe(cache(imagemin({\n            progressive: true,\n            svgoPlugins: [{ removeViewBox: false }],\n            use: [pngquant()]\n        })))\n        .pipe(gulp.dest('dist/img'))\n        .pipe(notify({ message: 'Images task complete' }));\n});\n```\n\n### 事件监听\n``` bash\n//监听 Watch\ngulp.task('testWatch', function() {\n    // Watch .less files\n    gulp.watch('src/**/*.less', ['testLess']); //当所有less文件发生改变时，调用testLess任务\n    // Watch image files\n    gulp.watch('src/**/*.img', ['testImagemin']);\n    // Watch .js files\n    gulp.watch('js/*.js', ['scripts']);\n    // Create LiveReload server\n   livereload.listen();\n   // Watch any files in assets/, reload on change\n   gulp.watch(['dist/**']).on('change', livereload.changed);\n});\n```\n### 清除文件\n\n``` bash\n//clean 清除文件 在任务执行前，最好先清除之前生成的文件\ngulp.task('clean', function(cb) {\n    del(['dist/css', 'dist/js', 'dist/img'], cb)\n});\n```\n### 默认任务\n``` bash\n// 默认任务 Default task\ngulp.task('default', ['clean'],function() {\n    gulp.start('help','testLess', 'scripts', 'testImagemin');\n    gulp.src('src/js/*.js')\n        .pipe(babel({\n            presets: ['es2015']\n        }))\n        .pipe(gulp.dest('src/bjs'))\n});\n```\n\n## 其它插件\n``` bash\n// 检查js脚本的任务\ngulp.task('lint', function() {\n  return gulp.src('js/*.js') //可配置你需要检查脚本的具体名字。\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'));\n});\n\n// 编译Sass\ngulp.task('sass', function() {\n  return gulp.src('./scss/*.scss')\n        .pipe(sass())\n        .pipe(gulp.dest('css/'));//dest()写入文件\n});\n\n// 编译less\ngulp.task('testLess', function() {\n  return gulp.src('src/less/*.less')\n        //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n        .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n        .pipe(less())\n        .pipe(gulp.dest('src/css'));\n});\n```\n\n``` bash\nnpm list | gulp <模糊插件匹配>\n```\n### gulp 最终配置文件\n``` bash\n// 引入gulp\nvar gulp = require('gulp');\n\n// 引入组件\nvar jshint = require('gulp-jshint'); //检查js代码校验\nvar sass = require('gulp-sass'); //编译Sass\nvar less = require('gulp-less'); //编译less\nvar autoprefixer = require('gulp-autoprefixer');\nvar cleancss = require('gulp-clean-css');\nvar imagemin = require('gulp-imagemin'); //压缩图片\nvar notify = require('gulp-notify'); //处理报错\nvar cache = require('gulp-cache'); //图片缓存，只有图片替换了才压缩\nvar pngquant = require('imagemin-pngquant'); //深度压缩图片\nvar livereload = require('gulp-livereload'); //服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）\nvar concat = require('gulp-concat'); //合并js\nvar uglify = require('gulp-uglify'); //uglify 组件（用于压缩 JS）\nvar rename = require('gulp-rename'); //重命名\nvar babel = require('gulp-babel'); //编译es6\nvar del = require('del');//清除文件\nvar plumber = require('gulp-plumber');//当发生异常时提示错误\n\n// 默认任务 Default task\ngulp.task('default', ['clean'] ,function() {\n    gulp.start('help','styles', 'scripts', 'testImagemin');\n    gulp.src('src/js/*.js')\n        .pipe(babel({\n            presets: ['es2015']\n        }))\n        .pipe(gulp.dest('src/bjs'))\n});\n\n// help task\ngulp.task('help', function() {\n    console.log(\"gulp build  文件打包\");\n    console.log(\"gulp watch  文件监控\");\n    console.log(\"gulp help  gulp参数说明\");\n    console.log(\"gulp server  测试sever\");\n    console.log(\"gulp -p  生产环境\");\n    console.log(\"gulp -d  开发环境\");\n    console.log(\"gulp -m <module>  部分模块打包（默认全部打包）\");\n});\n\n// 检查js脚本的任务\ngulp.task('lint', function() {\n  return gulp.src('js/*.js') //可配置你需要检查脚本的具体名字。\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'));\n});\n\n// 编译Sass\ngulp.task('sass', function() {\n  return gulp.src('./scss/*.scss')\n        .pipe(sass())\n        .pipe(gulp.dest('css/'));//dest()写入文件\n});\n\n// 编译less\ngulp.task('testLess', function() {\n  return gulp.src('src/less/*.less')\n        //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n        .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n        .pipe(less())\n        .pipe(gulp.dest('src/css'));\n});\n\n// Styles任务\ngulp.task('styles', function() {\n    //编译sass\n    return gulp.src(['src/less/*.less','src/css/*.css'])\n    //css 合并\n    .pipe(concat('all.css'))\n    //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n    .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n    .pipe(less())\n    .pipe(gulp.dest('src/css'))\n    //添加前缀\n    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))\n    //保存未压缩文件到我们指定的目录下面\n    .pipe(gulp.dest('src'))\n    //给文件添加.min后缀\n    .pipe(rename({ suffix: '.min' }))\n    //压缩样式文件\n    .pipe(cleancss())\n    //输出压缩文件到指定目录\n    .pipe(gulp.dest('dist/css'))    \n    //提醒任务完成\n    .pipe(notify({ message: 'Styles task complete' }));\n});\n\n//压缩图片\ngulp.task('testImagemin', function() {\n   return gulp.src('src/img/*.{png,jpg,gif,ico}')\n        .pipe(cache(imagemin({\n            progressive: true,\n            svgoPlugins: [{ removeViewBox: false }],\n            use: [pngquant()]\n        })))\n        .pipe(gulp.dest('dist/img'))\n        .pipe(notify({ message: 'Images task complete' }));\n});\n\n// 合并，压缩js文件\n// 找到 js/ 目录下的所有 js 文件，压缩，重命名，最后将处理完成的js存放在 dist/js/ 目录下\ngulp.task('scripts', function() {\n    return gulp.src('src/js/*.js') //可配置你需要检查脚本的具体名字。\n        //js代码校验\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'))\n        //js代码合并\n        .pipe(concat('all.js'))\n        //压缩脚本文件\n        .pipe(uglify())\n        //给文件添加.min后缀\n        .pipe(rename({ suffix: '.min' }))\n        //压缩脚本文件\n        .pipe(uglify())\n        //输出压缩文件到指定目录\n        .pipe(gulp.dest('dist/js'))\n    //提醒任务完成\n    .pipe(notify({ message: 'Scripts task complete' }))\n    console.log('gulp task is done'); //自定义提醒信息\n});\n\n//clean 清除文件 在任务执行前，最好先清除之前生成的文件\ngulp.task('clean', function(cb) {\n    return del(['dist/css', 'dist/js', 'dist/img'], cb)\n});\n\n//监听 Watch\ngulp.task('testWatch', function() {\n    // Watch .less files\n    gulp.watch('src/**/*.less', ['testLess']); //当所有less文件发生改变时，调用testLess任务\n    // Watch image files\n    gulp.watch('src/**/*.img', ['testImagemin']);\n    // Watch .js files\n    gulp.watch('js/*.js', ['scripts']);\n    // Create LiveReload server\n   livereload.listen();\n   // Watch any files in assets/, reload on change\n   gulp.watch(['dist/**']).on('change', livereload.changed);\n});\n\n```\n## 运行\n可以运行单独的任务，例如\n\n``` bash\ngulp default\ngulp watch\ngulp clean\n```\n也可以运行整个任务\n``` bash\ngulp\n```\n\n## 总结\n1.安装Node\n2.安装gulp\n3.新建gulpfile.js文件\n4.运行\n\n\n参考文献：\n1.[前端自动化的目的](http://wjkang.github.io/2016/05/02/Gulp/#前端自动化的目的)\n2.[gulp API](https://github.com/gulpjs/gulp/blob/master/docs/API.md)\n3.[gulp教程之gulp-minify-css](http://www.ydcss.com/archives/41)\n4.[gulp-notify处理报错](http://www.tuicool.com/articles/2qeuAbi)\n5.[gulp教程之gulp-imagemin](http://www.ydcss.com/archives/26)\n6.[使用BrowserSync浏览及相关配置](http://www.tuicool.com/articles/fUjMRn)\n7.[gulp入门教程]()\n","source":"_posts/gulp学习笔记.md","raw":"---\ntitle: gulp学习笔记\ndate: 2016-07-12 11:51:33\ncategories: 学习笔记\ntags:\n- gulp\n- 学习笔记\n---\nGulp前端自动化：Gulp的高度集成化开发环境，释放了前端开发中大量时间，如css压缩、js压缩、错误检查、合并js、压缩图片、压缩html、模块构造等，只要你能想到的基本都可以通过Gulp插件去实现。\n\n## 前端自动化的目的\n在一个项目过程中，重复而枯燥的工作太多了……绳命就这样浪费了。\n我们需要一个自动化的工作流程，让我们更专注于coding，而不是coding外的繁琐工作。于是Gulp应运而生。可以想像，如果在node环境下，一行命令搞定一个场景，So Cool…\n然而通过了解，显然可看出Gulp\n### 功能\n\n1.版本控制\n2.检查JS\n3.图片合并\n4.压缩CSS\n5.压缩JS\n6.编译SASS\n\n目前最知名的构建工具： Gulp、Grunt、NPM + Webpack；\n\n. grunt是前端工程化的先驱\n\n. gulp更自然基于流的方式连接任务\n\n. Webpack最年轻，擅长用于依赖管理，配置稍较复杂\n\n. 推荐使用Gulp，Gulp基于nodejs中stream，效率更好语法更自然,不需要编写复杂的配置文件\n\n## 安装前准备：\nGulp是基于 Node.js的，需要要安装 Node.js\n\n为了确保依赖环境正确，我们先执行几个简单的命令检查。\n``` bash\n$ node -v\n\nv5.3.0\n\nNode是一个基于Chrome JavaScript V8引擎建立的一个解释器\n检测Node是否已经安装，如果正确安装的话你会看到所安装的Node的版本号\n\n接下来看看npm，它是 node 的包管理工具，可以利用它安装 gulp 所需的包\n\n$ npm -v\n\n3.3.12\n\n这同样能得到npm的版本号，装 Node 时已经自动安装了npm\n\n```\n## 开始全局安装Gulp\n\n``` bash\n$ npm install -g gulp\n```\n``` bash\n$ gulp -v\n\n[18:39:18] CLI version 3.9.1\n\n得到gulp的版本号，确认安装成功\n\n```\n## 创建工程\n\n``` bash\n\nTestProject     (项目名称)\n|–.git               通过git进行版本控制,项目自动生成这个文件\n|–node_modules       组件包目录\n|–dist               发布环境（编译自动生成的）\n    |–css                 样式文件(style.css style.min.css)\n    |–img                 图片文件(压缩图片\\合并后的图片)\n    |–js                  js文件(main.js main.min.js)\n    |–index.html          静态页面文件(压缩html)\n\n|–src                开发环境\n    |–sass                sass文件\n    |–images              图片文件\n    |–js                  js文件\n    |–index.html          静态文件\n|–gulpfile.js        gulp配置文件\n|–package.json       依赖模块json文件,在项目目录下npm install会安装项目所有的依赖模块，简化项目的安装程序\n\n```\n## 创建package.json\n\n我们先使用npm init来创建类似Nuget package的package.config一样的文件，这样我们就知道项目依赖哪些插件，而且我们不需要把插件提交到代码库，其它程序员只需要使用 npm install 就可以安装所有配置的插件\n\n``` bash\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg> --save` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\nname: (test) test                  //名称\nversion: (1.0.0) 1.0.0             //版本\ndescription: test description      //描述\nentry point: (index.js)            //\ntest command:                      //测试代码\ngit repository:                    //Git版本库\nkeywords:                          //关键词\nauthor: luuman                     //作者\nlicense: (ISC)                     //协议\nAbout to write to F:\\Gulp\\test\\package.json:\n\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"test description\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"luuman\",\n  \"license\": \"ISC\"\n}\n\nIs this ok? (yes)\n\n```\n## 我们要进去到项目的根目录再安装一遍\n\n``` bash\n$ npm install gulp --save-dev\n\n```\n## 新建gulpfile.js文件\n我们将要使用Gulp插件来完成我们以下任务：\n\n. sass的编译（gulp-sass）\n. 自动添加css前缀（gulp-autoprefixer）\n. 压缩css（gulp-minify-css）\n. js代码校验（gulp-jshint）\n. 合并js文件（gulp-concat）\n. 压缩js代码（gulp-uglify）\n. 压缩图片（gulp-imagemin）\n. 自动刷新页面（gulp-livereload）\n. 图片缓存，只有图片替换了才压缩（gulp-cache）\n. 更改提醒（gulp-notify）\n\n### 安装这些插件需要运行如下命令：\n\n```bash\nnpm install gulp-jshint gulp-sass gulp-less gulp-autoprefixer gulp-clean-css gulp-imagemin gulp-notify gulp-cache imagemin-pngquant gulp-livereload gulp-concat gulp-uglify  gulp-rename  gulp-babel del --save-dev\n```\ngulp功能模块的文件会放在项目所在的目录的./node_modules 下\n更多插件可以看这里[gulpjs.com/plugins/](http://gulpjs.com/plugins/)\n\n接着我们要创建一个gulpfile.js在根目录下，gulp只有四个API： task，watch，src，和 dest\n\n``` bash\ntask--这个API用来创建任务，在命令行下可以输入 gulp test 来执行test的任务。\nwatch--这个API用来监听任务。\nsrc--这个API设置需要处理的文件的路径，可以是多个文件以数组的形式[main.scss, vender.scss]，也可以是正则表达式/**/*.scss。\n\ndest--这个API设置生成文件的路径，一个任务可以有多个生成路径，一个可以输出未压缩的版本，另一个可以输出压缩后的版本。\n\n```\n### 加载插件：\n\n``` bash\n// 引入gulp\nvar gulp = require('gulp');\n\n// 引入组件\nvar jshint = require('gulp-jshint'); //检查js代码校验\nvar sass = require('gulp-sass'); //编译Sass\nvar less = require('gulp-less'); //编译less\nvar autoprefixer = require('gulp-autoprefixer');\nvar cleancss = require('gulp-clean-css');\nvar imagemin = require('gulp-imagemin'); //压缩图片\nvar notify = require('gulp-notify'); //处理报错\nvar cache = require('gulp-cache'); //图片缓存，只有图片替换了才压缩\nvar pngquant = require('imagemin-pngquant'); //深度压缩图片\nvar livereload = require('gulp-livereload'); //服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）\nvar concat = require('gulp-concat'); //合并js\nvar uglify = require('gulp-uglify'); //uglify 组件（用于压缩 JS）\nvar rename = require('gulp-rename'); //重命名\nvar babel = require('gulp-babel'); //编译es6\nvar del = require('del');//清除文件\nvar plumber = require('gulp-plumber');//当发生异常时提示错误\n\n```\n最后是我自己设置的项目文件路径\n\n|--/src/--------开发环境\n|--/desc/-------生成目录\n|--/plugin/-----插件存放目录\n|--gulpfile.js\n\n###  编译sass、自动添加css前缀和压缩\n首先我们编译sass，添加前缀，保存到我们指定的目录下面，还没结束，我们还要压缩，给文件添加 .min 后缀再输出压缩文件到指定目录，最后提醒任务完成了：\n\n``` bash\n// Styles任务\ngulp.task('styles', function() {\n    //编译sass\n    return gulp.src(['src/less/*.less','src/css/*.css'])\n    //css 合并\n    .pipe(concat('all.css'))\n    //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n    .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n    .pipe(less())\n    .pipe(gulp.dest('src/css'))\n    //添加前缀\n    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))\n    //保存未压缩文件到我们指定的目录下面\n    .pipe(gulp.dest('src'))\n    //给文件添加.min后缀\n    .pipe(rename({ suffix: '.min' }))\n    //压缩样式文件\n    .pipe(cleancss())\n    //输出压缩文件到指定目录\n    .pipe(gulp.dest('dist/css'))    \n    //提醒任务完成\n    .pipe(notify({ message: 'Styles task complete' }));\n});\n```\n### js代码校验、合并和压缩\n\n``` bash\n// 合并，压缩js文件\n// 找到 js/ 目录下的所有 js 文件，压缩，重命名，最后将处理完成的js存放在 dist/js/ 目录下\ngulp.task('scripts', function() {\n    return gulp.src('src/js/*.js') //可配置你需要检查脚本的具体名字。\n        //js代码校验\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'))\n        //js代码合并\n        .pipe(concat('all.js'))\n        //压缩脚本文件\n        .pipe(uglify())\n        //给文件添加.min后缀\n        .pipe(rename({ suffix: '.min' }))\n        //压缩脚本文件\n        .pipe(uglify())\n        //输出压缩文件到指定目录\n        .pipe(gulp.dest('dist/js'))\n    //提醒任务完成\n    .pipe(notify({ message: 'Scripts task complete' }))\n    console.log('gulp task is done'); //自定义提醒信息\n});\n\n```\n### 图片压缩\n``` bash\n//压缩图片\ngulp.task('testImagemin', function() {\n   return gulp.src('src/img/*.{png,jpg,gif,ico}')\n        .pipe(cache(imagemin({\n            progressive: true,\n            svgoPlugins: [{ removeViewBox: false }],\n            use: [pngquant()]\n        })))\n        .pipe(gulp.dest('dist/img'))\n        .pipe(notify({ message: 'Images task complete' }));\n});\n```\n\n### 事件监听\n``` bash\n//监听 Watch\ngulp.task('testWatch', function() {\n    // Watch .less files\n    gulp.watch('src/**/*.less', ['testLess']); //当所有less文件发生改变时，调用testLess任务\n    // Watch image files\n    gulp.watch('src/**/*.img', ['testImagemin']);\n    // Watch .js files\n    gulp.watch('js/*.js', ['scripts']);\n    // Create LiveReload server\n   livereload.listen();\n   // Watch any files in assets/, reload on change\n   gulp.watch(['dist/**']).on('change', livereload.changed);\n});\n```\n### 清除文件\n\n``` bash\n//clean 清除文件 在任务执行前，最好先清除之前生成的文件\ngulp.task('clean', function(cb) {\n    del(['dist/css', 'dist/js', 'dist/img'], cb)\n});\n```\n### 默认任务\n``` bash\n// 默认任务 Default task\ngulp.task('default', ['clean'],function() {\n    gulp.start('help','testLess', 'scripts', 'testImagemin');\n    gulp.src('src/js/*.js')\n        .pipe(babel({\n            presets: ['es2015']\n        }))\n        .pipe(gulp.dest('src/bjs'))\n});\n```\n\n## 其它插件\n``` bash\n// 检查js脚本的任务\ngulp.task('lint', function() {\n  return gulp.src('js/*.js') //可配置你需要检查脚本的具体名字。\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'));\n});\n\n// 编译Sass\ngulp.task('sass', function() {\n  return gulp.src('./scss/*.scss')\n        .pipe(sass())\n        .pipe(gulp.dest('css/'));//dest()写入文件\n});\n\n// 编译less\ngulp.task('testLess', function() {\n  return gulp.src('src/less/*.less')\n        //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n        .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n        .pipe(less())\n        .pipe(gulp.dest('src/css'));\n});\n```\n\n``` bash\nnpm list | gulp <模糊插件匹配>\n```\n### gulp 最终配置文件\n``` bash\n// 引入gulp\nvar gulp = require('gulp');\n\n// 引入组件\nvar jshint = require('gulp-jshint'); //检查js代码校验\nvar sass = require('gulp-sass'); //编译Sass\nvar less = require('gulp-less'); //编译less\nvar autoprefixer = require('gulp-autoprefixer');\nvar cleancss = require('gulp-clean-css');\nvar imagemin = require('gulp-imagemin'); //压缩图片\nvar notify = require('gulp-notify'); //处理报错\nvar cache = require('gulp-cache'); //图片缓存，只有图片替换了才压缩\nvar pngquant = require('imagemin-pngquant'); //深度压缩图片\nvar livereload = require('gulp-livereload'); //服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）\nvar concat = require('gulp-concat'); //合并js\nvar uglify = require('gulp-uglify'); //uglify 组件（用于压缩 JS）\nvar rename = require('gulp-rename'); //重命名\nvar babel = require('gulp-babel'); //编译es6\nvar del = require('del');//清除文件\nvar plumber = require('gulp-plumber');//当发生异常时提示错误\n\n// 默认任务 Default task\ngulp.task('default', ['clean'] ,function() {\n    gulp.start('help','styles', 'scripts', 'testImagemin');\n    gulp.src('src/js/*.js')\n        .pipe(babel({\n            presets: ['es2015']\n        }))\n        .pipe(gulp.dest('src/bjs'))\n});\n\n// help task\ngulp.task('help', function() {\n    console.log(\"gulp build  文件打包\");\n    console.log(\"gulp watch  文件监控\");\n    console.log(\"gulp help  gulp参数说明\");\n    console.log(\"gulp server  测试sever\");\n    console.log(\"gulp -p  生产环境\");\n    console.log(\"gulp -d  开发环境\");\n    console.log(\"gulp -m <module>  部分模块打包（默认全部打包）\");\n});\n\n// 检查js脚本的任务\ngulp.task('lint', function() {\n  return gulp.src('js/*.js') //可配置你需要检查脚本的具体名字。\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'));\n});\n\n// 编译Sass\ngulp.task('sass', function() {\n  return gulp.src('./scss/*.scss')\n        .pipe(sass())\n        .pipe(gulp.dest('css/'));//dest()写入文件\n});\n\n// 编译less\ngulp.task('testLess', function() {\n  return gulp.src('src/less/*.less')\n        //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n        .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n        .pipe(less())\n        .pipe(gulp.dest('src/css'));\n});\n\n// Styles任务\ngulp.task('styles', function() {\n    //编译sass\n    return gulp.src(['src/less/*.less','src/css/*.css'])\n    //css 合并\n    .pipe(concat('all.css'))\n    //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n    .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n    .pipe(less())\n    .pipe(gulp.dest('src/css'))\n    //添加前缀\n    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))\n    //保存未压缩文件到我们指定的目录下面\n    .pipe(gulp.dest('src'))\n    //给文件添加.min后缀\n    .pipe(rename({ suffix: '.min' }))\n    //压缩样式文件\n    .pipe(cleancss())\n    //输出压缩文件到指定目录\n    .pipe(gulp.dest('dist/css'))    \n    //提醒任务完成\n    .pipe(notify({ message: 'Styles task complete' }));\n});\n\n//压缩图片\ngulp.task('testImagemin', function() {\n   return gulp.src('src/img/*.{png,jpg,gif,ico}')\n        .pipe(cache(imagemin({\n            progressive: true,\n            svgoPlugins: [{ removeViewBox: false }],\n            use: [pngquant()]\n        })))\n        .pipe(gulp.dest('dist/img'))\n        .pipe(notify({ message: 'Images task complete' }));\n});\n\n// 合并，压缩js文件\n// 找到 js/ 目录下的所有 js 文件，压缩，重命名，最后将处理完成的js存放在 dist/js/ 目录下\ngulp.task('scripts', function() {\n    return gulp.src('src/js/*.js') //可配置你需要检查脚本的具体名字。\n        //js代码校验\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'))\n        //js代码合并\n        .pipe(concat('all.js'))\n        //压缩脚本文件\n        .pipe(uglify())\n        //给文件添加.min后缀\n        .pipe(rename({ suffix: '.min' }))\n        //压缩脚本文件\n        .pipe(uglify())\n        //输出压缩文件到指定目录\n        .pipe(gulp.dest('dist/js'))\n    //提醒任务完成\n    .pipe(notify({ message: 'Scripts task complete' }))\n    console.log('gulp task is done'); //自定义提醒信息\n});\n\n//clean 清除文件 在任务执行前，最好先清除之前生成的文件\ngulp.task('clean', function(cb) {\n    return del(['dist/css', 'dist/js', 'dist/img'], cb)\n});\n\n//监听 Watch\ngulp.task('testWatch', function() {\n    // Watch .less files\n    gulp.watch('src/**/*.less', ['testLess']); //当所有less文件发生改变时，调用testLess任务\n    // Watch image files\n    gulp.watch('src/**/*.img', ['testImagemin']);\n    // Watch .js files\n    gulp.watch('js/*.js', ['scripts']);\n    // Create LiveReload server\n   livereload.listen();\n   // Watch any files in assets/, reload on change\n   gulp.watch(['dist/**']).on('change', livereload.changed);\n});\n\n```\n## 运行\n可以运行单独的任务，例如\n\n``` bash\ngulp default\ngulp watch\ngulp clean\n```\n也可以运行整个任务\n``` bash\ngulp\n```\n\n## 总结\n1.安装Node\n2.安装gulp\n3.新建gulpfile.js文件\n4.运行\n\n\n参考文献：\n1.[前端自动化的目的](http://wjkang.github.io/2016/05/02/Gulp/#前端自动化的目的)\n2.[gulp API](https://github.com/gulpjs/gulp/blob/master/docs/API.md)\n3.[gulp教程之gulp-minify-css](http://www.ydcss.com/archives/41)\n4.[gulp-notify处理报错](http://www.tuicool.com/articles/2qeuAbi)\n5.[gulp教程之gulp-imagemin](http://www.ydcss.com/archives/26)\n6.[使用BrowserSync浏览及相关配置](http://www.tuicool.com/articles/fUjMRn)\n7.[gulp入门教程]()\n","slug":"gulp学习笔记","published":1,"updated":"2016-08-15T02:05:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuid0lps000znbto813e6a4t"},{"title":"for循环的执行顺序","date":"2016-02-02T07:38:29.000Z","_content":"for循环的执行顺序用如下表达式：\n``` JavaScript\nfor(expression1;expression2;expression3)\n{   \n          expression4;\n}\n``` \n    执行的顺序应该是：\n\n## 1）第一次循环，即初始化循环。\n\n    首先执行表达式expression1（一般为初始化语句）；再执行expression2（一般为条件判断语句），判断expression1是否符合expression2的条件；如果符合，则执行expression4，否则，停止执行；最后执行expression3。\n\n\n\n\n## 2）第N（N>=2）次循环\n\n    首先执行expression2，判断在expression3是否符合在expression2要求；如果符合，则继续执行在expression4，否则，停止执行。最后执行在expression3。如此往复，直至expression3不满足在expression2条件是为止。\n\n\n\n\n## 总结：\n\n    总的来说，执行的顺序是一致的。先条件判断（expression2），再函数体执行（expression4），最后for执行（expression3）。往复......区别在于，条件判断的对象。第一次判断时，对象为初始化语句（expression1），后续的判断对象为执行后的结果（expression3）。\n","source":"_posts/for循环的执行顺序.md","raw":"---\ntitle: for循环的执行顺序\ndate: 2016-02-02 15:38:29\ncategories: 知识点滴\ntags:\n- 随笔\n---\nfor循环的执行顺序用如下表达式：\n``` JavaScript\nfor(expression1;expression2;expression3)\n{   \n          expression4;\n}\n``` \n    执行的顺序应该是：\n\n## 1）第一次循环，即初始化循环。\n\n    首先执行表达式expression1（一般为初始化语句）；再执行expression2（一般为条件判断语句），判断expression1是否符合expression2的条件；如果符合，则执行expression4，否则，停止执行；最后执行expression3。\n\n\n\n\n## 2）第N（N>=2）次循环\n\n    首先执行expression2，判断在expression3是否符合在expression2要求；如果符合，则继续执行在expression4，否则，停止执行。最后执行在expression3。如此往复，直至expression3不满足在expression2条件是为止。\n\n\n\n\n## 总结：\n\n    总的来说，执行的顺序是一致的。先条件判断（expression2），再函数体执行（expression4），最后for执行（expression3）。往复......区别在于，条件判断的对象。第一次判断时，对象为初始化语句（expression1），后续的判断对象为执行后的结果（expression3）。\n","slug":"for循环的执行顺序","published":1,"updated":"2016-02-02T11:38:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuid0lpv0014nbtopfni4w1b"},{"title":"VIM学习笔记","date":"2016-01-19T09:17:27.000Z","updated":"2016-01-20T07:52:35.000Z","comments":1,"_content":"首先我们知道在命令行中输入vim,进入vim文编辑器。\n可能有人会问vim是什么？vim是多模式文本编辑器也可以说是跨平台的文本编辑器，什么平台都可以用，windows，linux，unix，etc.\n由vi更新而来 VIM 是vi 的加强版.不仅兼容vi的所有指令，而且还有一些新的特性在里面。\n安装vim之后会有个vimrc文件，像高亮、字体等等所有的设置都可以写在里面的，感兴趣可以去网上找找vim配置文件.\n先介绍一些非常基础的vim知识供学习参考。\n\nvim有三种工作模式：插入模式 (Insert mode)、命令模式(Command mode) 、行模式 (EX Commands mode)。\n插入模式就像我们平时使用记事本时一样，可以随意的输入文本，\n基本没有什么可说的。主要是其它两个模式.首先了解下三个模式的相互转换：\n<!-- more -->\n\n# 三个模式的相互转换。\n打开一个vim，它的默认模式是命令模式，\n输入a或i等字符后可以转为插入模式；\n(按一下i键,下端显示 --INSERT--)\n命令模式输入:可以转为行模式；\n行模式也是在输入Esc后可以返回命令模式。\n注意：行模式和插入模式是不能直接相互转换的，必须能过命令模式转换。\n（下面的命令如果是以冒号开头的就是默认是行模式命令，否则是命令模式命令）\nhjkl四个键相当于←↓↑→，可以在命令模式下使用它们来上下左右移动光标。\n（特别注意不要再使用小键盘的上下左右来移动光标了，不然就失去使用vim的主要原因之一了，这是刚使用vim时最不容易改变的习惯）\n\n\n## 1. 普通模式\n\n在shell中直接打vim filename就会进入普通模式。在这个状态，我们可以通过不同的按键对文件进行操作和切换到其它模式。按“:”可切换到命令模式，按i，o，a可进入编辑模。\n\n### 1.1. 编辑\n\ni\n进入编辑模式。\n\no\n在当前位置下插入一空行，进入编辑模式，光标位于空行的最开头。\n\na\n光标后移一个字符，进入编辑模式。\n\nb\n是跳到单词的开头\n\ne\n是跳到单词的结尾\n\nv\n这入可视模式，可用高亮的色块选择内容。\n\nx or DEL键\n删除当前字符，删除内容保存在缓冲区。\n\nxp\n左右字符互换。\n\ndd\n删除当前行，删除内容保存在缓冲区。\n\nddp\n上下两行的内容互换。\n\nd$\n删除当前光标至行尾的所有内容。\n\ndG\n删除从当前行至文件未尾的所有行。\n\nu\nundo。\n\nw\n是跳到下一个单词的开头\n\nv\n进地visual模式，移动光标可选择文本。\n\ny\n把当前行复制到缓冲区中。\n\np\n把缓冲区中的文本插入到当前位置。\n\n\"ay\n把当前行复制到a缓冲区。可用26个字母命名多个缓冲区。\n\n\"ap\n把a缓冲区中的文本插入当前位置。\n\nJ\n上下两行合并成一行。\n\n.\n英文句点的作用是重复执行上次执行的命令，如你按了\"ap插入a缓冲区的内容，那你就可按\".\"来重复这个操作。\n\n### 1.2. 光标移动\n\nh，j，k，l\n在vim中，除了可使用光标键在移动光标外，还有一种更方便的光标移动方式。就是使用h，j，k，l这四个键来移动光标。h控制光标左移，j控制光标下移，k控制光标上移，l控制光标右移。通过使用这四个字母键就可使我们的手不用移动即可控制光标的移动。刚开始使用可能会有些不习惯，但熟练使用后你会发觉你的输入速度提高不少，强烈建议喜欢vim的朋友使用。\n\n$\n光标移动到行尾。\n\nG\n光标移动到文档末尾。\n\n0\n移动到此行的一个字符处\n\nH,L\nH控制光标移动到当前屏幕头，L控制光标移动到当前屏幕尾。\n\n{，}\n{控制光标上移一个段落，}控制光标下移一个段落\n\nctrl+f\n向前翻动一页\n\nctrl+b\n前后翻动一页\n### 1.3 查找查换\n  /word                   \n  在光标之后查找一个word的字符串\n\n  ？word                  \n  在光标之前查找一个word的字符串\n\n  ：n1,n2s/word1/word2/g  \n  在第n1行和n2行之间查找word1,并将word1替换为word2\n\n  :1,$s/word1/word2/g     \n  从第一行到最后一行查找word1并替换为word2\n\n  :1,$s/word1/word2/gc    \n  从第一行到最后一行查找word1并替换为word2,在替换前显示提示符，让用户确认\n\n### 1.4 删除 复制 粘贴  \nx，X      \nx向后删除一个字符  X向前删除一个字符  \n\nnx        \n向后删除n个字符\n\ndd        \n删除光标所在的整列\n\nndd       \n删除光标所在列的向下n列\n\nyy        \n复制光标所在行  \n\nnyy       \n复制光标所在行的向下n行\n\np ，P      \np复制的数据粘贴在光标下一行，P上一行\n\nu         \n恢复上一个动作\n\n## 2. 编辑模式\n\nESC      \n退出编辑状态。返回一般模式\n\ni ，I    \n插入：在当前光标所在处插入输入的文字，已存在的字符会向后退 \n\na，A     \n添加 ：由当前光标所在处的下一个字符开始输入，已存在的字符向后退 \n\no ，O    \n插入新的一行，从光标所在处的下一行行首开始输入 \n\nr，R     \n替换：r会替换光标所指的那一个字符，R会一直替换光标所指的文字，知道案下esc       \n\n## 3. 命令模式\n\n在普通模式上按“:”就可进入命令模式，在左下屏幕我们输入一些操作指令。\n\n:q!\n不保存退出vim。\n\n:w\n保存文档，但不退出vim。\n\n:w！   \n若文件为只读，强制写入\n\n:q       \n推出vi   \n\n:w ［filename］\n\n保存为另一文件\n\n:wq\n是保存并退出文件\n\n:x\n保存退出vim。\n\n:! command\n运行shell命令。\n\n:e filename\n编辑/打开一个文件\n\n:s/emacs/vim\n在当前行中把第一个emacs替换成vim。\n\n:s/emacs/vim/g\n把当前行中所有的emacs替换成vim。\n\n:%s/emacs/vim/g\n在全局范围内把emacs替换成vim。\n\n:reg\n列出缓冲区内容。\n\n:set all\n列出所有参数的配置情况。\n\n:tabe\n新建一个标签页。\n\n:tabn or :tabp\n切换到下一个\\上一个标签页。\n\n:close\n关闭当前标签页。\n\n:qa\n关闭所有标签页退出。\n\n由于水平有限，加之行文匆忙，文中很可能错误不断，希望大家不要见怪，多批评指正。\n另附两个vim常用命令链接供参考\n[VIM常用命令](http://blog.css6.com/2014/12/18/VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/)\n[VIM 常用快捷键](http://www.cnblogs.com/abeen/archive/2010/07/28/1786594.html)\n","source":"_posts/VIM学习笔记.md","raw":"---\ntitle: VIM学习笔记\ndate: 2016-01-19 17:17:27\nupdated:\ncomments: true\ncategories: 技术摘录\ntags:\n - vim\n - 学习笔记\n---\n首先我们知道在命令行中输入vim,进入vim文编辑器。\n可能有人会问vim是什么？vim是多模式文本编辑器也可以说是跨平台的文本编辑器，什么平台都可以用，windows，linux，unix，etc.\n由vi更新而来 VIM 是vi 的加强版.不仅兼容vi的所有指令，而且还有一些新的特性在里面。\n安装vim之后会有个vimrc文件，像高亮、字体等等所有的设置都可以写在里面的，感兴趣可以去网上找找vim配置文件.\n先介绍一些非常基础的vim知识供学习参考。\n\nvim有三种工作模式：插入模式 (Insert mode)、命令模式(Command mode) 、行模式 (EX Commands mode)。\n插入模式就像我们平时使用记事本时一样，可以随意的输入文本，\n基本没有什么可说的。主要是其它两个模式.首先了解下三个模式的相互转换：\n<!-- more -->\n\n# 三个模式的相互转换。\n打开一个vim，它的默认模式是命令模式，\n输入a或i等字符后可以转为插入模式；\n(按一下i键,下端显示 --INSERT--)\n命令模式输入:可以转为行模式；\n行模式也是在输入Esc后可以返回命令模式。\n注意：行模式和插入模式是不能直接相互转换的，必须能过命令模式转换。\n（下面的命令如果是以冒号开头的就是默认是行模式命令，否则是命令模式命令）\nhjkl四个键相当于←↓↑→，可以在命令模式下使用它们来上下左右移动光标。\n（特别注意不要再使用小键盘的上下左右来移动光标了，不然就失去使用vim的主要原因之一了，这是刚使用vim时最不容易改变的习惯）\n\n\n## 1. 普通模式\n\n在shell中直接打vim filename就会进入普通模式。在这个状态，我们可以通过不同的按键对文件进行操作和切换到其它模式。按“:”可切换到命令模式，按i，o，a可进入编辑模。\n\n### 1.1. 编辑\n\ni\n进入编辑模式。\n\no\n在当前位置下插入一空行，进入编辑模式，光标位于空行的最开头。\n\na\n光标后移一个字符，进入编辑模式。\n\nb\n是跳到单词的开头\n\ne\n是跳到单词的结尾\n\nv\n这入可视模式，可用高亮的色块选择内容。\n\nx or DEL键\n删除当前字符，删除内容保存在缓冲区。\n\nxp\n左右字符互换。\n\ndd\n删除当前行，删除内容保存在缓冲区。\n\nddp\n上下两行的内容互换。\n\nd$\n删除当前光标至行尾的所有内容。\n\ndG\n删除从当前行至文件未尾的所有行。\n\nu\nundo。\n\nw\n是跳到下一个单词的开头\n\nv\n进地visual模式，移动光标可选择文本。\n\ny\n把当前行复制到缓冲区中。\n\np\n把缓冲区中的文本插入到当前位置。\n\n\"ay\n把当前行复制到a缓冲区。可用26个字母命名多个缓冲区。\n\n\"ap\n把a缓冲区中的文本插入当前位置。\n\nJ\n上下两行合并成一行。\n\n.\n英文句点的作用是重复执行上次执行的命令，如你按了\"ap插入a缓冲区的内容，那你就可按\".\"来重复这个操作。\n\n### 1.2. 光标移动\n\nh，j，k，l\n在vim中，除了可使用光标键在移动光标外，还有一种更方便的光标移动方式。就是使用h，j，k，l这四个键来移动光标。h控制光标左移，j控制光标下移，k控制光标上移，l控制光标右移。通过使用这四个字母键就可使我们的手不用移动即可控制光标的移动。刚开始使用可能会有些不习惯，但熟练使用后你会发觉你的输入速度提高不少，强烈建议喜欢vim的朋友使用。\n\n$\n光标移动到行尾。\n\nG\n光标移动到文档末尾。\n\n0\n移动到此行的一个字符处\n\nH,L\nH控制光标移动到当前屏幕头，L控制光标移动到当前屏幕尾。\n\n{，}\n{控制光标上移一个段落，}控制光标下移一个段落\n\nctrl+f\n向前翻动一页\n\nctrl+b\n前后翻动一页\n### 1.3 查找查换\n  /word                   \n  在光标之后查找一个word的字符串\n\n  ？word                  \n  在光标之前查找一个word的字符串\n\n  ：n1,n2s/word1/word2/g  \n  在第n1行和n2行之间查找word1,并将word1替换为word2\n\n  :1,$s/word1/word2/g     \n  从第一行到最后一行查找word1并替换为word2\n\n  :1,$s/word1/word2/gc    \n  从第一行到最后一行查找word1并替换为word2,在替换前显示提示符，让用户确认\n\n### 1.4 删除 复制 粘贴  \nx，X      \nx向后删除一个字符  X向前删除一个字符  \n\nnx        \n向后删除n个字符\n\ndd        \n删除光标所在的整列\n\nndd       \n删除光标所在列的向下n列\n\nyy        \n复制光标所在行  \n\nnyy       \n复制光标所在行的向下n行\n\np ，P      \np复制的数据粘贴在光标下一行，P上一行\n\nu         \n恢复上一个动作\n\n## 2. 编辑模式\n\nESC      \n退出编辑状态。返回一般模式\n\ni ，I    \n插入：在当前光标所在处插入输入的文字，已存在的字符会向后退 \n\na，A     \n添加 ：由当前光标所在处的下一个字符开始输入，已存在的字符向后退 \n\no ，O    \n插入新的一行，从光标所在处的下一行行首开始输入 \n\nr，R     \n替换：r会替换光标所指的那一个字符，R会一直替换光标所指的文字，知道案下esc       \n\n## 3. 命令模式\n\n在普通模式上按“:”就可进入命令模式，在左下屏幕我们输入一些操作指令。\n\n:q!\n不保存退出vim。\n\n:w\n保存文档，但不退出vim。\n\n:w！   \n若文件为只读，强制写入\n\n:q       \n推出vi   \n\n:w ［filename］\n\n保存为另一文件\n\n:wq\n是保存并退出文件\n\n:x\n保存退出vim。\n\n:! command\n运行shell命令。\n\n:e filename\n编辑/打开一个文件\n\n:s/emacs/vim\n在当前行中把第一个emacs替换成vim。\n\n:s/emacs/vim/g\n把当前行中所有的emacs替换成vim。\n\n:%s/emacs/vim/g\n在全局范围内把emacs替换成vim。\n\n:reg\n列出缓冲区内容。\n\n:set all\n列出所有参数的配置情况。\n\n:tabe\n新建一个标签页。\n\n:tabn or :tabp\n切换到下一个\\上一个标签页。\n\n:close\n关闭当前标签页。\n\n:qa\n关闭所有标签页退出。\n\n由于水平有限，加之行文匆忙，文中很可能错误不断，希望大家不要见怪，多批评指正。\n另附两个vim常用命令链接供参考\n[VIM常用命令](http://blog.css6.com/2014/12/18/VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/)\n[VIM 常用快捷键](http://www.cnblogs.com/abeen/archive/2010/07/28/1786594.html)\n","slug":"VIM学习笔记","published":1,"layout":"post","photos":[],"link":"","_id":"ciuid0lpx0018nbtop6auuxnf"},{"title":"Mac OS x 使用技巧","date":"2016-01-20T07:17:54.000Z","_content":"先附一张mac常用快捷键\n![](img/mac.jpg)\n\n# 常用高频的快捷键目录：\n<!-- more -->\n## 1浏览器上网（Safari & Chrome）：\nCommand + T = 这是基本全局打开新标签的标准键。会用的很多。新标签默认是在地址框输入，所以我通常是CT了之后直接输入要搜索的东西。\nCommand + L = 光标移到地址框\nCommand + R = 刷新页面\nCommand + + = 大屏幕的时候很实用，放大页面，基本也是全局型的。 0是恢复默认大小\nCommand + W = 关闭当前标签。不要和退出按错了。\nCommand + Q = 退出当前软件，其他软件也都可以用。\nCommand + D = 收藏当前页面\n空格 = 屏幕下滚一页\n\nSafari的恢复刚关闭标签就是熟悉的 Command + Z。Chrome是和打开差不多的，Command + Shift +T。Chrome可以按顺序恢复，但是Safari只能恢复最近的一个。\n\n## 2 Mac Mail：\n常用的：Command + Shift + n = 手动刷新邮箱查看新邮件。iOS的通知会快一些，这时候就手动刷下可以看到新邮件。\nCommand + n = 新建邮件\nCommand + Shift + r = 回复当前邮件\nCommand + Shift + f = 转发当前邮件\nCommand + Shift + d =发送邮件\ntab切换一下输入框，基本上邮件够用了。\n如果想看更多，大部分软件都会把相关的快捷键标到菜单上，对照一看就知道了。\n## 3全局：Finder操作，窗口大小调整,神奇翻译”（需用到Alfred的收费Workflow）\n\n\nMac的Finder有四种浏览方式，缩略图（调大小用Command + +/-）。\n这几个浏览方式用Command + 1/2/3/4切换。\n\n## 4截屏：\nCommand + Shift + 3/4 ＝ 3是全屏，4是分区。\n\n参考文献[Mac OS X 使用技巧](http://www.zhihu.com/question/20021861)\n","source":"_posts/Mac-OS-x-使用技巧.md","raw":"---\ntitle: Mac OS x 使用技巧\ndate: 2016-01-20 15:17:54\ncategories: 技术摘录\ntags:\n  - mac技巧\n---\n先附一张mac常用快捷键\n![](img/mac.jpg)\n\n# 常用高频的快捷键目录：\n<!-- more -->\n## 1浏览器上网（Safari & Chrome）：\nCommand + T = 这是基本全局打开新标签的标准键。会用的很多。新标签默认是在地址框输入，所以我通常是CT了之后直接输入要搜索的东西。\nCommand + L = 光标移到地址框\nCommand + R = 刷新页面\nCommand + + = 大屏幕的时候很实用，放大页面，基本也是全局型的。 0是恢复默认大小\nCommand + W = 关闭当前标签。不要和退出按错了。\nCommand + Q = 退出当前软件，其他软件也都可以用。\nCommand + D = 收藏当前页面\n空格 = 屏幕下滚一页\n\nSafari的恢复刚关闭标签就是熟悉的 Command + Z。Chrome是和打开差不多的，Command + Shift +T。Chrome可以按顺序恢复，但是Safari只能恢复最近的一个。\n\n## 2 Mac Mail：\n常用的：Command + Shift + n = 手动刷新邮箱查看新邮件。iOS的通知会快一些，这时候就手动刷下可以看到新邮件。\nCommand + n = 新建邮件\nCommand + Shift + r = 回复当前邮件\nCommand + Shift + f = 转发当前邮件\nCommand + Shift + d =发送邮件\ntab切换一下输入框，基本上邮件够用了。\n如果想看更多，大部分软件都会把相关的快捷键标到菜单上，对照一看就知道了。\n## 3全局：Finder操作，窗口大小调整,神奇翻译”（需用到Alfred的收费Workflow）\n\n\nMac的Finder有四种浏览方式，缩略图（调大小用Command + +/-）。\n这几个浏览方式用Command + 1/2/3/4切换。\n\n## 4截屏：\nCommand + Shift + 3/4 ＝ 3是全屏，4是分区。\n\n参考文献[Mac OS X 使用技巧](http://www.zhihu.com/question/20021861)\n","slug":"Mac-OS-x-使用技巧","published":1,"updated":"2016-01-20T09:11:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuid0lq1001dnbtoatk4ob1o"}],"PostAsset":[],"PostCategory":[{"post_id":"ciuid0lo70000nbto81cev47i","category_id":"ciuid0loe0001nbto7wyyfoto","_id":"ciuid0loi0004nbtotnpf4y26"},{"post_id":"ciuid0lok0007nbtob51vto7a","category_id":"ciuid0loe0001nbto7wyyfoto","_id":"ciuid0lom0008nbto38poh720"},{"post_id":"ciuid0lpe000hnbto3x3pz7n9","category_id":"ciuid0loe0001nbto7wyyfoto","_id":"ciuid0lpg000inbtoqres35ax"},{"post_id":"ciuid0lpk000nnbtoqab4z6nn","category_id":"ciuid0loe0001nbto7wyyfoto","_id":"ciuid0lpl000onbtoc15tm686"},{"post_id":"ciuid0lpo000snbtof0vj33nt","category_id":"ciuid0lpp000tnbtoosoxaeu5","_id":"ciuid0lpr000wnbtox2xd98ua"},{"post_id":"ciuid0lps000znbto813e6a4t","category_id":"ciuid0loe0001nbto7wyyfoto","_id":"ciuid0lpt0010nbto0vxpibxo"},{"post_id":"ciuid0lpv0014nbtopfni4w1b","category_id":"ciuid0lpw0015nbtoy97bpett","_id":"ciuid0lpw0017nbto8vzuec18"},{"post_id":"ciuid0lpx0018nbtop6auuxnf","category_id":"ciuid0lpp000tnbtoosoxaeu5","_id":"ciuid0lpz0019nbto9oxavg5m"},{"post_id":"ciuid0lq1001dnbtoatk4ob1o","category_id":"ciuid0lpp000tnbtoosoxaeu5","_id":"ciuid0lq2001enbtok1d5kiqg"}],"PostTag":[{"post_id":"ciuid0lo70000nbto81cev47i","tag_id":"ciuid0loe0002nbto7sav916m","_id":"ciuid0loi0005nbtossujrxr3"},{"post_id":"ciuid0lo70000nbto81cev47i","tag_id":"ciuid0loh0003nbto0e513zxy","_id":"ciuid0loj0006nbtow4jtlak1"},{"post_id":"ciuid0lok0007nbtob51vto7a","tag_id":"ciuid0lom0009nbto1iss3hd9","_id":"ciuid0loq000bnbtolwkvagzo"},{"post_id":"ciuid0lok0007nbtob51vto7a","tag_id":"ciuid0lop000anbtox7mv1kg9","_id":"ciuid0loq000cnbtofdguprt9"},{"post_id":"ciuid0lot000dnbtoi3u5tpbf","tag_id":"ciuid0low000enbto27uan5ka","_id":"ciuid0lox000fnbto8xff27im"},{"post_id":"ciuid0lot000dnbtoi3u5tpbf","tag_id":"ciuid0lop000anbtox7mv1kg9","_id":"ciuid0lox000gnbtoov75d0r8"},{"post_id":"ciuid0lpe000hnbto3x3pz7n9","tag_id":"ciuid0loh0003nbto0e513zxy","_id":"ciuid0lpg000jnbtorff3gfjq"},{"post_id":"ciuid0lph000knbtojpwehxj4","tag_id":"ciuid0lpj000lnbto6zv858jj","_id":"ciuid0lpj000mnbtomalzwpt9"},{"post_id":"ciuid0lpk000nnbtoqab4z6nn","tag_id":"ciuid0loh0003nbto0e513zxy","_id":"ciuid0lpl000qnbtovyupkvoq"},{"post_id":"ciuid0lpk000nnbtoqab4z6nn","tag_id":"ciuid0lpl000pnbtocv5akxli","_id":"ciuid0lpm000rnbtoeh7nqs4v"},{"post_id":"ciuid0lpo000snbtof0vj33nt","tag_id":"ciuid0lpq000unbto5czu4c6d","_id":"ciuid0lpr000xnbtoxqfmwrml"},{"post_id":"ciuid0lpo000snbtof0vj33nt","tag_id":"ciuid0lpr000vnbto4rb245dl","_id":"ciuid0lpr000ynbtomnkaqji1"},{"post_id":"ciuid0lps000znbto813e6a4t","tag_id":"ciuid0lpt0011nbto4h7egivy","_id":"ciuid0lpu0012nbtopcgcbdzq"},{"post_id":"ciuid0lps000znbto813e6a4t","tag_id":"ciuid0loh0003nbto0e513zxy","_id":"ciuid0lpu0013nbtokmduer7o"},{"post_id":"ciuid0lpv0014nbtopfni4w1b","tag_id":"ciuid0lop000anbtox7mv1kg9","_id":"ciuid0lpw0016nbto97ria4ls"},{"post_id":"ciuid0lpx0018nbtop6auuxnf","tag_id":"ciuid0lpz001anbtoa3eyr0lc","_id":"ciuid0lpz001bnbtonqxwjf4m"},{"post_id":"ciuid0lpx0018nbtop6auuxnf","tag_id":"ciuid0loh0003nbto0e513zxy","_id":"ciuid0lpz001cnbtow7xs7u5k"},{"post_id":"ciuid0lq1001dnbtoatk4ob1o","tag_id":"ciuid0lpq000unbto5czu4c6d","_id":"ciuid0lq2001fnbto3vinkl5y"}],"Tag":[{"name":"javascript","_id":"ciuid0loe0002nbto7sav916m"},{"name":"学习笔记","_id":"ciuid0loh0003nbto0e513zxy"},{"name":"hexo","_id":"ciuid0lom0009nbto1iss3hd9"},{"name":"随笔","_id":"ciuid0lop000anbtox7mv1kg9"},{"name":"前题面试题","_id":"ciuid0low000enbto27uan5ka"},{"name":"react","_id":"ciuid0lpj000lnbto6zv858jj"},{"name":"react-native","_id":"ciuid0lpl000pnbtocv5akxli"},{"name":"mac技巧","_id":"ciuid0lpq000unbto5czu4c6d"},{"name":"终端","_id":"ciuid0lpr000vnbto4rb245dl"},{"name":"gulp","_id":"ciuid0lpt0011nbto4h7egivy"},{"name":"vim","_id":"ciuid0lpz001anbtoa3eyr0lc"}]}}