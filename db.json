{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/WechatIMG14.jpg","path":"WechatIMG14.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/linjie.jpg","path":"linjie.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/alipay.png","path":"alipay.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/_config.yml","hash":"9c3dedd8000215691e7d6c73828b27c4c4dc2b3f","modified":1626422001896},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1510733361000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1510733361000},{"_id":"themes/yilia/.DS_Store","hash":"e9fc3315e2288d9f287d1a85d166d3779cb4ba42","modified":1626421983559},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1581793622000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1510733361000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1510733361000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1510733361000},{"_id":"source/_posts/Javascript-严格模式.md","hash":"cfdf8f9a5bcf4dae8ab0441af6715ef96372344b","modified":1581793622000},{"_id":"source/_posts/Mac-OS-x-使用技巧.md","hash":"f01a57d4511b89990d00ecff5513b1b740c9ff90","modified":1581793622000},{"_id":"source/_posts/VIM学习笔记.md","hash":"8f1114516e09cf439b2a2488623ed4b32f733bf5","modified":1581793622000},{"_id":"source/_posts/mac终端常用命令.md","hash":"51550052f7397a5d60879ceb01d7ea381ef74f5a","modified":1581793622000},{"_id":"source/_posts/for循环的执行顺序.md","hash":"62791ded56c96111e69a82f4175ab03662382b17","modified":1581793622000},{"_id":"source/_posts/gulp学习笔记.md","hash":"b5af3cda0fd946540e119e122a972368b4e68736","modified":1581793622000},{"_id":"source/_posts/react-native-第一个demo.md","hash":"8e57b4ec82a6511e9f06740832ea175a812d97b7","modified":1581793622000},{"_id":"source/_posts/react-环境搭建.md","hash":"41d57c2e1dcfb446bf21e83653a37fe3b6c9936c","modified":1581793622000},{"_id":"source/_posts/关于haslayout.md","hash":"8ea98c9457b26e4202b43450a5939581b47e5d1f","modified":1581793622000},{"_id":"source/_posts/关于面试.md","hash":"dd1035cc892d70798d99f06dc797d90b7b0c94b2","modified":1581793622000},{"_id":"source/_posts/重新开博－hexo建站笔记.md","hash":"d4f83f8037d50c0ee0f18e96d3549de536f9df68","modified":1581793622000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1510733361000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1510733361000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1510733361000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1510733361000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1510733361000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1510733361000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1510733361000},{"_id":"source/_posts/关于正则.md","hash":"ffa9c2349eafbf884f30f9b90250e100756a0254","modified":1626443289459},{"_id":"themes/yilia/source/.DS_Store","hash":"e3a6d58006e446db5a82b27c32461efe3616f278","modified":1626421942005},{"_id":"themes/yilia/source/WechatIMG14.jpg","hash":"6be7e219b4e096e481527fb4fadd114190c08319","modified":1626410696694},{"_id":"themes/yilia/source/linjie.jpg","hash":"2aa300ad81a0b3e6fb5311177d526d39a9d15f78","modified":1626410696852},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1510733361000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1510733361000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1510733361000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1510733361000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1510733361000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1510733361000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1510733361000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1510733361000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1510733361000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1510733361000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510733361000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1510733361000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1510733361000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1510733361000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1510733361000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1510733361000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1510733361000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1510733361000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1510733361000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1510733361000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1510733361000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1510733361000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1510733361000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1510733361000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1510733361000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1510733361000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1510733361000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1510733361000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1510733361000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1510733361000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1510733361000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1510733361000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1510733361000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1510733361000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1510733361000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1510733361000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1510733361000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1510733361000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1510733361000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1510733361000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1510733361000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1510733361000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1510733361000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1510733361000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1510733361000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1510733361000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1510733361000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1510733361000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1510733361000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1510733361000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1510733361000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1510733361000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1510733361000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1510733361000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1510733361000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1510733361000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1510733361000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1510733361000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1510733361000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1510733361000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1510733361000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1510733361000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1510733361000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1510733361000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1510733361000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1510733361000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1510733361000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1510733361000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1510733361000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1510733361000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1510733361000},{"_id":"themes/yilia/source/alipay.png","hash":"dc05b44ce87cae7b0401308b3be41f8bfe9a2950","modified":1626421911774},{"_id":"public/content.json","hash":"fbe5a01be9f076f924c46eb3e72a62682ca2e97c","modified":1626443594774},{"_id":"public/2016/10/20/react-环境搭建/index.html","hash":"6da71ecd6cfc085f3b6fc937d6fae5f936325f53","modified":1626443594777},{"_id":"public/2016/10/20/react-native-第一个demo/index.html","hash":"52dced8556c5ac68700b2d88136c42de64162f6b","modified":1626443594795},{"_id":"public/2016/07/12/gulp学习笔记/index.html","hash":"01ba890a59c9b88aa85700ec154b0bbf61d1d458","modified":1626443594799},{"_id":"public/2016/02/02/for循环的执行顺序/index.html","hash":"0aa33b009954888929a97fc83f67edc637854eab","modified":1626443594800},{"_id":"public/2016/02/01/Javascript-严格模式/index.html","hash":"8fac49f894710a9f222dc707c7662e1b777594bc","modified":1626443594800},{"_id":"public/2016/01/26/关于haslayout/index.html","hash":"821ce3c28bff5717fdfd4af150cf03547d0c76e4","modified":1626443594806},{"_id":"public/2016/01/25/关于面试/index.html","hash":"8e705932790a3f35ca5ece3d455746e1ed14cdec","modified":1626443594806},{"_id":"public/2016/01/20/Mac-OS-x-使用技巧/index.html","hash":"91db0171d45565005b717e26ec03b5a8f2ce7457","modified":1626443594806},{"_id":"public/2016/01/20/重新开博－hexo建站笔记/index.html","hash":"5d41c76ff4cb36a90a3361dcfee28fb765973855","modified":1626443594806},{"_id":"public/2016/01/18/mac终端常用命令/index.html","hash":"306d5f7323aa57b99b270c21ca0477da25a69db2","modified":1626443594806},{"_id":"public/2016/01/19/VIM学习笔记/index.html","hash":"c06eb207d846517d4e4d6bf9784856f4f1f5ddd3","modified":1626443594806},{"_id":"public/categories/学习笔记/index.html","hash":"d831895d9b30f3e17c2296dae4fdc852a0d5ae56","modified":1626443594806},{"_id":"public/categories/技术摘录/index.html","hash":"44e8ef88a0d765f4c08bb93000853625b1462f26","modified":1626443594806},{"_id":"public/categories/知识点滴/index.html","hash":"6bac90e4c3522012df6fd43ddc8841eafa68c78f","modified":1626443594806},{"_id":"public/index.html","hash":"5d5b18b6e922dfd42c9b903b625bb00223501131","modified":1626443594807},{"_id":"public/page/2/index.html","hash":"3ce67b440f8c00b4fab34caecbefec8cc7b0ed4a","modified":1626443594807},{"_id":"public/tags/javascript/index.html","hash":"56e82a8a6272b5c8579f222a48e7dc05aca6492b","modified":1626443594807},{"_id":"public/tags/学习笔记/index.html","hash":"8261a6f9d8a4870636bd2f3625ea36981c5b7a4a","modified":1626443594807},{"_id":"public/tags/mac技巧/index.html","hash":"545d548083a4bf031e2b4a18a4c6c831918d2840","modified":1626443594807},{"_id":"public/tags/vim/index.html","hash":"83720b884d349d37bf19e8b78a9bbfaf8ce66a13","modified":1626443594807},{"_id":"public/tags/终端/index.html","hash":"2b0dfbda6988535e75208090e1f0300d4ea78061","modified":1626443594807},{"_id":"public/tags/随笔/index.html","hash":"d0c57ef967e2f64f99d9b43e278bf9aa32fe14d7","modified":1626443594807},{"_id":"public/tags/gulp/index.html","hash":"9a2e4ce9c9dd4d1697f6cd2d3d6e881626d72305","modified":1626443594808},{"_id":"public/tags/react-native/index.html","hash":"6cacd3f7bd7bf16037609e14f88cda01899eba6a","modified":1626443594808},{"_id":"public/tags/react/index.html","hash":"bb0104733db0a79816c83e3608333f89003dc7fa","modified":1626443594808},{"_id":"public/tags/前题面试题/index.html","hash":"7437640195dde78df925879e51e1b9ce9bf12b44","modified":1626443594808},{"_id":"public/tags/hexo/index.html","hash":"bcf5f86f9809d02823020f62cae8d9483ac64ce6","modified":1626443594808},{"_id":"public/archives/index.html","hash":"f505d2ebac21d199823001e3f7f0a2a1e5695b16","modified":1626443594808},{"_id":"public/archives/page/2/index.html","hash":"c8116c447de8b3b1cc820e79197b9a74caad31a6","modified":1626443594808},{"_id":"public/archives/2016/index.html","hash":"e26d95e62ef856bd2a86362f537ad904cbe8f061","modified":1626443594808},{"_id":"public/archives/2016/page/2/index.html","hash":"c91e1ce69842fdfa6d2153e899f16e375c51162e","modified":1626443594809},{"_id":"public/archives/2016/01/index.html","hash":"e900d338613a7777dc7da645008283323019b588","modified":1626443594809},{"_id":"public/archives/2016/02/index.html","hash":"c029982ed060aabfb467d6e2440e9ae1ed48a874","modified":1626443594809},{"_id":"public/archives/2016/07/index.html","hash":"94e4d081f7cd3073615df74775d42b2853891101","modified":1626443594809},{"_id":"public/archives/2016/10/index.html","hash":"c2de04b5adb8a3c6e37275b4d97bb8b0d5e2a6af","modified":1626443594809},{"_id":"public/2021/07/16/关于正则/index.html","hash":"9a15427b6a0a1828b12445bcef7efb1f545a2617","modified":1626443594840},{"_id":"public/archives/2021/index.html","hash":"2c5d4ccfc11466582f1d3a46b8cf0c1e367c2559","modified":1626443594885},{"_id":"public/archives/2021/07/index.html","hash":"4a8e070cf0928564705e3edb8b77f23afbf08f67","modified":1626443594885},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1626443594885},{"_id":"public/linjie.jpg","hash":"2aa300ad81a0b3e6fb5311177d526d39a9d15f78","modified":1626443594885},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1626443594885},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1626443594885},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1626443594885},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1626443594885},{"_id":"public/WechatIMG14.jpg","hash":"6be7e219b4e096e481527fb4fadd114190c08319","modified":1626443594885},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1626443594885},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1626443594885},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1626443594885},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1626443594885},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1626443594891},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1626443594891},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1626443594891},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1626443594891},{"_id":"public/alipay.png","hash":"dc05b44ce87cae7b0401308b3be41f8bfe9a2950","modified":1626443594900}],"Category":[{"name":"学习笔记","_id":"ckr6eisk700023fwyvy1aw1qa"},{"name":"技术摘录","_id":"ckr6eiskd00073fwygkhjhxo2"},{"name":"知识点滴","_id":"ckr6eiskm000q3fwy713nhbae"}],"Data":[],"Page":[],"Post":[{"title":"Javascript 严格模式","date":"2016-02-01T03:08:22.000Z","_content":"除了正常运行模式，ECMAscript 5添加了第二种运行模式：\"[严格模式](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\"（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。\n## 设立\"严格模式\"的目的:\n``` JavaScript\n   - 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n　　- 消除代码运行的一些不安全之处，保证代码运行的安全；\n　　- 提高编译器效率，增加运行速度；\n　　- 为未来新版本的Javascript做好铺垫。\n```\n<!--more-->\n\"严格模式\"体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。\n另一方面，同样的代码，在\"严格模式\"中，可能会有不一样的运行结果；一些在\"正常模式\"下可以运行的语句，在\"严格模式\"下将不能运行。掌握这些内容，有助于更细致深入地理解Javascript，让你变成一个更好的程序员。\n本文将对\"严格模式\"做详细介绍。\n## 二、进入标志\n进入\"严格模式\"的标志，是下面这行语句：\n``` JavaScript\n　　\"use strict\";\n```\n老版本的浏览器会把它当作一行普通字符串，加以忽略。\n## 三、如何调用\n\"严格模式\"有两种调用方法，适用于不同的场合。\n### 3.1 针对整个脚本文件\n将\"use strict\"放在脚本文件的第一行，则整个脚本都将以\"严格模式\"运行。如果这行语句不在第一行，则无效，整个脚本以\"正常模式\"运行。如果不同模式的代码文件合并成一个文件，这一点需要特别注意。\n(严格地说，只要前面不是产生实际运行结果的语句，\"use strict\"可以不在第一行，比如直接跟在一个空的分号后面。)\n``` JavaScript\n　　<script>\n　　　　\"use strict\";\n　　　　console.log(\"这是严格模式。\");\n　　</script>\n　　<script>\n　　　　console.log(\"这是正常模式。\");\n　　</script>\n```\n上面的代码表示，一个网页中依次有两段Javascript代码。前一个script标签是严格模式，后一个不是。\n### 3.2 针对单个函数\n将\"use strict\"放在函数体的第一行，则整个函数以\"严格模式\"运行。\n``` JavaScript\n　　function strict(){\n　　　　\"use strict\";\n　　　　return \"这是严格模式。\";\n　　}\n　　function notStrict() {\n　　　　return \"这是正常模式。\";\n　　}\n```\n### 3.3 脚本文件的变通写法\n因为第一种调用方法不利于文件合并，所以更好的做法是，借用第二种方法，将整个脚本文件放在一个立即执行的匿名函数之中。\n``` JavaScript\n　　(function (){\n\n　　　　\"use strict\";\n　　　　// some code here\n\n　　 })();\n```\n## 四、语法和行为改变\n严格模式对Javascript的语法和行为，都做了一些改变。\n### 4.1 全局变量显式声明\n在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。\n``` JavaScript\n\"use strict\";\n　　v = 1; // 报错，v未声明\n　　for(i = 0; i < 2; i++) { // 报错，i未声明\n　　}\n```\n因此，严格模式下，变量都必须先用var命令声明，然后再使用。\n### 4.2 静态绑定\nJavascript语言的一个特点，就是允许\"动态绑定\"，即某些属性和方法到底属于哪一个对象，不是在编译时确定的，而是在运行时（runtime）确定的。\n严格模式对动态绑定做了一些限制。某些情况下，只允许静态绑定。也就是说，属性和方法到底归属哪个对象，在编译阶段就确定。这样做有利于编译效率的提高，也使得代码更容易阅读，更少出现意外。\n具体来说，涉及以下几个方面。\n（1）禁止使用with语句\n因为with语句无法在编译时就确定，属性到底归属哪个对象。\n``` JavaScript\n　　\"use strict\";\n　　var v = 1;\n　　with (o){ // 语法错误\n　　　　v = 2;\n　　}\n```\n（2）创设eval作用域\n正常模式下，Javascript语言有两种变量作用域（scope）：全局作用域和函数作用域。严格模式创设了第三种作用域：eval作用域。\n正常模式下，eval语句的作用域，取决于它处于全局作用域，还是处于函数作用域。严格模式下，eval语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于eval内部。\n``` JavaScript\n　　\"use strict\";\n　　var x = 2;\n　　console.info(eval(\"var x = 5; x\")); // 5\n　　console.info(x); // 2\n```\n### 4.3 增强的安全措施\n（1）禁止this关键字指向全局对象\n``` JavaScript\n　　function f(){\n　　　　return !this;\n　　}\n　　// 返回false，因为\"this\"指向全局对象，\"!this\"就是false\n　　function f(){\n　　　　\"use strict\";\n　　　　return !this;\n　　}\n```\n　　// 返回true，因为严格模式下，this的值为undefined，所以\"!this\"为true。\n因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。\n``` JavaScript\n　　function f(){\n　　　　\"use strict\";\n　　　　this.a = 1;\n　　};\n　　f();// 报错，this未定义\n```\n（2）禁止在函数内部遍历调用栈\n``` JavaScript\n　　function f1(){\n　　　　\"use strict\";\n　　　　f1.caller; // 报错\n　　　　f1.arguments; // 报错\n　　}\n　　f1();\n```\n### 4.4 禁止删除变量\n严格模式下无法删除变量。只有configurable设置为true的对象属性，才能被删除。\n``` JavaScript\n　　\"use strict\";\n　　var x;\n　　delete x; // 语法错误\n　　var o = Object.create(null, {'x': {\n　　　　　　value: 1,\n　　　　　　configurable: true\n　　}});\n　　delete o.x; // 删除成功\n```\n## 4.5 显式报错\n正常模式下，对一个对象的只读属性进行赋值，不会报错，只会默默地失败。严格模式下，将报错。\n``` JavaScript\n　　\"use strict\";\n\n　　var o = {};\n　　Object.defineProperty(o, \"v\", { value: 1, writable: false });\n　　o.v = 2; // 报错\n```\n严格模式下，对一个使用getter方法读取的属性进行赋值，会报错。\n``` JavaScript\n　　\"use strict\";\n\n　　var o = {\n\n　　　　get v() { return 1; }\n　　};\n　　o.v = 2; // 报错\n```\n严格模式下，对禁止扩展的对象添加新属性，会报错。\n``` JavaScript\n　　\"use strict\";\n　　var o = {};\n　　Object.preventExtensions(o);\n　　o.v = 1; // 报错\n```\n严格模式下，删除一个不可删除的属性，会报错。\n``` JavaScript\n　　\"use strict\";\n　　delete Object.prototype; // 报错\n```\n### 4.6 重名错误\n严格模式新增了一些语法错误。\n（1）对象不能有重名的属性\n正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。\n``` JavaScript\n　　\"use strict\";\n　　var o = {\n　　　　p: 1,\n　　　　p: 2\n　　}; // 语法错误\n```\n（2）函数不能有重名的参数\n正常模式下，如果函数有多个重名的参数，可以用arguments[i]读取。严格模式下，这属于语法错误。\n``` JavaScript\n　　\"use strict\";\n　　function f(a, a, b) { // 语法错误\n　　　　return ;\n　　}\n```\n### 4.7 禁止八进制表示法\n正常模式下，整数的第一位如果是0，表示这是八进制数，比如0100等于十进制的64。严格模式禁止这种表示法，整数第一位为0，将报错。\n``` JavaScript\n   \"use strict\";\n　　var n = 0100; // 语法错误\n```\n### 4.8 arguments对象的限制\narguments是函数的参数对象，严格模式对它的使用做了限制。\n（1）不允许对arguments赋值\n``` JavaScript\n　　\"use strict\";\n　　arguments++; // 语法错误\n　　var obj = { set p(arguments) { } }; // 语法错误\n　　try { } catch (arguments) { } // 语法错误\n　　function arguments() { } // 语法错误\n　　var f = new Function(\"arguments\", \"'use strict'; return 17;\"); // 语法错误\n```\n（2）arguments不再追踪参数的变化\n``` JavaScript\n　　function f(a) {\n　　　　a = 2;\n　　　　return [a, arguments[0]];\n　　}\n　　f(1); // 正常模式为[2,2]\n　　function f(a) {\n　　　　\"use strict\";\n　　　　a = 2;\n　　　　return [a, arguments[0]];\n　　}\n　　f(1); // 严格模式为[2,1]\n```\n（3）禁止使用arguments.callee\n这意味着，你无法在匿名函数内部调用自身了。\n``` JavaScript\n　　\"use strict\";\n　　var f = function() { return arguments.callee; };\n　　f(); // 报错\n```\n### 4.9 函数必须声明在顶层\n将来Javascript的新版本会引入\"块级作用域\"。为了与新版本接轨，严格模式只允许在全局作用域或函数作用域的顶层声明函数。也就是说，不允许在非函数的代码块内声明函数。\n``` JavaScript\n　　\"use strict\";\n　　if (true) {\n　　　　function f() { } // 语法错误\n　　}\n　　for (var i = 0; i < 5; i++) {\n　　　　function f2() { } // 语法错误\n　　}\n```\n### 4.10 保留字\n为了向将来Javascript的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。\n使用这些词作为变量名将会报错。\n``` JavaScript\n　　function package(protected) { // 语法错误\n　　　　\"use strict\";\n　　　　var implements; // 语法错误\n　　}\n```\n此外，ECMAscript第五版本身还规定了另一些保留字（class, enum, export, extends, import, super），以及各大浏览器自行增加的const保留字，也是不能作为变量名的。\n","source":"_posts/Javascript-严格模式.md","raw":"---\ntitle: Javascript 严格模式\ndate: 2016-02-01 11:08:22\ncategories: 学习笔记\ntags:\n- javascript\n- 学习笔记\n---\n除了正常运行模式，ECMAscript 5添加了第二种运行模式：\"[严格模式](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\"（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。\n## 设立\"严格模式\"的目的:\n``` JavaScript\n   - 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n　　- 消除代码运行的一些不安全之处，保证代码运行的安全；\n　　- 提高编译器效率，增加运行速度；\n　　- 为未来新版本的Javascript做好铺垫。\n```\n<!--more-->\n\"严格模式\"体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。\n另一方面，同样的代码，在\"严格模式\"中，可能会有不一样的运行结果；一些在\"正常模式\"下可以运行的语句，在\"严格模式\"下将不能运行。掌握这些内容，有助于更细致深入地理解Javascript，让你变成一个更好的程序员。\n本文将对\"严格模式\"做详细介绍。\n## 二、进入标志\n进入\"严格模式\"的标志，是下面这行语句：\n``` JavaScript\n　　\"use strict\";\n```\n老版本的浏览器会把它当作一行普通字符串，加以忽略。\n## 三、如何调用\n\"严格模式\"有两种调用方法，适用于不同的场合。\n### 3.1 针对整个脚本文件\n将\"use strict\"放在脚本文件的第一行，则整个脚本都将以\"严格模式\"运行。如果这行语句不在第一行，则无效，整个脚本以\"正常模式\"运行。如果不同模式的代码文件合并成一个文件，这一点需要特别注意。\n(严格地说，只要前面不是产生实际运行结果的语句，\"use strict\"可以不在第一行，比如直接跟在一个空的分号后面。)\n``` JavaScript\n　　<script>\n　　　　\"use strict\";\n　　　　console.log(\"这是严格模式。\");\n　　</script>\n　　<script>\n　　　　console.log(\"这是正常模式。\");\n　　</script>\n```\n上面的代码表示，一个网页中依次有两段Javascript代码。前一个script标签是严格模式，后一个不是。\n### 3.2 针对单个函数\n将\"use strict\"放在函数体的第一行，则整个函数以\"严格模式\"运行。\n``` JavaScript\n　　function strict(){\n　　　　\"use strict\";\n　　　　return \"这是严格模式。\";\n　　}\n　　function notStrict() {\n　　　　return \"这是正常模式。\";\n　　}\n```\n### 3.3 脚本文件的变通写法\n因为第一种调用方法不利于文件合并，所以更好的做法是，借用第二种方法，将整个脚本文件放在一个立即执行的匿名函数之中。\n``` JavaScript\n　　(function (){\n\n　　　　\"use strict\";\n　　　　// some code here\n\n　　 })();\n```\n## 四、语法和行为改变\n严格模式对Javascript的语法和行为，都做了一些改变。\n### 4.1 全局变量显式声明\n在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。\n``` JavaScript\n\"use strict\";\n　　v = 1; // 报错，v未声明\n　　for(i = 0; i < 2; i++) { // 报错，i未声明\n　　}\n```\n因此，严格模式下，变量都必须先用var命令声明，然后再使用。\n### 4.2 静态绑定\nJavascript语言的一个特点，就是允许\"动态绑定\"，即某些属性和方法到底属于哪一个对象，不是在编译时确定的，而是在运行时（runtime）确定的。\n严格模式对动态绑定做了一些限制。某些情况下，只允许静态绑定。也就是说，属性和方法到底归属哪个对象，在编译阶段就确定。这样做有利于编译效率的提高，也使得代码更容易阅读，更少出现意外。\n具体来说，涉及以下几个方面。\n（1）禁止使用with语句\n因为with语句无法在编译时就确定，属性到底归属哪个对象。\n``` JavaScript\n　　\"use strict\";\n　　var v = 1;\n　　with (o){ // 语法错误\n　　　　v = 2;\n　　}\n```\n（2）创设eval作用域\n正常模式下，Javascript语言有两种变量作用域（scope）：全局作用域和函数作用域。严格模式创设了第三种作用域：eval作用域。\n正常模式下，eval语句的作用域，取决于它处于全局作用域，还是处于函数作用域。严格模式下，eval语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于eval内部。\n``` JavaScript\n　　\"use strict\";\n　　var x = 2;\n　　console.info(eval(\"var x = 5; x\")); // 5\n　　console.info(x); // 2\n```\n### 4.3 增强的安全措施\n（1）禁止this关键字指向全局对象\n``` JavaScript\n　　function f(){\n　　　　return !this;\n　　}\n　　// 返回false，因为\"this\"指向全局对象，\"!this\"就是false\n　　function f(){\n　　　　\"use strict\";\n　　　　return !this;\n　　}\n```\n　　// 返回true，因为严格模式下，this的值为undefined，所以\"!this\"为true。\n因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。\n``` JavaScript\n　　function f(){\n　　　　\"use strict\";\n　　　　this.a = 1;\n　　};\n　　f();// 报错，this未定义\n```\n（2）禁止在函数内部遍历调用栈\n``` JavaScript\n　　function f1(){\n　　　　\"use strict\";\n　　　　f1.caller; // 报错\n　　　　f1.arguments; // 报错\n　　}\n　　f1();\n```\n### 4.4 禁止删除变量\n严格模式下无法删除变量。只有configurable设置为true的对象属性，才能被删除。\n``` JavaScript\n　　\"use strict\";\n　　var x;\n　　delete x; // 语法错误\n　　var o = Object.create(null, {'x': {\n　　　　　　value: 1,\n　　　　　　configurable: true\n　　}});\n　　delete o.x; // 删除成功\n```\n## 4.5 显式报错\n正常模式下，对一个对象的只读属性进行赋值，不会报错，只会默默地失败。严格模式下，将报错。\n``` JavaScript\n　　\"use strict\";\n\n　　var o = {};\n　　Object.defineProperty(o, \"v\", { value: 1, writable: false });\n　　o.v = 2; // 报错\n```\n严格模式下，对一个使用getter方法读取的属性进行赋值，会报错。\n``` JavaScript\n　　\"use strict\";\n\n　　var o = {\n\n　　　　get v() { return 1; }\n　　};\n　　o.v = 2; // 报错\n```\n严格模式下，对禁止扩展的对象添加新属性，会报错。\n``` JavaScript\n　　\"use strict\";\n　　var o = {};\n　　Object.preventExtensions(o);\n　　o.v = 1; // 报错\n```\n严格模式下，删除一个不可删除的属性，会报错。\n``` JavaScript\n　　\"use strict\";\n　　delete Object.prototype; // 报错\n```\n### 4.6 重名错误\n严格模式新增了一些语法错误。\n（1）对象不能有重名的属性\n正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。\n``` JavaScript\n　　\"use strict\";\n　　var o = {\n　　　　p: 1,\n　　　　p: 2\n　　}; // 语法错误\n```\n（2）函数不能有重名的参数\n正常模式下，如果函数有多个重名的参数，可以用arguments[i]读取。严格模式下，这属于语法错误。\n``` JavaScript\n　　\"use strict\";\n　　function f(a, a, b) { // 语法错误\n　　　　return ;\n　　}\n```\n### 4.7 禁止八进制表示法\n正常模式下，整数的第一位如果是0，表示这是八进制数，比如0100等于十进制的64。严格模式禁止这种表示法，整数第一位为0，将报错。\n``` JavaScript\n   \"use strict\";\n　　var n = 0100; // 语法错误\n```\n### 4.8 arguments对象的限制\narguments是函数的参数对象，严格模式对它的使用做了限制。\n（1）不允许对arguments赋值\n``` JavaScript\n　　\"use strict\";\n　　arguments++; // 语法错误\n　　var obj = { set p(arguments) { } }; // 语法错误\n　　try { } catch (arguments) { } // 语法错误\n　　function arguments() { } // 语法错误\n　　var f = new Function(\"arguments\", \"'use strict'; return 17;\"); // 语法错误\n```\n（2）arguments不再追踪参数的变化\n``` JavaScript\n　　function f(a) {\n　　　　a = 2;\n　　　　return [a, arguments[0]];\n　　}\n　　f(1); // 正常模式为[2,2]\n　　function f(a) {\n　　　　\"use strict\";\n　　　　a = 2;\n　　　　return [a, arguments[0]];\n　　}\n　　f(1); // 严格模式为[2,1]\n```\n（3）禁止使用arguments.callee\n这意味着，你无法在匿名函数内部调用自身了。\n``` JavaScript\n　　\"use strict\";\n　　var f = function() { return arguments.callee; };\n　　f(); // 报错\n```\n### 4.9 函数必须声明在顶层\n将来Javascript的新版本会引入\"块级作用域\"。为了与新版本接轨，严格模式只允许在全局作用域或函数作用域的顶层声明函数。也就是说，不允许在非函数的代码块内声明函数。\n``` JavaScript\n　　\"use strict\";\n　　if (true) {\n　　　　function f() { } // 语法错误\n　　}\n　　for (var i = 0; i < 5; i++) {\n　　　　function f2() { } // 语法错误\n　　}\n```\n### 4.10 保留字\n为了向将来Javascript的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。\n使用这些词作为变量名将会报错。\n``` JavaScript\n　　function package(protected) { // 语法错误\n　　　　\"use strict\";\n　　　　var implements; // 语法错误\n　　}\n```\n此外，ECMAscript第五版本身还规定了另一些保留字（class, enum, export, extends, import, super），以及各大浏览器自行增加的const保留字，也是不能作为变量名的。\n","slug":"Javascript-严格模式","published":1,"updated":"2020-02-15T19:07:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr6eisjy00003fwyipe621xc","content":"<p>除了正常运行模式，ECMAscript 5添加了第二种运行模式：”<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" target=\"_blank\" rel=\"noopener\">严格模式</a>“（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。</p>\n<h2 id=\"设立”严格模式”的目的\"><a href=\"#设立”严格模式”的目的\" class=\"headerlink\" title=\"设立”严格模式”的目的:\"></a>设立”严格模式”的目的:</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</span><br><span class=\"line\">　　- 消除代码运行的一些不安全之处，保证代码运行的安全；</span><br><span class=\"line\">　　- 提高编译器效率，增加运行速度；</span><br><span class=\"line\">　　- 为未来新版本的Javascript做好铺垫。</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>“严格模式”体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。<br>另一方面，同样的代码，在”严格模式”中，可能会有不一样的运行结果；一些在”正常模式”下可以运行的语句，在”严格模式”下将不能运行。掌握这些内容，有助于更细致深入地理解Javascript，让你变成一个更好的程序员。<br>本文将对”严格模式”做详细介绍。</p>\n<h2 id=\"二、进入标志\"><a href=\"#二、进入标志\" class=\"headerlink\" title=\"二、进入标志\"></a>二、进入标志</h2><p>进入”严格模式”的标志，是下面这行语句：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>老版本的浏览器会把它当作一行普通字符串，加以忽略。</p>\n<h2 id=\"三、如何调用\"><a href=\"#三、如何调用\" class=\"headerlink\" title=\"三、如何调用\"></a>三、如何调用</h2><p>“严格模式”有两种调用方法，适用于不同的场合。</p>\n<h3 id=\"3-1-针对整个脚本文件\"><a href=\"#3-1-针对整个脚本文件\" class=\"headerlink\" title=\"3.1 针对整个脚本文件\"></a>3.1 针对整个脚本文件</h3><p>将”use strict”放在脚本文件的第一行，则整个脚本都将以”严格模式”运行。如果这行语句不在第一行，则无效，整个脚本以”正常模式”运行。如果不同模式的代码文件合并成一个文件，这一点需要特别注意。<br>(严格地说，只要前面不是产生实际运行结果的语句，”use strict”可以不在第一行，比如直接跟在一个空的分号后面。)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　&lt;script&gt;</span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　<span class=\"built_in\">console</span>.log(<span class=\"string\">\"这是严格模式。\"</span>);</span><br><span class=\"line\">　　&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">　　&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">　　　　console.log(\"这是正常模式。\");</span></span><br><span class=\"line\"><span class=\"regexp\">　　&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码表示，一个网页中依次有两段Javascript代码。前一个script标签是严格模式，后一个不是。</p>\n<h3 id=\"3-2-针对单个函数\"><a href=\"#3-2-针对单个函数\" class=\"headerlink\" title=\"3.2 针对单个函数\"></a>3.2 针对单个函数</h3><p>将”use strict”放在函数体的第一行，则整个函数以”严格模式”运行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strict</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> <span class=\"string\">\"这是严格模式。\"</span>;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notStrict</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> <span class=\"string\">\"这是正常模式。\"</span>;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-3-脚本文件的变通写法\"><a href=\"#3-3-脚本文件的变通写法\" class=\"headerlink\" title=\"3.3 脚本文件的变通写法\"></a>3.3 脚本文件的变通写法</h3><p>因为第一种调用方法不利于文件合并，所以更好的做法是，借用第二种方法，将整个脚本文件放在一个立即执行的匿名函数之中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　<span class=\"comment\">// some code here</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　 &#125;)();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、语法和行为改变\"><a href=\"#四、语法和行为改变\" class=\"headerlink\" title=\"四、语法和行为改变\"></a>四、语法和行为改变</h2><p>严格模式对Javascript的语法和行为，都做了一些改变。</p>\n<h3 id=\"4-1-全局变量显式声明\"><a href=\"#4-1-全局变量显式声明\" class=\"headerlink\" title=\"4.1 全局变量显式声明\"></a>4.1 全局变量显式声明</h3><p>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\">　　v = <span class=\"number\">1</span>; <span class=\"comment\">// 报错，v未声明</span></span><br><span class=\"line\">　　<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123; <span class=\"comment\">// 报错，i未声明</span></span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因此，严格模式下，变量都必须先用var命令声明，然后再使用。</p>\n<h3 id=\"4-2-静态绑定\"><a href=\"#4-2-静态绑定\" class=\"headerlink\" title=\"4.2 静态绑定\"></a>4.2 静态绑定</h3><p>Javascript语言的一个特点，就是允许”动态绑定”，即某些属性和方法到底属于哪一个对象，不是在编译时确定的，而是在运行时（runtime）确定的。<br>严格模式对动态绑定做了一些限制。某些情况下，只允许静态绑定。也就是说，属性和方法到底归属哪个对象，在编译阶段就确定。这样做有利于编译效率的提高，也使得代码更容易阅读，更少出现意外。<br>具体来说，涉及以下几个方面。<br>（1）禁止使用with语句<br>因为with语句无法在编译时就确定，属性到底归属哪个对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> v = <span class=\"number\">1</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">with</span> (o)&#123; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　　　v = <span class=\"number\">2</span>;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<p>（2）创设eval作用域<br>正常模式下，Javascript语言有两种变量作用域（scope）：全局作用域和函数作用域。严格模式创设了第三种作用域：eval作用域。<br>正常模式下，eval语句的作用域，取决于它处于全局作用域，还是处于函数作用域。严格模式下，eval语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于eval内部。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.info(<span class=\"built_in\">eval</span>(<span class=\"string\">\"var x = 5; x\"</span>)); <span class=\"comment\">// 5</span></span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.info(x); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-3-增强的安全措施\"><a href=\"#4-3-增强的安全措施\" class=\"headerlink\" title=\"4.3 增强的安全措施\"></a>4.3 增强的安全措施</h3><p>（1）禁止this关键字指向全局对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"comment\">// 返回false，因为\"this\"指向全局对象，\"!this\"就是false</span></span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　// 返回true，因为严格模式下，this的值为undefined，所以”!this”为true。<br>因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">this</span>.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">　　f();<span class=\"comment\">// 报错，this未定义</span></span><br></pre></td></tr></table></figure></p>\n<p>（2）禁止在函数内部遍历调用栈<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　f1.caller; <span class=\"comment\">// 报错</span></span><br><span class=\"line\">　　　　f1.arguments; <span class=\"comment\">// 报错</span></span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　f1();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-4-禁止删除变量\"><a href=\"#4-4-禁止删除变量\" class=\"headerlink\" title=\"4.4 禁止删除变量\"></a>4.4 禁止删除变量</h3><p>严格模式下无法删除变量。只有configurable设置为true的对象属性，才能被删除。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> x;</span><br><span class=\"line\">　　<span class=\"keyword\">delete</span> x; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　<span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>, &#123;<span class=\"string\">'x'</span>: &#123;</span><br><span class=\"line\">　　　　　　value: <span class=\"number\">1</span>,</span><br><span class=\"line\">　　　　　　configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">　　&#125;&#125;);</span><br><span class=\"line\">　　<span class=\"keyword\">delete</span> o.x; <span class=\"comment\">// 删除成功</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-5-显式报错\"><a href=\"#4-5-显式报错\" class=\"headerlink\" title=\"4.5 显式报错\"></a>4.5 显式报错</h2><p>正常模式下，对一个对象的只读属性进行赋值，不会报错，只会默默地失败。严格模式下，将报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">　　<span class=\"built_in\">Object</span>.defineProperty(o, <span class=\"string\">\"v\"</span>, &#123; <span class=\"attr\">value</span>: <span class=\"number\">1</span>, <span class=\"attr\">writable</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">　　o.v = <span class=\"number\">2</span>; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></p>\n<p>严格模式下，对一个使用getter方法读取的属性进行赋值，会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"keyword\">get</span> v() &#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">　　o.v = <span class=\"number\">2</span>; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></p>\n<p>严格模式下，对禁止扩展的对象添加新属性，会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">　　<span class=\"built_in\">Object</span>.preventExtensions(o);</span><br><span class=\"line\">　　o.v = <span class=\"number\">1</span>; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></p>\n<p>严格模式下，删除一个不可删除的属性，会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">delete</span> <span class=\"built_in\">Object</span>.prototype; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-6-重名错误\"><a href=\"#4-6-重名错误\" class=\"headerlink\" title=\"4.6 重名错误\"></a>4.6 重名错误</h3><p>严格模式新增了一些语法错误。<br>（1）对象不能有重名的属性<br>正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">　　　　p: <span class=\"number\">1</span>,</span><br><span class=\"line\">　　　　p: <span class=\"number\">2</span></span><br><span class=\"line\">　　&#125;; <span class=\"comment\">// 语法错误</span></span><br></pre></td></tr></table></figure></p>\n<p>（2）函数不能有重名的参数<br>正常模式下，如果函数有多个重名的参数，可以用arguments[i]读取。严格模式下，这属于语法错误。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">a, a, b</span>) </span>&#123; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-7-禁止八进制表示法\"><a href=\"#4-7-禁止八进制表示法\" class=\"headerlink\" title=\"4.7 禁止八进制表示法\"></a>4.7 禁止八进制表示法</h3><p>正常模式下，整数的第一位如果是0，表示这是八进制数，比如0100等于十进制的64。严格模式禁止这种表示法，整数第一位为0，将报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> n = <span class=\"number\">0100</span>; <span class=\"comment\">// 语法错误</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-8-arguments对象的限制\"><a href=\"#4-8-arguments对象的限制\" class=\"headerlink\" title=\"4.8 arguments对象的限制\"></a>4.8 arguments对象的限制</h3><p>arguments是函数的参数对象，严格模式对它的使用做了限制。<br>（1）不允许对arguments赋值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"built_in\">arguments</span>++; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　<span class=\"keyword\">var</span> obj = &#123; <span class=\"keyword\">set</span> p(arguments) &#123; &#125; &#125;; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　<span class=\"keyword\">try</span> &#123; &#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">arguments</span>) &#123; &#125; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arguments</span>(<span class=\"params\"></span>) </span>&#123; &#125; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　<span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"arguments\"</span>, <span class=\"string\">\"'use strict'; return 17;\"</span>); <span class=\"comment\">// 语法错误</span></span><br></pre></td></tr></table></figure></p>\n<p>（2）arguments不再追踪参数的变化<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">　　　　a = <span class=\"number\">2</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> [a, <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]];</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　f(<span class=\"number\">1</span>); <span class=\"comment\">// 正常模式为[2,2]</span></span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　a = <span class=\"number\">2</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> [a, <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]];</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　f(<span class=\"number\">1</span>); <span class=\"comment\">// 严格模式为[2,1]</span></span><br></pre></td></tr></table></figure></p>\n<p>（3）禁止使用arguments.callee<br>这意味着，你无法在匿名函数内部调用自身了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>.callee; &#125;;</span><br><span class=\"line\">　　f(); <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-9-函数必须声明在顶层\"><a href=\"#4-9-函数必须声明在顶层\" class=\"headerlink\" title=\"4.9 函数必须声明在顶层\"></a>4.9 函数必须声明在顶层</h3><p>将来Javascript的新版本会引入”块级作用域”。为了与新版本接轨，严格模式只允许在全局作用域或函数作用域的顶层声明函数。也就是说，不允许在非函数的代码块内声明函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">　　　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; &#125; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">　　　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>) </span>&#123; &#125; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-10-保留字\"><a href=\"#4-10-保留字\" class=\"headerlink\" title=\"4.10 保留字\"></a>4.10 保留字</h3><p>为了向将来Javascript的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。<br>使用这些词作为变量名将会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">package</span>(<span class=\"params\">protected</span>) </span>&#123; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> implements; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此外，ECMAscript第五版本身还规定了另一些保留字（class, enum, export, extends, import, super），以及各大浏览器自行增加的const保留字，也是不能作为变量名的。</p>\n","site":{"data":{}},"excerpt":"<p>除了正常运行模式，ECMAscript 5添加了第二种运行模式：”<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" target=\"_blank\" rel=\"noopener\">严格模式</a>“（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。</p>\n<h2 id=\"设立”严格模式”的目的\"><a href=\"#设立”严格模式”的目的\" class=\"headerlink\" title=\"设立”严格模式”的目的:\"></a>设立”严格模式”的目的:</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</span><br><span class=\"line\">　　- 消除代码运行的一些不安全之处，保证代码运行的安全；</span><br><span class=\"line\">　　- 提高编译器效率，增加运行速度；</span><br><span class=\"line\">　　- 为未来新版本的Javascript做好铺垫。</span><br></pre></td></tr></table></figure>","more":"<p>“严格模式”体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。<br>另一方面，同样的代码，在”严格模式”中，可能会有不一样的运行结果；一些在”正常模式”下可以运行的语句，在”严格模式”下将不能运行。掌握这些内容，有助于更细致深入地理解Javascript，让你变成一个更好的程序员。<br>本文将对”严格模式”做详细介绍。</p>\n<h2 id=\"二、进入标志\"><a href=\"#二、进入标志\" class=\"headerlink\" title=\"二、进入标志\"></a>二、进入标志</h2><p>进入”严格模式”的标志，是下面这行语句：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>老版本的浏览器会把它当作一行普通字符串，加以忽略。</p>\n<h2 id=\"三、如何调用\"><a href=\"#三、如何调用\" class=\"headerlink\" title=\"三、如何调用\"></a>三、如何调用</h2><p>“严格模式”有两种调用方法，适用于不同的场合。</p>\n<h3 id=\"3-1-针对整个脚本文件\"><a href=\"#3-1-针对整个脚本文件\" class=\"headerlink\" title=\"3.1 针对整个脚本文件\"></a>3.1 针对整个脚本文件</h3><p>将”use strict”放在脚本文件的第一行，则整个脚本都将以”严格模式”运行。如果这行语句不在第一行，则无效，整个脚本以”正常模式”运行。如果不同模式的代码文件合并成一个文件，这一点需要特别注意。<br>(严格地说，只要前面不是产生实际运行结果的语句，”use strict”可以不在第一行，比如直接跟在一个空的分号后面。)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　&lt;script&gt;</span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　<span class=\"built_in\">console</span>.log(<span class=\"string\">\"这是严格模式。\"</span>);</span><br><span class=\"line\">　　&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">　　&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">　　　　console.log(\"这是正常模式。\");</span></span><br><span class=\"line\"><span class=\"regexp\">　　&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码表示，一个网页中依次有两段Javascript代码。前一个script标签是严格模式，后一个不是。</p>\n<h3 id=\"3-2-针对单个函数\"><a href=\"#3-2-针对单个函数\" class=\"headerlink\" title=\"3.2 针对单个函数\"></a>3.2 针对单个函数</h3><p>将”use strict”放在函数体的第一行，则整个函数以”严格模式”运行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strict</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> <span class=\"string\">\"这是严格模式。\"</span>;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notStrict</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> <span class=\"string\">\"这是正常模式。\"</span>;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-3-脚本文件的变通写法\"><a href=\"#3-3-脚本文件的变通写法\" class=\"headerlink\" title=\"3.3 脚本文件的变通写法\"></a>3.3 脚本文件的变通写法</h3><p>因为第一种调用方法不利于文件合并，所以更好的做法是，借用第二种方法，将整个脚本文件放在一个立即执行的匿名函数之中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　<span class=\"comment\">// some code here</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　 &#125;)();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、语法和行为改变\"><a href=\"#四、语法和行为改变\" class=\"headerlink\" title=\"四、语法和行为改变\"></a>四、语法和行为改变</h2><p>严格模式对Javascript的语法和行为，都做了一些改变。</p>\n<h3 id=\"4-1-全局变量显式声明\"><a href=\"#4-1-全局变量显式声明\" class=\"headerlink\" title=\"4.1 全局变量显式声明\"></a>4.1 全局变量显式声明</h3><p>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\">　　v = <span class=\"number\">1</span>; <span class=\"comment\">// 报错，v未声明</span></span><br><span class=\"line\">　　<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123; <span class=\"comment\">// 报错，i未声明</span></span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因此，严格模式下，变量都必须先用var命令声明，然后再使用。</p>\n<h3 id=\"4-2-静态绑定\"><a href=\"#4-2-静态绑定\" class=\"headerlink\" title=\"4.2 静态绑定\"></a>4.2 静态绑定</h3><p>Javascript语言的一个特点，就是允许”动态绑定”，即某些属性和方法到底属于哪一个对象，不是在编译时确定的，而是在运行时（runtime）确定的。<br>严格模式对动态绑定做了一些限制。某些情况下，只允许静态绑定。也就是说，属性和方法到底归属哪个对象，在编译阶段就确定。这样做有利于编译效率的提高，也使得代码更容易阅读，更少出现意外。<br>具体来说，涉及以下几个方面。<br>（1）禁止使用with语句<br>因为with语句无法在编译时就确定，属性到底归属哪个对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> v = <span class=\"number\">1</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">with</span> (o)&#123; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　　　v = <span class=\"number\">2</span>;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<p>（2）创设eval作用域<br>正常模式下，Javascript语言有两种变量作用域（scope）：全局作用域和函数作用域。严格模式创设了第三种作用域：eval作用域。<br>正常模式下，eval语句的作用域，取决于它处于全局作用域，还是处于函数作用域。严格模式下，eval语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于eval内部。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.info(<span class=\"built_in\">eval</span>(<span class=\"string\">\"var x = 5; x\"</span>)); <span class=\"comment\">// 5</span></span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.info(x); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-3-增强的安全措施\"><a href=\"#4-3-增强的安全措施\" class=\"headerlink\" title=\"4.3 增强的安全措施\"></a>4.3 增强的安全措施</h3><p>（1）禁止this关键字指向全局对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"comment\">// 返回false，因为\"this\"指向全局对象，\"!this\"就是false</span></span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　// 返回true，因为严格模式下，this的值为undefined，所以”!this”为true。<br>因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">this</span>.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">　　f();<span class=\"comment\">// 报错，this未定义</span></span><br></pre></td></tr></table></figure></p>\n<p>（2）禁止在函数内部遍历调用栈<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　f1.caller; <span class=\"comment\">// 报错</span></span><br><span class=\"line\">　　　　f1.arguments; <span class=\"comment\">// 报错</span></span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　f1();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-4-禁止删除变量\"><a href=\"#4-4-禁止删除变量\" class=\"headerlink\" title=\"4.4 禁止删除变量\"></a>4.4 禁止删除变量</h3><p>严格模式下无法删除变量。只有configurable设置为true的对象属性，才能被删除。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> x;</span><br><span class=\"line\">　　<span class=\"keyword\">delete</span> x; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　<span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>, &#123;<span class=\"string\">'x'</span>: &#123;</span><br><span class=\"line\">　　　　　　value: <span class=\"number\">1</span>,</span><br><span class=\"line\">　　　　　　configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">　　&#125;&#125;);</span><br><span class=\"line\">　　<span class=\"keyword\">delete</span> o.x; <span class=\"comment\">// 删除成功</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-5-显式报错\"><a href=\"#4-5-显式报错\" class=\"headerlink\" title=\"4.5 显式报错\"></a>4.5 显式报错</h2><p>正常模式下，对一个对象的只读属性进行赋值，不会报错，只会默默地失败。严格模式下，将报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">　　<span class=\"built_in\">Object</span>.defineProperty(o, <span class=\"string\">\"v\"</span>, &#123; <span class=\"attr\">value</span>: <span class=\"number\">1</span>, <span class=\"attr\">writable</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">　　o.v = <span class=\"number\">2</span>; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></p>\n<p>严格模式下，对一个使用getter方法读取的属性进行赋值，会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"keyword\">get</span> v() &#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">　　o.v = <span class=\"number\">2</span>; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></p>\n<p>严格模式下，对禁止扩展的对象添加新属性，会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">　　<span class=\"built_in\">Object</span>.preventExtensions(o);</span><br><span class=\"line\">　　o.v = <span class=\"number\">1</span>; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></p>\n<p>严格模式下，删除一个不可删除的属性，会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">delete</span> <span class=\"built_in\">Object</span>.prototype; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-6-重名错误\"><a href=\"#4-6-重名错误\" class=\"headerlink\" title=\"4.6 重名错误\"></a>4.6 重名错误</h3><p>严格模式新增了一些语法错误。<br>（1）对象不能有重名的属性<br>正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">　　　　p: <span class=\"number\">1</span>,</span><br><span class=\"line\">　　　　p: <span class=\"number\">2</span></span><br><span class=\"line\">　　&#125;; <span class=\"comment\">// 语法错误</span></span><br></pre></td></tr></table></figure></p>\n<p>（2）函数不能有重名的参数<br>正常模式下，如果函数有多个重名的参数，可以用arguments[i]读取。严格模式下，这属于语法错误。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">a, a, b</span>) </span>&#123; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-7-禁止八进制表示法\"><a href=\"#4-7-禁止八进制表示法\" class=\"headerlink\" title=\"4.7 禁止八进制表示法\"></a>4.7 禁止八进制表示法</h3><p>正常模式下，整数的第一位如果是0，表示这是八进制数，比如0100等于十进制的64。严格模式禁止这种表示法，整数第一位为0，将报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> n = <span class=\"number\">0100</span>; <span class=\"comment\">// 语法错误</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-8-arguments对象的限制\"><a href=\"#4-8-arguments对象的限制\" class=\"headerlink\" title=\"4.8 arguments对象的限制\"></a>4.8 arguments对象的限制</h3><p>arguments是函数的参数对象，严格模式对它的使用做了限制。<br>（1）不允许对arguments赋值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"built_in\">arguments</span>++; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　<span class=\"keyword\">var</span> obj = &#123; <span class=\"keyword\">set</span> p(arguments) &#123; &#125; &#125;; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　<span class=\"keyword\">try</span> &#123; &#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">arguments</span>) &#123; &#125; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arguments</span>(<span class=\"params\"></span>) </span>&#123; &#125; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　<span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"arguments\"</span>, <span class=\"string\">\"'use strict'; return 17;\"</span>); <span class=\"comment\">// 语法错误</span></span><br></pre></td></tr></table></figure></p>\n<p>（2）arguments不再追踪参数的变化<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">　　　　a = <span class=\"number\">2</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> [a, <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]];</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　f(<span class=\"number\">1</span>); <span class=\"comment\">// 正常模式为[2,2]</span></span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　a = <span class=\"number\">2</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> [a, <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]];</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　f(<span class=\"number\">1</span>); <span class=\"comment\">// 严格模式为[2,1]</span></span><br></pre></td></tr></table></figure></p>\n<p>（3）禁止使用arguments.callee<br>这意味着，你无法在匿名函数内部调用自身了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>.callee; &#125;;</span><br><span class=\"line\">　　f(); <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-9-函数必须声明在顶层\"><a href=\"#4-9-函数必须声明在顶层\" class=\"headerlink\" title=\"4.9 函数必须声明在顶层\"></a>4.9 函数必须声明在顶层</h3><p>将来Javascript的新版本会引入”块级作用域”。为了与新版本接轨，严格模式只允许在全局作用域或函数作用域的顶层声明函数。也就是说，不允许在非函数的代码块内声明函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">　　\"use strict\"</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">　　　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; &#125; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">　　　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>) </span>&#123; &#125; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-10-保留字\"><a href=\"#4-10-保留字\" class=\"headerlink\" title=\"4.10 保留字\"></a>4.10 保留字</h3><p>为了向将来Javascript的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。<br>使用这些词作为变量名将会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">package</span>(<span class=\"params\">protected</span>) </span>&#123; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\"><span class=\"meta\">　　　　\"use strict\"</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> implements; <span class=\"comment\">// 语法错误</span></span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此外，ECMAscript第五版本身还规定了另一些保留字（class, enum, export, extends, import, super），以及各大浏览器自行增加的const保留字，也是不能作为变量名的。</p>"},{"title":"Mac OS x 使用技巧","date":"2016-01-20T07:17:54.000Z","_content":"先附一张mac常用快捷键\n![](img/mac.jpg)\n\n# 常用高频的快捷键目录：\n<!-- more -->\n## 1浏览器上网（Safari & Chrome）：\nCommand + T = 这是基本全局打开新标签的标准键。会用的很多。新标签默认是在地址框输入，所以我通常是CT了之后直接输入要搜索的东西。\nCommand + L = 光标移到地址框\nCommand + R = 刷新页面\nCommand + + = 大屏幕的时候很实用，放大页面，基本也是全局型的。 0是恢复默认大小\nCommand + W = 关闭当前标签。不要和退出按错了。\nCommand + Q = 退出当前软件，其他软件也都可以用。\nCommand + D = 收藏当前页面\n空格 = 屏幕下滚一页\n\nSafari的恢复刚关闭标签就是熟悉的 Command + Z。Chrome是和打开差不多的，Command + Shift +T。Chrome可以按顺序恢复，但是Safari只能恢复最近的一个。\n\n## 2 Mac Mail：\n常用的：Command + Shift + n = 手动刷新邮箱查看新邮件。iOS的通知会快一些，这时候就手动刷下可以看到新邮件。\nCommand + n = 新建邮件\nCommand + Shift + r = 回复当前邮件\nCommand + Shift + f = 转发当前邮件\nCommand + Shift + d =发送邮件\ntab切换一下输入框，基本上邮件够用了。\n如果想看更多，大部分软件都会把相关的快捷键标到菜单上，对照一看就知道了。\n## 3全局：Finder操作，窗口大小调整,神奇翻译”（需用到Alfred的收费Workflow）\n\n\nMac的Finder有四种浏览方式，缩略图（调大小用Command + +/-）。\n这几个浏览方式用Command + 1/2/3/4切换。\n\n## 4截屏：\nCommand + Shift + 3/4 ＝ 3是全屏，4是分区。\n\n参考文献[Mac OS X 使用技巧](http://www.zhihu.com/question/20021861)\n","source":"_posts/Mac-OS-x-使用技巧.md","raw":"---\ntitle: Mac OS x 使用技巧\ndate: 2016-01-20 15:17:54\ncategories: 技术摘录\ntags:\n  - mac技巧\n---\n先附一张mac常用快捷键\n![](img/mac.jpg)\n\n# 常用高频的快捷键目录：\n<!-- more -->\n## 1浏览器上网（Safari & Chrome）：\nCommand + T = 这是基本全局打开新标签的标准键。会用的很多。新标签默认是在地址框输入，所以我通常是CT了之后直接输入要搜索的东西。\nCommand + L = 光标移到地址框\nCommand + R = 刷新页面\nCommand + + = 大屏幕的时候很实用，放大页面，基本也是全局型的。 0是恢复默认大小\nCommand + W = 关闭当前标签。不要和退出按错了。\nCommand + Q = 退出当前软件，其他软件也都可以用。\nCommand + D = 收藏当前页面\n空格 = 屏幕下滚一页\n\nSafari的恢复刚关闭标签就是熟悉的 Command + Z。Chrome是和打开差不多的，Command + Shift +T。Chrome可以按顺序恢复，但是Safari只能恢复最近的一个。\n\n## 2 Mac Mail：\n常用的：Command + Shift + n = 手动刷新邮箱查看新邮件。iOS的通知会快一些，这时候就手动刷下可以看到新邮件。\nCommand + n = 新建邮件\nCommand + Shift + r = 回复当前邮件\nCommand + Shift + f = 转发当前邮件\nCommand + Shift + d =发送邮件\ntab切换一下输入框，基本上邮件够用了。\n如果想看更多，大部分软件都会把相关的快捷键标到菜单上，对照一看就知道了。\n## 3全局：Finder操作，窗口大小调整,神奇翻译”（需用到Alfred的收费Workflow）\n\n\nMac的Finder有四种浏览方式，缩略图（调大小用Command + +/-）。\n这几个浏览方式用Command + 1/2/3/4切换。\n\n## 4截屏：\nCommand + Shift + 3/4 ＝ 3是全屏，4是分区。\n\n参考文献[Mac OS X 使用技巧](http://www.zhihu.com/question/20021861)\n","slug":"Mac-OS-x-使用技巧","published":1,"updated":"2020-02-15T19:07:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr6eisk400013fwyx1yqp837","content":"<p>先附一张mac常用快捷键<br><img src=\"img/mac.jpg\" alt></p>\n<h1 id=\"常用高频的快捷键目录：\"><a href=\"#常用高频的快捷键目录：\" class=\"headerlink\" title=\"常用高频的快捷键目录：\"></a>常用高频的快捷键目录：</h1><a id=\"more\"></a>\n<h2 id=\"1浏览器上网（Safari-amp-Chrome）：\"><a href=\"#1浏览器上网（Safari-amp-Chrome）：\" class=\"headerlink\" title=\"1浏览器上网（Safari &amp; Chrome）：\"></a>1浏览器上网（Safari &amp; Chrome）：</h2><p>Command + T = 这是基本全局打开新标签的标准键。会用的很多。新标签默认是在地址框输入，所以我通常是CT了之后直接输入要搜索的东西。<br>Command + L = 光标移到地址框<br>Command + R = 刷新页面<br>Command + + = 大屏幕的时候很实用，放大页面，基本也是全局型的。 0是恢复默认大小<br>Command + W = 关闭当前标签。不要和退出按错了。<br>Command + Q = 退出当前软件，其他软件也都可以用。<br>Command + D = 收藏当前页面<br>空格 = 屏幕下滚一页</p>\n<p>Safari的恢复刚关闭标签就是熟悉的 Command + Z。Chrome是和打开差不多的，Command + Shift +T。Chrome可以按顺序恢复，但是Safari只能恢复最近的一个。</p>\n<h2 id=\"2-Mac-Mail：\"><a href=\"#2-Mac-Mail：\" class=\"headerlink\" title=\"2 Mac Mail：\"></a>2 Mac Mail：</h2><p>常用的：Command + Shift + n = 手动刷新邮箱查看新邮件。iOS的通知会快一些，这时候就手动刷下可以看到新邮件。<br>Command + n = 新建邮件<br>Command + Shift + r = 回复当前邮件<br>Command + Shift + f = 转发当前邮件<br>Command + Shift + d =发送邮件<br>tab切换一下输入框，基本上邮件够用了。<br>如果想看更多，大部分软件都会把相关的快捷键标到菜单上，对照一看就知道了。</p>\n<h2 id=\"3全局：Finder操作，窗口大小调整-神奇翻译”（需用到Alfred的收费Workflow）\"><a href=\"#3全局：Finder操作，窗口大小调整-神奇翻译”（需用到Alfred的收费Workflow）\" class=\"headerlink\" title=\"3全局：Finder操作，窗口大小调整,神奇翻译”（需用到Alfred的收费Workflow）\"></a>3全局：Finder操作，窗口大小调整,神奇翻译”（需用到Alfred的收费Workflow）</h2><p>Mac的Finder有四种浏览方式，缩略图（调大小用Command + +/-）。<br>这几个浏览方式用Command + 1/2/3/4切换。</p>\n<h2 id=\"4截屏：\"><a href=\"#4截屏：\" class=\"headerlink\" title=\"4截屏：\"></a>4截屏：</h2><p>Command + Shift + 3/4 ＝ 3是全屏，4是分区。</p>\n<p>参考文献<a href=\"http://www.zhihu.com/question/20021861\" target=\"_blank\" rel=\"noopener\">Mac OS X 使用技巧</a></p>\n","site":{"data":{}},"excerpt":"<p>先附一张mac常用快捷键<br><img src=\"img/mac.jpg\" alt></p>\n<h1 id=\"常用高频的快捷键目录：\"><a href=\"#常用高频的快捷键目录：\" class=\"headerlink\" title=\"常用高频的快捷键目录：\"></a>常用高频的快捷键目录：</h1>","more":"<h2 id=\"1浏览器上网（Safari-amp-Chrome）：\"><a href=\"#1浏览器上网（Safari-amp-Chrome）：\" class=\"headerlink\" title=\"1浏览器上网（Safari &amp; Chrome）：\"></a>1浏览器上网（Safari &amp; Chrome）：</h2><p>Command + T = 这是基本全局打开新标签的标准键。会用的很多。新标签默认是在地址框输入，所以我通常是CT了之后直接输入要搜索的东西。<br>Command + L = 光标移到地址框<br>Command + R = 刷新页面<br>Command + + = 大屏幕的时候很实用，放大页面，基本也是全局型的。 0是恢复默认大小<br>Command + W = 关闭当前标签。不要和退出按错了。<br>Command + Q = 退出当前软件，其他软件也都可以用。<br>Command + D = 收藏当前页面<br>空格 = 屏幕下滚一页</p>\n<p>Safari的恢复刚关闭标签就是熟悉的 Command + Z。Chrome是和打开差不多的，Command + Shift +T。Chrome可以按顺序恢复，但是Safari只能恢复最近的一个。</p>\n<h2 id=\"2-Mac-Mail：\"><a href=\"#2-Mac-Mail：\" class=\"headerlink\" title=\"2 Mac Mail：\"></a>2 Mac Mail：</h2><p>常用的：Command + Shift + n = 手动刷新邮箱查看新邮件。iOS的通知会快一些，这时候就手动刷下可以看到新邮件。<br>Command + n = 新建邮件<br>Command + Shift + r = 回复当前邮件<br>Command + Shift + f = 转发当前邮件<br>Command + Shift + d =发送邮件<br>tab切换一下输入框，基本上邮件够用了。<br>如果想看更多，大部分软件都会把相关的快捷键标到菜单上，对照一看就知道了。</p>\n<h2 id=\"3全局：Finder操作，窗口大小调整-神奇翻译”（需用到Alfred的收费Workflow）\"><a href=\"#3全局：Finder操作，窗口大小调整-神奇翻译”（需用到Alfred的收费Workflow）\" class=\"headerlink\" title=\"3全局：Finder操作，窗口大小调整,神奇翻译”（需用到Alfred的收费Workflow）\"></a>3全局：Finder操作，窗口大小调整,神奇翻译”（需用到Alfred的收费Workflow）</h2><p>Mac的Finder有四种浏览方式，缩略图（调大小用Command + +/-）。<br>这几个浏览方式用Command + 1/2/3/4切换。</p>\n<h2 id=\"4截屏：\"><a href=\"#4截屏：\" class=\"headerlink\" title=\"4截屏：\"></a>4截屏：</h2><p>Command + Shift + 3/4 ＝ 3是全屏，4是分区。</p>\n<p>参考文献<a href=\"http://www.zhihu.com/question/20021861\" target=\"_blank\" rel=\"noopener\">Mac OS X 使用技巧</a></p>"},{"title":"VIM学习笔记","date":"2016-01-19T09:17:27.000Z","updated":"2020-02-15T19:07:02.000Z","comments":1,"_content":"首先我们知道在命令行中输入vim,进入vim文编辑器。\n可能有人会问vim是什么？vim是多模式文本编辑器也可以说是跨平台的文本编辑器，什么平台都可以用，windows，linux，unix，etc.\n由vi更新而来 VIM 是vi 的加强版.不仅兼容vi的所有指令，而且还有一些新的特性在里面。\n安装vim之后会有个vimrc文件，像高亮、字体等等所有的设置都可以写在里面的，感兴趣可以去网上找找vim配置文件.\n先介绍一些非常基础的vim知识供学习参考。\n\nvim有三种工作模式：插入模式 (Insert mode)、命令模式(Command mode) 、行模式 (EX Commands mode)。\n插入模式就像我们平时使用记事本时一样，可以随意的输入文本，\n基本没有什么可说的。主要是其它两个模式.首先了解下三个模式的相互转换：\n<!-- more -->\n\n# 三个模式的相互转换。\n打开一个vim，它的默认模式是命令模式，\n输入a或i等字符后可以转为插入模式；\n(按一下i键,下端显示 --INSERT--)\n命令模式输入:可以转为行模式；\n行模式也是在输入Esc后可以返回命令模式。\n注意：行模式和插入模式是不能直接相互转换的，必须能过命令模式转换。\n（下面的命令如果是以冒号开头的就是默认是行模式命令，否则是命令模式命令）\nhjkl四个键相当于←↓↑→，可以在命令模式下使用它们来上下左右移动光标。\n（特别注意不要再使用小键盘的上下左右来移动光标了，不然就失去使用vim的主要原因之一了，这是刚使用vim时最不容易改变的习惯）\n\n\n## 1. 普通模式\n\n在shell中直接打vim filename就会进入普通模式。在这个状态，我们可以通过不同的按键对文件进行操作和切换到其它模式。按“:”可切换到命令模式，按i，o，a可进入编辑模。\n\n### 1.1. 编辑\n\ni\n进入编辑模式。\n\no\n在当前位置下插入一空行，进入编辑模式，光标位于空行的最开头。\n\na\n光标后移一个字符，进入编辑模式。\n\nb\n是跳到单词的开头\n\ne\n是跳到单词的结尾\n\nv\n这入可视模式，可用高亮的色块选择内容。\n\nx or DEL键\n删除当前字符，删除内容保存在缓冲区。\n\nxp\n左右字符互换。\n\ndd\n删除当前行，删除内容保存在缓冲区。\n\nddp\n上下两行的内容互换。\n\nd$\n删除当前光标至行尾的所有内容。\n\ndG\n删除从当前行至文件未尾的所有行。\n\nu\nundo。\n\nw\n是跳到下一个单词的开头\n\nv\n进地visual模式，移动光标可选择文本。\n\ny\n把当前行复制到缓冲区中。\n\np\n把缓冲区中的文本插入到当前位置。\n\n\"ay\n把当前行复制到a缓冲区。可用26个字母命名多个缓冲区。\n\n\"ap\n把a缓冲区中的文本插入当前位置。\n\nJ\n上下两行合并成一行。\n\n.\n英文句点的作用是重复执行上次执行的命令，如你按了\"ap插入a缓冲区的内容，那你就可按\".\"来重复这个操作。\n\n### 1.2. 光标移动\n\nh，j，k，l\n在vim中，除了可使用光标键在移动光标外，还有一种更方便的光标移动方式。就是使用h，j，k，l这四个键来移动光标。h控制光标左移，j控制光标下移，k控制光标上移，l控制光标右移。通过使用这四个字母键就可使我们的手不用移动即可控制光标的移动。刚开始使用可能会有些不习惯，但熟练使用后你会发觉你的输入速度提高不少，强烈建议喜欢vim的朋友使用。\n\n$\n光标移动到行尾。\n\nG\n光标移动到文档末尾。\n\n0\n移动到此行的一个字符处\n\nH,L\nH控制光标移动到当前屏幕头，L控制光标移动到当前屏幕尾。\n\n{，}\n{控制光标上移一个段落，}控制光标下移一个段落\n\nctrl+f\n向前翻动一页\n\nctrl+b\n前后翻动一页\n### 1.3 查找查换\n  /word                   \n  在光标之后查找一个word的字符串\n\n  ？word                  \n  在光标之前查找一个word的字符串\n\n  ：n1,n2s/word1/word2/g  \n  在第n1行和n2行之间查找word1,并将word1替换为word2\n\n  :1,$s/word1/word2/g     \n  从第一行到最后一行查找word1并替换为word2\n\n  :1,$s/word1/word2/gc    \n  从第一行到最后一行查找word1并替换为word2,在替换前显示提示符，让用户确认\n\n### 1.4 删除 复制 粘贴  \nx，X      \nx向后删除一个字符  X向前删除一个字符  \n\nnx        \n向后删除n个字符\n\ndd        \n删除光标所在的整列\n\nndd       \n删除光标所在列的向下n列\n\nyy        \n复制光标所在行  \n\nnyy       \n复制光标所在行的向下n行\n\np ，P      \np复制的数据粘贴在光标下一行，P上一行\n\nu         \n恢复上一个动作\n\n## 2. 编辑模式\n\nESC      \n退出编辑状态。返回一般模式\n\ni ，I    \n插入：在当前光标所在处插入输入的文字，已存在的字符会向后退 \n\na，A     \n添加 ：由当前光标所在处的下一个字符开始输入，已存在的字符向后退 \n\no ，O    \n插入新的一行，从光标所在处的下一行行首开始输入 \n\nr，R     \n替换：r会替换光标所指的那一个字符，R会一直替换光标所指的文字，知道案下esc       \n\n## 3. 命令模式\n\n在普通模式上按“:”就可进入命令模式，在左下屏幕我们输入一些操作指令。\n\n:q!\n不保存退出vim。\n\n:w\n保存文档，但不退出vim。\n\n:w！   \n若文件为只读，强制写入\n\n:q       \n推出vi   \n\n:w ［filename］\n\n保存为另一文件\n\n:wq\n是保存并退出文件\n\n:x\n保存退出vim。\n\n:! command\n运行shell命令。\n\n:e filename\n编辑/打开一个文件\n\n:s/emacs/vim\n在当前行中把第一个emacs替换成vim。\n\n:s/emacs/vim/g\n把当前行中所有的emacs替换成vim。\n\n:%s/emacs/vim/g\n在全局范围内把emacs替换成vim。\n\n:reg\n列出缓冲区内容。\n\n:set all\n列出所有参数的配置情况。\n\n:tabe\n新建一个标签页。\n\n:tabn or :tabp\n切换到下一个\\上一个标签页。\n\n:close\n关闭当前标签页。\n\n:qa\n关闭所有标签页退出。\n\n由于水平有限，加之行文匆忙，文中很可能错误不断，希望大家不要见怪，多批评指正。\n另附两个vim常用命令链接供参考\n[VIM常用命令](http://blog.css6.com/2014/12/18/VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/)\n[VIM 常用快捷键](http://www.cnblogs.com/abeen/archive/2010/07/28/1786594.html)\n","source":"_posts/VIM学习笔记.md","raw":"---\ntitle: VIM学习笔记\ndate: 2016-01-19 17:17:27\nupdated:\ncomments: true\ncategories: 技术摘录\ntags:\n - vim\n - 学习笔记\n---\n首先我们知道在命令行中输入vim,进入vim文编辑器。\n可能有人会问vim是什么？vim是多模式文本编辑器也可以说是跨平台的文本编辑器，什么平台都可以用，windows，linux，unix，etc.\n由vi更新而来 VIM 是vi 的加强版.不仅兼容vi的所有指令，而且还有一些新的特性在里面。\n安装vim之后会有个vimrc文件，像高亮、字体等等所有的设置都可以写在里面的，感兴趣可以去网上找找vim配置文件.\n先介绍一些非常基础的vim知识供学习参考。\n\nvim有三种工作模式：插入模式 (Insert mode)、命令模式(Command mode) 、行模式 (EX Commands mode)。\n插入模式就像我们平时使用记事本时一样，可以随意的输入文本，\n基本没有什么可说的。主要是其它两个模式.首先了解下三个模式的相互转换：\n<!-- more -->\n\n# 三个模式的相互转换。\n打开一个vim，它的默认模式是命令模式，\n输入a或i等字符后可以转为插入模式；\n(按一下i键,下端显示 --INSERT--)\n命令模式输入:可以转为行模式；\n行模式也是在输入Esc后可以返回命令模式。\n注意：行模式和插入模式是不能直接相互转换的，必须能过命令模式转换。\n（下面的命令如果是以冒号开头的就是默认是行模式命令，否则是命令模式命令）\nhjkl四个键相当于←↓↑→，可以在命令模式下使用它们来上下左右移动光标。\n（特别注意不要再使用小键盘的上下左右来移动光标了，不然就失去使用vim的主要原因之一了，这是刚使用vim时最不容易改变的习惯）\n\n\n## 1. 普通模式\n\n在shell中直接打vim filename就会进入普通模式。在这个状态，我们可以通过不同的按键对文件进行操作和切换到其它模式。按“:”可切换到命令模式，按i，o，a可进入编辑模。\n\n### 1.1. 编辑\n\ni\n进入编辑模式。\n\no\n在当前位置下插入一空行，进入编辑模式，光标位于空行的最开头。\n\na\n光标后移一个字符，进入编辑模式。\n\nb\n是跳到单词的开头\n\ne\n是跳到单词的结尾\n\nv\n这入可视模式，可用高亮的色块选择内容。\n\nx or DEL键\n删除当前字符，删除内容保存在缓冲区。\n\nxp\n左右字符互换。\n\ndd\n删除当前行，删除内容保存在缓冲区。\n\nddp\n上下两行的内容互换。\n\nd$\n删除当前光标至行尾的所有内容。\n\ndG\n删除从当前行至文件未尾的所有行。\n\nu\nundo。\n\nw\n是跳到下一个单词的开头\n\nv\n进地visual模式，移动光标可选择文本。\n\ny\n把当前行复制到缓冲区中。\n\np\n把缓冲区中的文本插入到当前位置。\n\n\"ay\n把当前行复制到a缓冲区。可用26个字母命名多个缓冲区。\n\n\"ap\n把a缓冲区中的文本插入当前位置。\n\nJ\n上下两行合并成一行。\n\n.\n英文句点的作用是重复执行上次执行的命令，如你按了\"ap插入a缓冲区的内容，那你就可按\".\"来重复这个操作。\n\n### 1.2. 光标移动\n\nh，j，k，l\n在vim中，除了可使用光标键在移动光标外，还有一种更方便的光标移动方式。就是使用h，j，k，l这四个键来移动光标。h控制光标左移，j控制光标下移，k控制光标上移，l控制光标右移。通过使用这四个字母键就可使我们的手不用移动即可控制光标的移动。刚开始使用可能会有些不习惯，但熟练使用后你会发觉你的输入速度提高不少，强烈建议喜欢vim的朋友使用。\n\n$\n光标移动到行尾。\n\nG\n光标移动到文档末尾。\n\n0\n移动到此行的一个字符处\n\nH,L\nH控制光标移动到当前屏幕头，L控制光标移动到当前屏幕尾。\n\n{，}\n{控制光标上移一个段落，}控制光标下移一个段落\n\nctrl+f\n向前翻动一页\n\nctrl+b\n前后翻动一页\n### 1.3 查找查换\n  /word                   \n  在光标之后查找一个word的字符串\n\n  ？word                  \n  在光标之前查找一个word的字符串\n\n  ：n1,n2s/word1/word2/g  \n  在第n1行和n2行之间查找word1,并将word1替换为word2\n\n  :1,$s/word1/word2/g     \n  从第一行到最后一行查找word1并替换为word2\n\n  :1,$s/word1/word2/gc    \n  从第一行到最后一行查找word1并替换为word2,在替换前显示提示符，让用户确认\n\n### 1.4 删除 复制 粘贴  \nx，X      \nx向后删除一个字符  X向前删除一个字符  \n\nnx        \n向后删除n个字符\n\ndd        \n删除光标所在的整列\n\nndd       \n删除光标所在列的向下n列\n\nyy        \n复制光标所在行  \n\nnyy       \n复制光标所在行的向下n行\n\np ，P      \np复制的数据粘贴在光标下一行，P上一行\n\nu         \n恢复上一个动作\n\n## 2. 编辑模式\n\nESC      \n退出编辑状态。返回一般模式\n\ni ，I    \n插入：在当前光标所在处插入输入的文字，已存在的字符会向后退 \n\na，A     \n添加 ：由当前光标所在处的下一个字符开始输入，已存在的字符向后退 \n\no ，O    \n插入新的一行，从光标所在处的下一行行首开始输入 \n\nr，R     \n替换：r会替换光标所指的那一个字符，R会一直替换光标所指的文字，知道案下esc       \n\n## 3. 命令模式\n\n在普通模式上按“:”就可进入命令模式，在左下屏幕我们输入一些操作指令。\n\n:q!\n不保存退出vim。\n\n:w\n保存文档，但不退出vim。\n\n:w！   \n若文件为只读，强制写入\n\n:q       \n推出vi   \n\n:w ［filename］\n\n保存为另一文件\n\n:wq\n是保存并退出文件\n\n:x\n保存退出vim。\n\n:! command\n运行shell命令。\n\n:e filename\n编辑/打开一个文件\n\n:s/emacs/vim\n在当前行中把第一个emacs替换成vim。\n\n:s/emacs/vim/g\n把当前行中所有的emacs替换成vim。\n\n:%s/emacs/vim/g\n在全局范围内把emacs替换成vim。\n\n:reg\n列出缓冲区内容。\n\n:set all\n列出所有参数的配置情况。\n\n:tabe\n新建一个标签页。\n\n:tabn or :tabp\n切换到下一个\\上一个标签页。\n\n:close\n关闭当前标签页。\n\n:qa\n关闭所有标签页退出。\n\n由于水平有限，加之行文匆忙，文中很可能错误不断，希望大家不要见怪，多批评指正。\n另附两个vim常用命令链接供参考\n[VIM常用命令](http://blog.css6.com/2014/12/18/VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/)\n[VIM 常用快捷键](http://www.cnblogs.com/abeen/archive/2010/07/28/1786594.html)\n","slug":"VIM学习笔记","published":1,"layout":"post","photos":[],"link":"","_id":"ckr6eisk900043fwyp8tby9rf","content":"<p>首先我们知道在命令行中输入vim,进入vim文编辑器。<br>可能有人会问vim是什么？vim是多模式文本编辑器也可以说是跨平台的文本编辑器，什么平台都可以用，windows，linux，unix，etc.<br>由vi更新而来 VIM 是vi 的加强版.不仅兼容vi的所有指令，而且还有一些新的特性在里面。<br>安装vim之后会有个vimrc文件，像高亮、字体等等所有的设置都可以写在里面的，感兴趣可以去网上找找vim配置文件.<br>先介绍一些非常基础的vim知识供学习参考。</p>\n<p>vim有三种工作模式：插入模式 (Insert mode)、命令模式(Command mode) 、行模式 (EX Commands mode)。<br>插入模式就像我们平时使用记事本时一样，可以随意的输入文本，<br>基本没有什么可说的。主要是其它两个模式.首先了解下三个模式的相互转换：<br><a id=\"more\"></a></p>\n<h1 id=\"三个模式的相互转换。\"><a href=\"#三个模式的相互转换。\" class=\"headerlink\" title=\"三个模式的相互转换。\"></a>三个模式的相互转换。</h1><p>打开一个vim，它的默认模式是命令模式，<br>输入a或i等字符后可以转为插入模式；<br>(按一下i键,下端显示 –INSERT–)<br>命令模式输入:可以转为行模式；<br>行模式也是在输入Esc后可以返回命令模式。<br>注意：行模式和插入模式是不能直接相互转换的，必须能过命令模式转换。<br>（下面的命令如果是以冒号开头的就是默认是行模式命令，否则是命令模式命令）<br>hjkl四个键相当于←↓↑→，可以在命令模式下使用它们来上下左右移动光标。<br>（特别注意不要再使用小键盘的上下左右来移动光标了，不然就失去使用vim的主要原因之一了，这是刚使用vim时最不容易改变的习惯）</p>\n<h2 id=\"1-普通模式\"><a href=\"#1-普通模式\" class=\"headerlink\" title=\"1. 普通模式\"></a>1. 普通模式</h2><p>在shell中直接打vim filename就会进入普通模式。在这个状态，我们可以通过不同的按键对文件进行操作和切换到其它模式。按“:”可切换到命令模式，按i，o，a可进入编辑模。</p>\n<h3 id=\"1-1-编辑\"><a href=\"#1-1-编辑\" class=\"headerlink\" title=\"1.1. 编辑\"></a>1.1. 编辑</h3><p>i<br>进入编辑模式。</p>\n<p>o<br>在当前位置下插入一空行，进入编辑模式，光标位于空行的最开头。</p>\n<p>a<br>光标后移一个字符，进入编辑模式。</p>\n<p>b<br>是跳到单词的开头</p>\n<p>e<br>是跳到单词的结尾</p>\n<p>v<br>这入可视模式，可用高亮的色块选择内容。</p>\n<p>x or DEL键<br>删除当前字符，删除内容保存在缓冲区。</p>\n<p>xp<br>左右字符互换。</p>\n<p>dd<br>删除当前行，删除内容保存在缓冲区。</p>\n<p>ddp<br>上下两行的内容互换。</p>\n<p>d$<br>删除当前光标至行尾的所有内容。</p>\n<p>dG<br>删除从当前行至文件未尾的所有行。</p>\n<p>u<br>undo。</p>\n<p>w<br>是跳到下一个单词的开头</p>\n<p>v<br>进地visual模式，移动光标可选择文本。</p>\n<p>y<br>把当前行复制到缓冲区中。</p>\n<p>p<br>把缓冲区中的文本插入到当前位置。</p>\n<p>“ay<br>把当前行复制到a缓冲区。可用26个字母命名多个缓冲区。</p>\n<p>“ap<br>把a缓冲区中的文本插入当前位置。</p>\n<p>J<br>上下两行合并成一行。</p>\n<p>.<br>英文句点的作用是重复执行上次执行的命令，如你按了”ap插入a缓冲区的内容，那你就可按”.”来重复这个操作。</p>\n<h3 id=\"1-2-光标移动\"><a href=\"#1-2-光标移动\" class=\"headerlink\" title=\"1.2. 光标移动\"></a>1.2. 光标移动</h3><p>h，j，k，l<br>在vim中，除了可使用光标键在移动光标外，还有一种更方便的光标移动方式。就是使用h，j，k，l这四个键来移动光标。h控制光标左移，j控制光标下移，k控制光标上移，l控制光标右移。通过使用这四个字母键就可使我们的手不用移动即可控制光标的移动。刚开始使用可能会有些不习惯，但熟练使用后你会发觉你的输入速度提高不少，强烈建议喜欢vim的朋友使用。</p>\n<p>$<br>光标移动到行尾。</p>\n<p>G<br>光标移动到文档末尾。</p>\n<p>0<br>移动到此行的一个字符处</p>\n<p>H,L<br>H控制光标移动到当前屏幕头，L控制光标移动到当前屏幕尾。</p>\n<p>{，}<br>{控制光标上移一个段落，}控制光标下移一个段落</p>\n<p>ctrl+f<br>向前翻动一页</p>\n<p>ctrl+b<br>前后翻动一页</p>\n<h3 id=\"1-3-查找查换\"><a href=\"#1-3-查找查换\" class=\"headerlink\" title=\"1.3 查找查换\"></a>1.3 查找查换</h3><p>  /word<br>  在光标之后查找一个word的字符串</p>\n<p>  ？word<br>  在光标之前查找一个word的字符串</p>\n<p>  ：n1,n2s/word1/word2/g<br>  在第n1行和n2行之间查找word1,并将word1替换为word2</p>\n<p>  :1,$s/word1/word2/g<br>  从第一行到最后一行查找word1并替换为word2</p>\n<p>  :1,$s/word1/word2/gc<br>  从第一行到最后一行查找word1并替换为word2,在替换前显示提示符，让用户确认</p>\n<h3 id=\"1-4-删除-复制-粘贴\"><a href=\"#1-4-删除-复制-粘贴\" class=\"headerlink\" title=\"1.4 删除 复制 粘贴\"></a>1.4 删除 复制 粘贴</h3><p>x，X<br>x向后删除一个字符  X向前删除一个字符  </p>\n<p>nx<br>向后删除n个字符</p>\n<p>dd<br>删除光标所在的整列</p>\n<p>ndd<br>删除光标所在列的向下n列</p>\n<p>yy<br>复制光标所在行  </p>\n<p>nyy<br>复制光标所在行的向下n行</p>\n<p>p ，P<br>p复制的数据粘贴在光标下一行，P上一行</p>\n<p>u<br>恢复上一个动作</p>\n<h2 id=\"2-编辑模式\"><a href=\"#2-编辑模式\" class=\"headerlink\" title=\"2. 编辑模式\"></a>2. 编辑模式</h2><p>ESC<br>退出编辑状态。返回一般模式</p>\n<p>i ，I<br>插入：在当前光标所在处插入输入的文字，已存在的字符会向后退 </p>\n<p>a，A<br>添加 ：由当前光标所在处的下一个字符开始输入，已存在的字符向后退 </p>\n<p>o ，O<br>插入新的一行，从光标所在处的下一行行首开始输入 </p>\n<p>r，R<br>替换：r会替换光标所指的那一个字符，R会一直替换光标所指的文字，知道案下esc       </p>\n<h2 id=\"3-命令模式\"><a href=\"#3-命令模式\" class=\"headerlink\" title=\"3. 命令模式\"></a>3. 命令模式</h2><p>在普通模式上按“:”就可进入命令模式，在左下屏幕我们输入一些操作指令。</p>\n<p>:q!<br>不保存退出vim。</p>\n<p>:w<br>保存文档，但不退出vim。</p>\n<p>:w！<br>若文件为只读，强制写入</p>\n<p>:q<br>推出vi   </p>\n<p>:w ［filename］</p>\n<p>保存为另一文件</p>\n<p>:wq<br>是保存并退出文件</p>\n<p>:x<br>保存退出vim。</p>\n<p>:! command<br>运行shell命令。</p>\n<p>:e filename<br>编辑/打开一个文件</p>\n<p>:s/emacs/vim<br>在当前行中把第一个emacs替换成vim。</p>\n<p>:s/emacs/vim/g<br>把当前行中所有的emacs替换成vim。</p>\n<p>:%s/emacs/vim/g<br>在全局范围内把emacs替换成vim。</p>\n<p>:reg<br>列出缓冲区内容。</p>\n<p>:set all<br>列出所有参数的配置情况。</p>\n<p>:tabe<br>新建一个标签页。</p>\n<p>:tabn or :tabp<br>切换到下一个\\上一个标签页。</p>\n<p>:close<br>关闭当前标签页。</p>\n<p>:qa<br>关闭所有标签页退出。</p>\n<p>由于水平有限，加之行文匆忙，文中很可能错误不断，希望大家不要见怪，多批评指正。<br>另附两个vim常用命令链接供参考<br><a href=\"http://blog.css6.com/2014/12/18/VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/\" target=\"_blank\" rel=\"noopener\">VIM常用命令</a><br><a href=\"http://www.cnblogs.com/abeen/archive/2010/07/28/1786594.html\" target=\"_blank\" rel=\"noopener\">VIM 常用快捷键</a></p>\n","site":{"data":{}},"excerpt":"<p>首先我们知道在命令行中输入vim,进入vim文编辑器。<br>可能有人会问vim是什么？vim是多模式文本编辑器也可以说是跨平台的文本编辑器，什么平台都可以用，windows，linux，unix，etc.<br>由vi更新而来 VIM 是vi 的加强版.不仅兼容vi的所有指令，而且还有一些新的特性在里面。<br>安装vim之后会有个vimrc文件，像高亮、字体等等所有的设置都可以写在里面的，感兴趣可以去网上找找vim配置文件.<br>先介绍一些非常基础的vim知识供学习参考。</p>\n<p>vim有三种工作模式：插入模式 (Insert mode)、命令模式(Command mode) 、行模式 (EX Commands mode)。<br>插入模式就像我们平时使用记事本时一样，可以随意的输入文本，<br>基本没有什么可说的。主要是其它两个模式.首先了解下三个模式的相互转换：<br>","more":"</p>\n<h1 id=\"三个模式的相互转换。\"><a href=\"#三个模式的相互转换。\" class=\"headerlink\" title=\"三个模式的相互转换。\"></a>三个模式的相互转换。</h1><p>打开一个vim，它的默认模式是命令模式，<br>输入a或i等字符后可以转为插入模式；<br>(按一下i键,下端显示 –INSERT–)<br>命令模式输入:可以转为行模式；<br>行模式也是在输入Esc后可以返回命令模式。<br>注意：行模式和插入模式是不能直接相互转换的，必须能过命令模式转换。<br>（下面的命令如果是以冒号开头的就是默认是行模式命令，否则是命令模式命令）<br>hjkl四个键相当于←↓↑→，可以在命令模式下使用它们来上下左右移动光标。<br>（特别注意不要再使用小键盘的上下左右来移动光标了，不然就失去使用vim的主要原因之一了，这是刚使用vim时最不容易改变的习惯）</p>\n<h2 id=\"1-普通模式\"><a href=\"#1-普通模式\" class=\"headerlink\" title=\"1. 普通模式\"></a>1. 普通模式</h2><p>在shell中直接打vim filename就会进入普通模式。在这个状态，我们可以通过不同的按键对文件进行操作和切换到其它模式。按“:”可切换到命令模式，按i，o，a可进入编辑模。</p>\n<h3 id=\"1-1-编辑\"><a href=\"#1-1-编辑\" class=\"headerlink\" title=\"1.1. 编辑\"></a>1.1. 编辑</h3><p>i<br>进入编辑模式。</p>\n<p>o<br>在当前位置下插入一空行，进入编辑模式，光标位于空行的最开头。</p>\n<p>a<br>光标后移一个字符，进入编辑模式。</p>\n<p>b<br>是跳到单词的开头</p>\n<p>e<br>是跳到单词的结尾</p>\n<p>v<br>这入可视模式，可用高亮的色块选择内容。</p>\n<p>x or DEL键<br>删除当前字符，删除内容保存在缓冲区。</p>\n<p>xp<br>左右字符互换。</p>\n<p>dd<br>删除当前行，删除内容保存在缓冲区。</p>\n<p>ddp<br>上下两行的内容互换。</p>\n<p>d$<br>删除当前光标至行尾的所有内容。</p>\n<p>dG<br>删除从当前行至文件未尾的所有行。</p>\n<p>u<br>undo。</p>\n<p>w<br>是跳到下一个单词的开头</p>\n<p>v<br>进地visual模式，移动光标可选择文本。</p>\n<p>y<br>把当前行复制到缓冲区中。</p>\n<p>p<br>把缓冲区中的文本插入到当前位置。</p>\n<p>“ay<br>把当前行复制到a缓冲区。可用26个字母命名多个缓冲区。</p>\n<p>“ap<br>把a缓冲区中的文本插入当前位置。</p>\n<p>J<br>上下两行合并成一行。</p>\n<p>.<br>英文句点的作用是重复执行上次执行的命令，如你按了”ap插入a缓冲区的内容，那你就可按”.”来重复这个操作。</p>\n<h3 id=\"1-2-光标移动\"><a href=\"#1-2-光标移动\" class=\"headerlink\" title=\"1.2. 光标移动\"></a>1.2. 光标移动</h3><p>h，j，k，l<br>在vim中，除了可使用光标键在移动光标外，还有一种更方便的光标移动方式。就是使用h，j，k，l这四个键来移动光标。h控制光标左移，j控制光标下移，k控制光标上移，l控制光标右移。通过使用这四个字母键就可使我们的手不用移动即可控制光标的移动。刚开始使用可能会有些不习惯，但熟练使用后你会发觉你的输入速度提高不少，强烈建议喜欢vim的朋友使用。</p>\n<p>$<br>光标移动到行尾。</p>\n<p>G<br>光标移动到文档末尾。</p>\n<p>0<br>移动到此行的一个字符处</p>\n<p>H,L<br>H控制光标移动到当前屏幕头，L控制光标移动到当前屏幕尾。</p>\n<p>{，}<br>{控制光标上移一个段落，}控制光标下移一个段落</p>\n<p>ctrl+f<br>向前翻动一页</p>\n<p>ctrl+b<br>前后翻动一页</p>\n<h3 id=\"1-3-查找查换\"><a href=\"#1-3-查找查换\" class=\"headerlink\" title=\"1.3 查找查换\"></a>1.3 查找查换</h3><p>  /word<br>  在光标之后查找一个word的字符串</p>\n<p>  ？word<br>  在光标之前查找一个word的字符串</p>\n<p>  ：n1,n2s/word1/word2/g<br>  在第n1行和n2行之间查找word1,并将word1替换为word2</p>\n<p>  :1,$s/word1/word2/g<br>  从第一行到最后一行查找word1并替换为word2</p>\n<p>  :1,$s/word1/word2/gc<br>  从第一行到最后一行查找word1并替换为word2,在替换前显示提示符，让用户确认</p>\n<h3 id=\"1-4-删除-复制-粘贴\"><a href=\"#1-4-删除-复制-粘贴\" class=\"headerlink\" title=\"1.4 删除 复制 粘贴\"></a>1.4 删除 复制 粘贴</h3><p>x，X<br>x向后删除一个字符  X向前删除一个字符  </p>\n<p>nx<br>向后删除n个字符</p>\n<p>dd<br>删除光标所在的整列</p>\n<p>ndd<br>删除光标所在列的向下n列</p>\n<p>yy<br>复制光标所在行  </p>\n<p>nyy<br>复制光标所在行的向下n行</p>\n<p>p ，P<br>p复制的数据粘贴在光标下一行，P上一行</p>\n<p>u<br>恢复上一个动作</p>\n<h2 id=\"2-编辑模式\"><a href=\"#2-编辑模式\" class=\"headerlink\" title=\"2. 编辑模式\"></a>2. 编辑模式</h2><p>ESC<br>退出编辑状态。返回一般模式</p>\n<p>i ，I<br>插入：在当前光标所在处插入输入的文字，已存在的字符会向后退 </p>\n<p>a，A<br>添加 ：由当前光标所在处的下一个字符开始输入，已存在的字符向后退 </p>\n<p>o ，O<br>插入新的一行，从光标所在处的下一行行首开始输入 </p>\n<p>r，R<br>替换：r会替换光标所指的那一个字符，R会一直替换光标所指的文字，知道案下esc       </p>\n<h2 id=\"3-命令模式\"><a href=\"#3-命令模式\" class=\"headerlink\" title=\"3. 命令模式\"></a>3. 命令模式</h2><p>在普通模式上按“:”就可进入命令模式，在左下屏幕我们输入一些操作指令。</p>\n<p>:q!<br>不保存退出vim。</p>\n<p>:w<br>保存文档，但不退出vim。</p>\n<p>:w！<br>若文件为只读，强制写入</p>\n<p>:q<br>推出vi   </p>\n<p>:w ［filename］</p>\n<p>保存为另一文件</p>\n<p>:wq<br>是保存并退出文件</p>\n<p>:x<br>保存退出vim。</p>\n<p>:! command<br>运行shell命令。</p>\n<p>:e filename<br>编辑/打开一个文件</p>\n<p>:s/emacs/vim<br>在当前行中把第一个emacs替换成vim。</p>\n<p>:s/emacs/vim/g<br>把当前行中所有的emacs替换成vim。</p>\n<p>:%s/emacs/vim/g<br>在全局范围内把emacs替换成vim。</p>\n<p>:reg<br>列出缓冲区内容。</p>\n<p>:set all<br>列出所有参数的配置情况。</p>\n<p>:tabe<br>新建一个标签页。</p>\n<p>:tabn or :tabp<br>切换到下一个\\上一个标签页。</p>\n<p>:close<br>关闭当前标签页。</p>\n<p>:qa<br>关闭所有标签页退出。</p>\n<p>由于水平有限，加之行文匆忙，文中很可能错误不断，希望大家不要见怪，多批评指正。<br>另附两个vim常用命令链接供参考<br><a href=\"http://blog.css6.com/2014/12/18/VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/\" target=\"_blank\" rel=\"noopener\">VIM常用命令</a><br><a href=\"http://www.cnblogs.com/abeen/archive/2010/07/28/1786594.html\" target=\"_blank\" rel=\"noopener\">VIM 常用快捷键</a></p>"},{"title":"MAC终端常用命令行","date":"2016-01-18T01:51:37.000Z","photos":["/img/mac.jpg"],"_content":"\n## mac 终端 常用命令\n\n## 基本命令\n\n### 1、列出文件\nls 参数 目录名 例: 看看驱动目录下有什么:ls /System/Library/Extensions\n参数 -w 显示中文，-l 详细信息， -a 包括隐藏文件\n\n### 2、转换目录\ncd 例：想到驱动目录下溜达一圈 cd /System/Library/Extensions\n\n### 3、建立新目录\nmkdir 目录名 例：在驱动目录下建一个备份目录 backup mkdir /System/Library/Extensions/backup\n在桌面上建一个备份目录 backup mkdir /User/用户名/Desktop/backup\n\n### 4、拷贝文件\ncp 参数 源文件 目标文件 例：想把桌面的Natit.kext 拷贝到驱动目录中 cp -R /User/用户名/Desktop/Natit.kext /System/Library/Extensions\n参数R表示对目录进行递归操作，kext在图形界面下看起来是个文件，实际上是个文件夹。\n把驱动目录下的所有文件备份到桌面backup\ncp -R /System/Library/Extensions/* /User/用户名/Desktop/backup\n\n### 5、删除文件\nrm 参数 文件 例：想删除驱动的缓存 rm -rf /System/Library/Extensions.kextcache rm -rf /System/Library/Extensions.mkext\n参数－rf 表示递归和强制，千万要小心使用，如果执行了 rm -rf / 你的系统就全没了\n<!-- more -->\n### 6、移动文件\nmv 文件 例：想把AppleHDA.Kext 移到桌面 mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop\n想把AppleHDA.Kext 移到备份目录中 mv /System/Library/Extensions/AppleHDA.kext /System/Library/Extensions/backup\n\n### 7、文本编辑\nnano 文件名 例：编辑natit Info.plist nano /System/Library/Extensions/Natit.kext/Info.plist\n<!-- more -->\n## 目录操作\n\n命令名 功能描述 使用举例\n\nmkdir 创建一个目录 mkdir dirname\n\nrmdir 删除一个目录 rmdir dirname\n\nmvdir 移动或重命名一个目录 mvdir dir1 dir2\n\ncd 改变当前目录 cd dirname\n\npwd 显示当前目录的路径名 pwd\n\nls 显示当前目录的内容 ls -la\n\n## 文件操作\n\n命令名 功能描述 使用举例\n\ncat 显示或连接文件 cat filename\n\nod 显示非文本文件的内容 od -c filename\n\ncp 复制文件或目录 cp file1 file2\n\nrm 删除文件或目录 rm filename\n\nmv 改变文件名或所在目录 mv file1 file2\n\nfind 使用匹配表达式查找文件 find . -name “*.c” -print\n\nfile 显示文件类型 file filename\n\n## 选择操作\n\n命令名 功能描述 使用举例\n\nhead 显示文件的最初几行 head -20 filename\n\ntail 显示文件的最后几行 tail -15 filename\n\ncut 显示文件每行中的某些域 cut -f1,7 -d: /etc/passwd\n\ncolrm 从标准输入中删除若干列 colrm 8 20 file2\n\ndiff 比较并显示两个文件的差异 diff file1 file2\n\nsort 排序或归并文件 sort -d -f -u file1\n\nuniq 去掉文件中的重复行 uniq file1 file2\n\ncomm 显示两有序文件的公共和非公共行 comm file1 file2\n\nwc 统计文件的字符数、词数和行数 wc filename\n\nnl 给文件加上行号 nl file1 >file2\n\n## 进程操作\n\n命令名 功能描述 使用举例\n\nps 显示进程当前状态 ps u\n\nkill 终止进程 kill -9 30142\n\n## 时间操作\n\n命令名 功能描述 使用举例\n\ndate 显示系统的当前日期和时间 date\n\ncal 显示日历 cal 8 1996\n\ntime 统计程序的执行时间 time a.out\n\n网络与通信操作\n\n命令名 功能描述 使用举例\n\ntelnet 远程登录 telnet hpc.sp.net.edu.cn\n\nrlogin 远程登录 rlogin hostname -l username\n\nrsh 在远程主机执行指定命令 rsh f01n03 date\n\nftp 在本地主机与远程主机之间传输文件 ftpftp.sp.net.edu.cn\n\nrcp 在本地主机与远程主机 之间复制文件 rcp file1 host1:file2\n\nping 给一个网络主机发送 回应请求 ping hpc.sp.net.edu.cn\n\nmail 阅读和发送电子邮件 mail\n\nwrite 给另一用户发送报文 write username pts/1\n\nmesg 允许或拒绝接收报文 mesg n\n\n## Korn Shell 命令\n\n命令名 功能描述 使用举例\n\nhistory 列出最近执行过的 几条命令及编号 history\n\nr 重复执行最近执行过的 某条命令 r -2\n\nalias 给某个命令定义别名 alias del=rm -i\n\nunalias 取消对某个别名的定义 unalias del\n\n## 其它命令\n\n命令名 功能描述 使用举例\n\nuname 显示操作系统的有关信息 uname -a\n\nclear 清除屏幕或窗口内容 clear\n\nenv 显示当前所有设置过的环境变量 env\n\nwho 列出当前登录的所有用户 who\n\nwhoami 显示当前正进行操作的用户名 whoami\n\ntty 显示终端或伪终端的名称 tty\n\nstty 显示或重置控制键定义 stty -a\n\ndu 查询磁盘使用情况 du -k subdir\n\ndf /tmp 显示文件系统的总空间和可用空间\n\nw 显示当前系统活动的总信息\n\n本文来源:[凯哥的博客](http://blog.css6.com/2014/12/25/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/)\n另附相关网摘 [mac终端命令大全介绍](http://www.douban.com/note/75797151/)\n","source":"_posts/mac终端常用命令.md","raw":"---\ntitle: MAC终端常用命令行\ndate: 2016-01-18 09:51:37\nphotos:\n- /img/mac.jpg\ncategories: 技术摘录\ntag:\n- mac技巧\n- 终端\n---\n\n## mac 终端 常用命令\n\n## 基本命令\n\n### 1、列出文件\nls 参数 目录名 例: 看看驱动目录下有什么:ls /System/Library/Extensions\n参数 -w 显示中文，-l 详细信息， -a 包括隐藏文件\n\n### 2、转换目录\ncd 例：想到驱动目录下溜达一圈 cd /System/Library/Extensions\n\n### 3、建立新目录\nmkdir 目录名 例：在驱动目录下建一个备份目录 backup mkdir /System/Library/Extensions/backup\n在桌面上建一个备份目录 backup mkdir /User/用户名/Desktop/backup\n\n### 4、拷贝文件\ncp 参数 源文件 目标文件 例：想把桌面的Natit.kext 拷贝到驱动目录中 cp -R /User/用户名/Desktop/Natit.kext /System/Library/Extensions\n参数R表示对目录进行递归操作，kext在图形界面下看起来是个文件，实际上是个文件夹。\n把驱动目录下的所有文件备份到桌面backup\ncp -R /System/Library/Extensions/* /User/用户名/Desktop/backup\n\n### 5、删除文件\nrm 参数 文件 例：想删除驱动的缓存 rm -rf /System/Library/Extensions.kextcache rm -rf /System/Library/Extensions.mkext\n参数－rf 表示递归和强制，千万要小心使用，如果执行了 rm -rf / 你的系统就全没了\n<!-- more -->\n### 6、移动文件\nmv 文件 例：想把AppleHDA.Kext 移到桌面 mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop\n想把AppleHDA.Kext 移到备份目录中 mv /System/Library/Extensions/AppleHDA.kext /System/Library/Extensions/backup\n\n### 7、文本编辑\nnano 文件名 例：编辑natit Info.plist nano /System/Library/Extensions/Natit.kext/Info.plist\n<!-- more -->\n## 目录操作\n\n命令名 功能描述 使用举例\n\nmkdir 创建一个目录 mkdir dirname\n\nrmdir 删除一个目录 rmdir dirname\n\nmvdir 移动或重命名一个目录 mvdir dir1 dir2\n\ncd 改变当前目录 cd dirname\n\npwd 显示当前目录的路径名 pwd\n\nls 显示当前目录的内容 ls -la\n\n## 文件操作\n\n命令名 功能描述 使用举例\n\ncat 显示或连接文件 cat filename\n\nod 显示非文本文件的内容 od -c filename\n\ncp 复制文件或目录 cp file1 file2\n\nrm 删除文件或目录 rm filename\n\nmv 改变文件名或所在目录 mv file1 file2\n\nfind 使用匹配表达式查找文件 find . -name “*.c” -print\n\nfile 显示文件类型 file filename\n\n## 选择操作\n\n命令名 功能描述 使用举例\n\nhead 显示文件的最初几行 head -20 filename\n\ntail 显示文件的最后几行 tail -15 filename\n\ncut 显示文件每行中的某些域 cut -f1,7 -d: /etc/passwd\n\ncolrm 从标准输入中删除若干列 colrm 8 20 file2\n\ndiff 比较并显示两个文件的差异 diff file1 file2\n\nsort 排序或归并文件 sort -d -f -u file1\n\nuniq 去掉文件中的重复行 uniq file1 file2\n\ncomm 显示两有序文件的公共和非公共行 comm file1 file2\n\nwc 统计文件的字符数、词数和行数 wc filename\n\nnl 给文件加上行号 nl file1 >file2\n\n## 进程操作\n\n命令名 功能描述 使用举例\n\nps 显示进程当前状态 ps u\n\nkill 终止进程 kill -9 30142\n\n## 时间操作\n\n命令名 功能描述 使用举例\n\ndate 显示系统的当前日期和时间 date\n\ncal 显示日历 cal 8 1996\n\ntime 统计程序的执行时间 time a.out\n\n网络与通信操作\n\n命令名 功能描述 使用举例\n\ntelnet 远程登录 telnet hpc.sp.net.edu.cn\n\nrlogin 远程登录 rlogin hostname -l username\n\nrsh 在远程主机执行指定命令 rsh f01n03 date\n\nftp 在本地主机与远程主机之间传输文件 ftpftp.sp.net.edu.cn\n\nrcp 在本地主机与远程主机 之间复制文件 rcp file1 host1:file2\n\nping 给一个网络主机发送 回应请求 ping hpc.sp.net.edu.cn\n\nmail 阅读和发送电子邮件 mail\n\nwrite 给另一用户发送报文 write username pts/1\n\nmesg 允许或拒绝接收报文 mesg n\n\n## Korn Shell 命令\n\n命令名 功能描述 使用举例\n\nhistory 列出最近执行过的 几条命令及编号 history\n\nr 重复执行最近执行过的 某条命令 r -2\n\nalias 给某个命令定义别名 alias del=rm -i\n\nunalias 取消对某个别名的定义 unalias del\n\n## 其它命令\n\n命令名 功能描述 使用举例\n\nuname 显示操作系统的有关信息 uname -a\n\nclear 清除屏幕或窗口内容 clear\n\nenv 显示当前所有设置过的环境变量 env\n\nwho 列出当前登录的所有用户 who\n\nwhoami 显示当前正进行操作的用户名 whoami\n\ntty 显示终端或伪终端的名称 tty\n\nstty 显示或重置控制键定义 stty -a\n\ndu 查询磁盘使用情况 du -k subdir\n\ndf /tmp 显示文件系统的总空间和可用空间\n\nw 显示当前系统活动的总信息\n\n本文来源:[凯哥的博客](http://blog.css6.com/2014/12/25/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/)\n另附相关网摘 [mac终端命令大全介绍](http://www.douban.com/note/75797151/)\n","slug":"mac终端常用命令","published":1,"updated":"2020-02-15T19:07:02.000Z","comments":1,"layout":"post","link":"","_id":"ckr6eiskb00053fwy07p4btdj","content":"<h2 id=\"mac-终端-常用命令\"><a href=\"#mac-终端-常用命令\" class=\"headerlink\" title=\"mac 终端 常用命令\"></a>mac 终端 常用命令</h2><h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><h3 id=\"1、列出文件\"><a href=\"#1、列出文件\" class=\"headerlink\" title=\"1、列出文件\"></a>1、列出文件</h3><p>ls 参数 目录名 例: 看看驱动目录下有什么:ls /System/Library/Extensions<br>参数 -w 显示中文，-l 详细信息， -a 包括隐藏文件</p>\n<h3 id=\"2、转换目录\"><a href=\"#2、转换目录\" class=\"headerlink\" title=\"2、转换目录\"></a>2、转换目录</h3><p>cd 例：想到驱动目录下溜达一圈 cd /System/Library/Extensions</p>\n<h3 id=\"3、建立新目录\"><a href=\"#3、建立新目录\" class=\"headerlink\" title=\"3、建立新目录\"></a>3、建立新目录</h3><p>mkdir 目录名 例：在驱动目录下建一个备份目录 backup mkdir /System/Library/Extensions/backup<br>在桌面上建一个备份目录 backup mkdir /User/用户名/Desktop/backup</p>\n<h3 id=\"4、拷贝文件\"><a href=\"#4、拷贝文件\" class=\"headerlink\" title=\"4、拷贝文件\"></a>4、拷贝文件</h3><p>cp 参数 源文件 目标文件 例：想把桌面的Natit.kext 拷贝到驱动目录中 cp -R /User/用户名/Desktop/Natit.kext /System/Library/Extensions<br>参数R表示对目录进行递归操作，kext在图形界面下看起来是个文件，实际上是个文件夹。<br>把驱动目录下的所有文件备份到桌面backup<br>cp -R /System/Library/Extensions/* /User/用户名/Desktop/backup</p>\n<h3 id=\"5、删除文件\"><a href=\"#5、删除文件\" class=\"headerlink\" title=\"5、删除文件\"></a>5、删除文件</h3><p>rm 参数 文件 例：想删除驱动的缓存 rm -rf /System/Library/Extensions.kextcache rm -rf /System/Library/Extensions.mkext<br>参数－rf 表示递归和强制，千万要小心使用，如果执行了 rm -rf / 你的系统就全没了<br><a id=\"more\"></a></p>\n<h3 id=\"6、移动文件\"><a href=\"#6、移动文件\" class=\"headerlink\" title=\"6、移动文件\"></a>6、移动文件</h3><p>mv 文件 例：想把AppleHDA.Kext 移到桌面 mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop<br>想把AppleHDA.Kext 移到备份目录中 mv /System/Library/Extensions/AppleHDA.kext /System/Library/Extensions/backup</p>\n<h3 id=\"7、文本编辑\"><a href=\"#7、文本编辑\" class=\"headerlink\" title=\"7、文本编辑\"></a>7、文本编辑</h3><p>nano 文件名 例：编辑natit Info.plist nano /System/Library/Extensions/Natit.kext/Info.plist<br><!-- more --></p>\n<h2 id=\"目录操作\"><a href=\"#目录操作\" class=\"headerlink\" title=\"目录操作\"></a>目录操作</h2><p>命令名 功能描述 使用举例</p>\n<p>mkdir 创建一个目录 mkdir dirname</p>\n<p>rmdir 删除一个目录 rmdir dirname</p>\n<p>mvdir 移动或重命名一个目录 mvdir dir1 dir2</p>\n<p>cd 改变当前目录 cd dirname</p>\n<p>pwd 显示当前目录的路径名 pwd</p>\n<p>ls 显示当前目录的内容 ls -la</p>\n<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><p>命令名 功能描述 使用举例</p>\n<p>cat 显示或连接文件 cat filename</p>\n<p>od 显示非文本文件的内容 od -c filename</p>\n<p>cp 复制文件或目录 cp file1 file2</p>\n<p>rm 删除文件或目录 rm filename</p>\n<p>mv 改变文件名或所在目录 mv file1 file2</p>\n<p>find 使用匹配表达式查找文件 find . -name “*.c” -print</p>\n<p>file 显示文件类型 file filename</p>\n<h2 id=\"选择操作\"><a href=\"#选择操作\" class=\"headerlink\" title=\"选择操作\"></a>选择操作</h2><p>命令名 功能描述 使用举例</p>\n<p>head 显示文件的最初几行 head -20 filename</p>\n<p>tail 显示文件的最后几行 tail -15 filename</p>\n<p>cut 显示文件每行中的某些域 cut -f1,7 -d: /etc/passwd</p>\n<p>colrm 从标准输入中删除若干列 colrm 8 20 file2</p>\n<p>diff 比较并显示两个文件的差异 diff file1 file2</p>\n<p>sort 排序或归并文件 sort -d -f -u file1</p>\n<p>uniq 去掉文件中的重复行 uniq file1 file2</p>\n<p>comm 显示两有序文件的公共和非公共行 comm file1 file2</p>\n<p>wc 统计文件的字符数、词数和行数 wc filename</p>\n<p>nl 给文件加上行号 nl file1 &gt;file2</p>\n<h2 id=\"进程操作\"><a href=\"#进程操作\" class=\"headerlink\" title=\"进程操作\"></a>进程操作</h2><p>命令名 功能描述 使用举例</p>\n<p>ps 显示进程当前状态 ps u</p>\n<p>kill 终止进程 kill -9 30142</p>\n<h2 id=\"时间操作\"><a href=\"#时间操作\" class=\"headerlink\" title=\"时间操作\"></a>时间操作</h2><p>命令名 功能描述 使用举例</p>\n<p>date 显示系统的当前日期和时间 date</p>\n<p>cal 显示日历 cal 8 1996</p>\n<p>time 统计程序的执行时间 time a.out</p>\n<p>网络与通信操作</p>\n<p>命令名 功能描述 使用举例</p>\n<p>telnet 远程登录 telnet hpc.sp.net.edu.cn</p>\n<p>rlogin 远程登录 rlogin hostname -l username</p>\n<p>rsh 在远程主机执行指定命令 rsh f01n03 date</p>\n<p>ftp 在本地主机与远程主机之间传输文件 ftpftp.sp.net.edu.cn</p>\n<p>rcp 在本地主机与远程主机 之间复制文件 rcp file1 host1:file2</p>\n<p>ping 给一个网络主机发送 回应请求 ping hpc.sp.net.edu.cn</p>\n<p>mail 阅读和发送电子邮件 mail</p>\n<p>write 给另一用户发送报文 write username pts/1</p>\n<p>mesg 允许或拒绝接收报文 mesg n</p>\n<h2 id=\"Korn-Shell-命令\"><a href=\"#Korn-Shell-命令\" class=\"headerlink\" title=\"Korn Shell 命令\"></a>Korn Shell 命令</h2><p>命令名 功能描述 使用举例</p>\n<p>history 列出最近执行过的 几条命令及编号 history</p>\n<p>r 重复执行最近执行过的 某条命令 r -2</p>\n<p>alias 给某个命令定义别名 alias del=rm -i</p>\n<p>unalias 取消对某个别名的定义 unalias del</p>\n<h2 id=\"其它命令\"><a href=\"#其它命令\" class=\"headerlink\" title=\"其它命令\"></a>其它命令</h2><p>命令名 功能描述 使用举例</p>\n<p>uname 显示操作系统的有关信息 uname -a</p>\n<p>clear 清除屏幕或窗口内容 clear</p>\n<p>env 显示当前所有设置过的环境变量 env</p>\n<p>who 列出当前登录的所有用户 who</p>\n<p>whoami 显示当前正进行操作的用户名 whoami</p>\n<p>tty 显示终端或伪终端的名称 tty</p>\n<p>stty 显示或重置控制键定义 stty -a</p>\n<p>du 查询磁盘使用情况 du -k subdir</p>\n<p>df /tmp 显示文件系统的总空间和可用空间</p>\n<p>w 显示当前系统活动的总信息</p>\n<p>本文来源:<a href=\"http://blog.css6.com/2014/12/25/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/\" target=\"_blank\" rel=\"noopener\">凯哥的博客</a><br>另附相关网摘 <a href=\"http://www.douban.com/note/75797151/\" target=\"_blank\" rel=\"noopener\">mac终端命令大全介绍</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"mac-终端-常用命令\"><a href=\"#mac-终端-常用命令\" class=\"headerlink\" title=\"mac 终端 常用命令\"></a>mac 终端 常用命令</h2><h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><h3 id=\"1、列出文件\"><a href=\"#1、列出文件\" class=\"headerlink\" title=\"1、列出文件\"></a>1、列出文件</h3><p>ls 参数 目录名 例: 看看驱动目录下有什么:ls /System/Library/Extensions<br>参数 -w 显示中文，-l 详细信息， -a 包括隐藏文件</p>\n<h3 id=\"2、转换目录\"><a href=\"#2、转换目录\" class=\"headerlink\" title=\"2、转换目录\"></a>2、转换目录</h3><p>cd 例：想到驱动目录下溜达一圈 cd /System/Library/Extensions</p>\n<h3 id=\"3、建立新目录\"><a href=\"#3、建立新目录\" class=\"headerlink\" title=\"3、建立新目录\"></a>3、建立新目录</h3><p>mkdir 目录名 例：在驱动目录下建一个备份目录 backup mkdir /System/Library/Extensions/backup<br>在桌面上建一个备份目录 backup mkdir /User/用户名/Desktop/backup</p>\n<h3 id=\"4、拷贝文件\"><a href=\"#4、拷贝文件\" class=\"headerlink\" title=\"4、拷贝文件\"></a>4、拷贝文件</h3><p>cp 参数 源文件 目标文件 例：想把桌面的Natit.kext 拷贝到驱动目录中 cp -R /User/用户名/Desktop/Natit.kext /System/Library/Extensions<br>参数R表示对目录进行递归操作，kext在图形界面下看起来是个文件，实际上是个文件夹。<br>把驱动目录下的所有文件备份到桌面backup<br>cp -R /System/Library/Extensions/* /User/用户名/Desktop/backup</p>\n<h3 id=\"5、删除文件\"><a href=\"#5、删除文件\" class=\"headerlink\" title=\"5、删除文件\"></a>5、删除文件</h3><p>rm 参数 文件 例：想删除驱动的缓存 rm -rf /System/Library/Extensions.kextcache rm -rf /System/Library/Extensions.mkext<br>参数－rf 表示递归和强制，千万要小心使用，如果执行了 rm -rf / 你的系统就全没了<br>","more":"</p>\n<h3 id=\"6、移动文件\"><a href=\"#6、移动文件\" class=\"headerlink\" title=\"6、移动文件\"></a>6、移动文件</h3><p>mv 文件 例：想把AppleHDA.Kext 移到桌面 mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop<br>想把AppleHDA.Kext 移到备份目录中 mv /System/Library/Extensions/AppleHDA.kext /System/Library/Extensions/backup</p>\n<h3 id=\"7、文本编辑\"><a href=\"#7、文本编辑\" class=\"headerlink\" title=\"7、文本编辑\"></a>7、文本编辑</h3><p>nano 文件名 例：编辑natit Info.plist nano /System/Library/Extensions/Natit.kext/Info.plist<br><!-- more --></p>\n<h2 id=\"目录操作\"><a href=\"#目录操作\" class=\"headerlink\" title=\"目录操作\"></a>目录操作</h2><p>命令名 功能描述 使用举例</p>\n<p>mkdir 创建一个目录 mkdir dirname</p>\n<p>rmdir 删除一个目录 rmdir dirname</p>\n<p>mvdir 移动或重命名一个目录 mvdir dir1 dir2</p>\n<p>cd 改变当前目录 cd dirname</p>\n<p>pwd 显示当前目录的路径名 pwd</p>\n<p>ls 显示当前目录的内容 ls -la</p>\n<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><p>命令名 功能描述 使用举例</p>\n<p>cat 显示或连接文件 cat filename</p>\n<p>od 显示非文本文件的内容 od -c filename</p>\n<p>cp 复制文件或目录 cp file1 file2</p>\n<p>rm 删除文件或目录 rm filename</p>\n<p>mv 改变文件名或所在目录 mv file1 file2</p>\n<p>find 使用匹配表达式查找文件 find . -name “*.c” -print</p>\n<p>file 显示文件类型 file filename</p>\n<h2 id=\"选择操作\"><a href=\"#选择操作\" class=\"headerlink\" title=\"选择操作\"></a>选择操作</h2><p>命令名 功能描述 使用举例</p>\n<p>head 显示文件的最初几行 head -20 filename</p>\n<p>tail 显示文件的最后几行 tail -15 filename</p>\n<p>cut 显示文件每行中的某些域 cut -f1,7 -d: /etc/passwd</p>\n<p>colrm 从标准输入中删除若干列 colrm 8 20 file2</p>\n<p>diff 比较并显示两个文件的差异 diff file1 file2</p>\n<p>sort 排序或归并文件 sort -d -f -u file1</p>\n<p>uniq 去掉文件中的重复行 uniq file1 file2</p>\n<p>comm 显示两有序文件的公共和非公共行 comm file1 file2</p>\n<p>wc 统计文件的字符数、词数和行数 wc filename</p>\n<p>nl 给文件加上行号 nl file1 &gt;file2</p>\n<h2 id=\"进程操作\"><a href=\"#进程操作\" class=\"headerlink\" title=\"进程操作\"></a>进程操作</h2><p>命令名 功能描述 使用举例</p>\n<p>ps 显示进程当前状态 ps u</p>\n<p>kill 终止进程 kill -9 30142</p>\n<h2 id=\"时间操作\"><a href=\"#时间操作\" class=\"headerlink\" title=\"时间操作\"></a>时间操作</h2><p>命令名 功能描述 使用举例</p>\n<p>date 显示系统的当前日期和时间 date</p>\n<p>cal 显示日历 cal 8 1996</p>\n<p>time 统计程序的执行时间 time a.out</p>\n<p>网络与通信操作</p>\n<p>命令名 功能描述 使用举例</p>\n<p>telnet 远程登录 telnet hpc.sp.net.edu.cn</p>\n<p>rlogin 远程登录 rlogin hostname -l username</p>\n<p>rsh 在远程主机执行指定命令 rsh f01n03 date</p>\n<p>ftp 在本地主机与远程主机之间传输文件 ftpftp.sp.net.edu.cn</p>\n<p>rcp 在本地主机与远程主机 之间复制文件 rcp file1 host1:file2</p>\n<p>ping 给一个网络主机发送 回应请求 ping hpc.sp.net.edu.cn</p>\n<p>mail 阅读和发送电子邮件 mail</p>\n<p>write 给另一用户发送报文 write username pts/1</p>\n<p>mesg 允许或拒绝接收报文 mesg n</p>\n<h2 id=\"Korn-Shell-命令\"><a href=\"#Korn-Shell-命令\" class=\"headerlink\" title=\"Korn Shell 命令\"></a>Korn Shell 命令</h2><p>命令名 功能描述 使用举例</p>\n<p>history 列出最近执行过的 几条命令及编号 history</p>\n<p>r 重复执行最近执行过的 某条命令 r -2</p>\n<p>alias 给某个命令定义别名 alias del=rm -i</p>\n<p>unalias 取消对某个别名的定义 unalias del</p>\n<h2 id=\"其它命令\"><a href=\"#其它命令\" class=\"headerlink\" title=\"其它命令\"></a>其它命令</h2><p>命令名 功能描述 使用举例</p>\n<p>uname 显示操作系统的有关信息 uname -a</p>\n<p>clear 清除屏幕或窗口内容 clear</p>\n<p>env 显示当前所有设置过的环境变量 env</p>\n<p>who 列出当前登录的所有用户 who</p>\n<p>whoami 显示当前正进行操作的用户名 whoami</p>\n<p>tty 显示终端或伪终端的名称 tty</p>\n<p>stty 显示或重置控制键定义 stty -a</p>\n<p>du 查询磁盘使用情况 du -k subdir</p>\n<p>df /tmp 显示文件系统的总空间和可用空间</p>\n<p>w 显示当前系统活动的总信息</p>\n<p>本文来源:<a href=\"http://blog.css6.com/2014/12/25/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/\" target=\"_blank\" rel=\"noopener\">凯哥的博客</a><br>另附相关网摘 <a href=\"http://www.douban.com/note/75797151/\" target=\"_blank\" rel=\"noopener\">mac终端命令大全介绍</a></p>"},{"title":"for循环的执行顺序","date":"2016-02-02T07:38:29.000Z","_content":"for循环的执行顺序用如下表达式：\n``` JavaScript\nfor(expression1;expression2;expression3)\n{   \n          expression4;\n}\n``` \n    执行的顺序应该是：\n\n## 1）第一次循环，即初始化循环。\n\n    首先执行表达式expression1（一般为初始化语句）；再执行expression2（一般为条件判断语句），判断expression1是否符合expression2的条件；如果符合，则执行expression4，否则，停止执行；最后执行expression3。\n\n\n\n\n## 2）第N（N>=2）次循环\n\n    首先执行expression2，判断在expression3是否符合在expression2要求；如果符合，则继续执行在expression4，否则，停止执行。最后执行在expression3。如此往复，直至expression3不满足在expression2条件是为止。\n\n\n\n\n## 总结：\n\n    总的来说，执行的顺序是一致的。先条件判断（expression2），再函数体执行（expression4），最后for执行（expression3）。往复......区别在于，条件判断的对象。第一次判断时，对象为初始化语句（expression1），后续的判断对象为执行后的结果（expression3）。\n","source":"_posts/for循环的执行顺序.md","raw":"---\ntitle: for循环的执行顺序\ndate: 2016-02-02 15:38:29\ncategories: 知识点滴\ntags:\n- 随笔\n---\nfor循环的执行顺序用如下表达式：\n``` JavaScript\nfor(expression1;expression2;expression3)\n{   \n          expression4;\n}\n``` \n    执行的顺序应该是：\n\n## 1）第一次循环，即初始化循环。\n\n    首先执行表达式expression1（一般为初始化语句）；再执行expression2（一般为条件判断语句），判断expression1是否符合expression2的条件；如果符合，则执行expression4，否则，停止执行；最后执行expression3。\n\n\n\n\n## 2）第N（N>=2）次循环\n\n    首先执行expression2，判断在expression3是否符合在expression2要求；如果符合，则继续执行在expression4，否则，停止执行。最后执行在expression3。如此往复，直至expression3不满足在expression2条件是为止。\n\n\n\n\n## 总结：\n\n    总的来说，执行的顺序是一致的。先条件判断（expression2），再函数体执行（expression4），最后for执行（expression3）。往复......区别在于，条件判断的对象。第一次判断时，对象为初始化语句（expression1），后续的判断对象为执行后的结果（expression3）。\n","slug":"for循环的执行顺序","published":1,"updated":"2020-02-15T19:07:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr6eiskc00063fwy20xznrs2","content":"<p>for循环的执行顺序用如下表达式：</p>\n<pre><code class=\"JavaScript\"><span class=\"keyword\">for</span>(expression1;expression2;expression3)\n{   \n          expression4;\n}\n</code></pre>\n<pre><code>执行的顺序应该是：\n</code></pre><h2 id=\"1）第一次循环，即初始化循环。\"><a href=\"#1）第一次循环，即初始化循环。\" class=\"headerlink\" title=\"1）第一次循环，即初始化循环。\"></a>1）第一次循环，即初始化循环。</h2><pre><code>首先执行表达式expression1（一般为初始化语句）；再执行expression2（一般为条件判断语句），判断expression1是否符合expression2的条件；如果符合，则执行expression4，否则，停止执行；最后执行expression3。\n</code></pre><h2 id=\"2）第N（N-gt-2）次循环\"><a href=\"#2）第N（N-gt-2）次循环\" class=\"headerlink\" title=\"2）第N（N&gt;=2）次循环\"></a>2）第N（N&gt;=2）次循环</h2><pre><code>首先执行expression2，判断在expression3是否符合在expression2要求；如果符合，则继续执行在expression4，否则，停止执行。最后执行在expression3。如此往复，直至expression3不满足在expression2条件是为止。\n</code></pre><h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><pre><code>总的来说，执行的顺序是一致的。先条件判断（expression2），再函数体执行（expression4），最后for执行（expression3）。往复......区别在于，条件判断的对象。第一次判断时，对象为初始化语句（expression1），后续的判断对象为执行后的结果（expression3）。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>for循环的执行顺序用如下表达式：</p>\n<pre><code class=\"JavaScript\"><span class=\"keyword\">for</span>(expression1;expression2;expression3)\n{   \n          expression4;\n}\n</code></pre>\n<pre><code>执行的顺序应该是：\n</code></pre><h2 id=\"1）第一次循环，即初始化循环。\"><a href=\"#1）第一次循环，即初始化循环。\" class=\"headerlink\" title=\"1）第一次循环，即初始化循环。\"></a>1）第一次循环，即初始化循环。</h2><pre><code>首先执行表达式expression1（一般为初始化语句）；再执行expression2（一般为条件判断语句），判断expression1是否符合expression2的条件；如果符合，则执行expression4，否则，停止执行；最后执行expression3。\n</code></pre><h2 id=\"2）第N（N-gt-2）次循环\"><a href=\"#2）第N（N-gt-2）次循环\" class=\"headerlink\" title=\"2）第N（N&gt;=2）次循环\"></a>2）第N（N&gt;=2）次循环</h2><pre><code>首先执行expression2，判断在expression3是否符合在expression2要求；如果符合，则继续执行在expression4，否则，停止执行。最后执行在expression3。如此往复，直至expression3不满足在expression2条件是为止。\n</code></pre><h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><pre><code>总的来说，执行的顺序是一致的。先条件判断（expression2），再函数体执行（expression4），最后for执行（expression3）。往复......区别在于，条件判断的对象。第一次判断时，对象为初始化语句（expression1），后续的判断对象为执行后的结果（expression3）。\n</code></pre>"},{"title":"gulp学习笔记","date":"2016-07-12T03:51:33.000Z","_content":"Gulp前端自动化：Gulp的高度集成化开发环境，释放了前端开发中大量时间，如css压缩、js压缩、错误检查、合并js、压缩图片、压缩html、模块构造等，只要你能想到的基本都可以通过Gulp插件去实现。\n\n## 前端自动化的目的\n在一个项目过程中，重复而枯燥的工作太多了……绳命就这样浪费了。\n我们需要一个自动化的工作流程，让我们更专注于coding，而不是coding外的繁琐工作。于是Gulp应运而生。可以想像，如果在node环境下，一行命令搞定一个场景，So Cool…\n然而通过了解，显然可看出Gulp\n### 功能\n\n1.版本控制\n2.检查JS\n3.图片合并\n4.压缩CSS\n5.压缩JS\n6.编译SASS\n\n目前最知名的构建工具： Gulp、Grunt、NPM + Webpack；\n\n. grunt是前端工程化的先驱\n\n. gulp更自然基于流的方式连接任务\n\n. Webpack最年轻，擅长用于依赖管理，配置稍较复杂\n\n. 推荐使用Gulp，Gulp基于nodejs中stream，效率更好语法更自然,不需要编写复杂的配置文件\n\n## 安装前准备：\nGulp是基于 Node.js的，需要要安装 Node.js\n\n为了确保依赖环境正确，我们先执行几个简单的命令检查。\n``` bash\n$ node -v\n\nv5.3.0\n\nNode是一个基于Chrome JavaScript V8引擎建立的一个解释器\n检测Node是否已经安装，如果正确安装的话你会看到所安装的Node的版本号\n\n接下来看看npm，它是 node 的包管理工具，可以利用它安装 gulp 所需的包\n\n$ npm -v\n\n3.3.12\n\n这同样能得到npm的版本号，装 Node 时已经自动安装了npm\n\n```\n## 开始全局安装Gulp\n\n``` bash\n$ npm install -g gulp\n```\n``` bash\n$ gulp -v\n\n[18:39:18] CLI version 3.9.1\n\n得到gulp的版本号，确认安装成功\n\n```\n## 创建工程\n\n``` bash\n\nTestProject     (项目名称)\n|–.git               通过git进行版本控制,项目自动生成这个文件\n|–node_modules       组件包目录\n|–dist               发布环境（编译自动生成的）\n    |–css                 样式文件(style.css style.min.css)\n    |–img                 图片文件(压缩图片\\合并后的图片)\n    |–js                  js文件(main.js main.min.js)\n    |–index.html          静态页面文件(压缩html)\n\n|–src                开发环境\n    |–sass                sass文件\n    |–images              图片文件\n    |–js                  js文件\n    |–index.html          静态文件\n|–gulpfile.js        gulp配置文件\n|–package.json       依赖模块json文件,在项目目录下npm install会安装项目所有的依赖模块，简化项目的安装程序\n\n```\n## 创建package.json\n\n我们先使用npm init来创建类似Nuget package的package.config一样的文件，这样我们就知道项目依赖哪些插件，而且我们不需要把插件提交到代码库，其它程序员只需要使用 npm install 就可以安装所有配置的插件\n\n``` bash\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg> --save` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\nname: (test) test                  //名称\nversion: (1.0.0) 1.0.0             //版本\ndescription: test description      //描述\nentry point: (index.js)            //\ntest command:                      //测试代码\ngit repository:                    //Git版本库\nkeywords:                          //关键词\nauthor: luuman                     //作者\nlicense: (ISC)                     //协议\nAbout to write to F:\\Gulp\\test\\package.json:\n\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"test description\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"luuman\",\n  \"license\": \"ISC\"\n}\n\nIs this ok? (yes)\n\n```\n## 我们要进去到项目的根目录再安装一遍\n\n``` bash\n$ npm install gulp --save-dev\n\n```\n## 新建gulpfile.js文件\n我们将要使用Gulp插件来完成我们以下任务：\n\n. sass的编译（gulp-sass）\n. 自动添加css前缀（gulp-autoprefixer）\n. 压缩css（gulp-minify-css）\n. js代码校验（gulp-jshint）\n. 合并js文件（gulp-concat）\n. 压缩js代码（gulp-uglify）\n. 压缩图片（gulp-imagemin）\n. 自动刷新页面（gulp-livereload）\n. 图片缓存，只有图片替换了才压缩（gulp-cache）\n. 更改提醒（gulp-notify）\n\n### 安装这些插件需要运行如下命令：\n\n```bash\nnpm install gulp-jshint gulp-sass gulp-less gulp-autoprefixer gulp-clean-css gulp-imagemin gulp-notify gulp-cache imagemin-pngquant gulp-livereload gulp-concat gulp-uglify  gulp-rename  gulp-babel del --save-dev\n```\ngulp功能模块的文件会放在项目所在的目录的./node_modules 下\n更多插件可以看这里[gulpjs.com/plugins/](http://gulpjs.com/plugins/)\n\n接着我们要创建一个gulpfile.js在根目录下，gulp只有四个API： task，watch，src，和 dest\n\n``` bash\ntask--这个API用来创建任务，在命令行下可以输入 gulp test 来执行test的任务。\nwatch--这个API用来监听任务。\nsrc--这个API设置需要处理的文件的路径，可以是多个文件以数组的形式[main.scss, vender.scss]，也可以是正则表达式/**/*.scss。\n\ndest--这个API设置生成文件的路径，一个任务可以有多个生成路径，一个可以输出未压缩的版本，另一个可以输出压缩后的版本。\n\n```\n### 加载插件：\n\n``` bash\n// 引入gulp\nvar gulp = require('gulp');\n\n// 引入组件\nvar jshint = require('gulp-jshint'); //检查js代码校验\nvar sass = require('gulp-sass'); //编译Sass\nvar less = require('gulp-less'); //编译less\nvar autoprefixer = require('gulp-autoprefixer');\nvar cleancss = require('gulp-clean-css');\nvar imagemin = require('gulp-imagemin'); //压缩图片\nvar notify = require('gulp-notify'); //处理报错\nvar cache = require('gulp-cache'); //图片缓存，只有图片替换了才压缩\nvar pngquant = require('imagemin-pngquant'); //深度压缩图片\nvar livereload = require('gulp-livereload'); //服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）\nvar concat = require('gulp-concat'); //合并js\nvar uglify = require('gulp-uglify'); //uglify 组件（用于压缩 JS）\nvar rename = require('gulp-rename'); //重命名\nvar babel = require('gulp-babel'); //编译es6\nvar del = require('del');//清除文件\nvar plumber = require('gulp-plumber');//当发生异常时提示错误\n\n```\n最后是我自己设置的项目文件路径\n\n|--/src/--------开发环境\n|--/desc/-------生成目录\n|--/plugin/-----插件存放目录\n|--gulpfile.js\n\n###  编译sass、自动添加css前缀和压缩\n首先我们编译sass，添加前缀，保存到我们指定的目录下面，还没结束，我们还要压缩，给文件添加 .min 后缀再输出压缩文件到指定目录，最后提醒任务完成了：\n\n``` bash\n// Styles任务\ngulp.task('styles', function() {\n    //编译sass\n    return gulp.src(['src/less/*.less','src/css/*.css'])\n    //css 合并\n    .pipe(concat('all.css'))\n    //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n    .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n    .pipe(less())\n    .pipe(gulp.dest('src/css'))\n    //添加前缀\n    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))\n    //保存未压缩文件到我们指定的目录下面\n    .pipe(gulp.dest('src'))\n    //给文件添加.min后缀\n    .pipe(rename({ suffix: '.min' }))\n    //压缩样式文件\n    .pipe(cleancss())\n    //输出压缩文件到指定目录\n    .pipe(gulp.dest('dist/css'))    \n    //提醒任务完成\n    .pipe(notify({ message: 'Styles task complete' }));\n});\n```\n### js代码校验、合并和压缩\n\n``` bash\n// 合并，压缩js文件\n// 找到 js/ 目录下的所有 js 文件，压缩，重命名，最后将处理完成的js存放在 dist/js/ 目录下\ngulp.task('scripts', function() {\n    return gulp.src('src/js/*.js') //可配置你需要检查脚本的具体名字。\n        //js代码校验\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'))\n        //js代码合并\n        .pipe(concat('all.js'))\n        //压缩脚本文件\n        .pipe(uglify())\n        //给文件添加.min后缀\n        .pipe(rename({ suffix: '.min' }))\n        //压缩脚本文件\n        .pipe(uglify())\n        //输出压缩文件到指定目录\n        .pipe(gulp.dest('dist/js'))\n    //提醒任务完成\n    .pipe(notify({ message: 'Scripts task complete' }))\n    console.log('gulp task is done'); //自定义提醒信息\n});\n\n```\n### 图片压缩\n``` bash\n//压缩图片\ngulp.task('testImagemin', function() {\n   return gulp.src('src/img/*.{png,jpg,gif,ico}')\n        .pipe(cache(imagemin({\n            progressive: true,\n            svgoPlugins: [{ removeViewBox: false }],\n            use: [pngquant()]\n        })))\n        .pipe(gulp.dest('dist/img'))\n        .pipe(notify({ message: 'Images task complete' }));\n});\n```\n\n### 事件监听\n``` bash\n//监听 Watch\ngulp.task('testWatch', function() {\n    // Watch .less files\n    gulp.watch('src/**/*.less', ['testLess']); //当所有less文件发生改变时，调用testLess任务\n    // Watch image files\n    gulp.watch('src/**/*.img', ['testImagemin']);\n    // Watch .js files\n    gulp.watch('js/*.js', ['scripts']);\n    // Create LiveReload server\n   livereload.listen();\n   // Watch any files in assets/, reload on change\n   gulp.watch(['dist/**']).on('change', livereload.changed);\n});\n```\n### 清除文件\n\n``` bash\n//clean 清除文件 在任务执行前，最好先清除之前生成的文件\ngulp.task('clean', function(cb) {\n    del(['dist/css', 'dist/js', 'dist/img'], cb)\n});\n```\n### 默认任务\n``` bash\n// 默认任务 Default task\ngulp.task('default', ['clean'],function() {\n    gulp.start('help','testLess', 'scripts', 'testImagemin');\n    gulp.src('src/js/*.js')\n        .pipe(babel({\n            presets: ['es2015']\n        }))\n        .pipe(gulp.dest('src/bjs'))\n});\n```\n\n## 其它插件\n``` bash\n// 检查js脚本的任务\ngulp.task('lint', function() {\n  return gulp.src('js/*.js') //可配置你需要检查脚本的具体名字。\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'));\n});\n\n// 编译Sass\ngulp.task('sass', function() {\n  return gulp.src('./scss/*.scss')\n        .pipe(sass())\n        .pipe(gulp.dest('css/'));//dest()写入文件\n});\n\n// 编译less\ngulp.task('testLess', function() {\n  return gulp.src('src/less/*.less')\n        //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n        .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n        .pipe(less())\n        .pipe(gulp.dest('src/css'));\n});\n```\n\n``` bash\nnpm list | gulp <模糊插件匹配>\n```\n### gulp 最终配置文件\n``` bash\n// 引入gulp\nvar gulp = require('gulp');\n\n// 引入组件\nvar jshint = require('gulp-jshint'); //检查js代码校验\nvar sass = require('gulp-sass'); //编译Sass\nvar less = require('gulp-less'); //编译less\nvar autoprefixer = require('gulp-autoprefixer');\nvar cleancss = require('gulp-clean-css');\nvar imagemin = require('gulp-imagemin'); //压缩图片\nvar notify = require('gulp-notify'); //处理报错\nvar cache = require('gulp-cache'); //图片缓存，只有图片替换了才压缩\nvar pngquant = require('imagemin-pngquant'); //深度压缩图片\nvar livereload = require('gulp-livereload'); //服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）\nvar concat = require('gulp-concat'); //合并js\nvar uglify = require('gulp-uglify'); //uglify 组件（用于压缩 JS）\nvar rename = require('gulp-rename'); //重命名\nvar babel = require('gulp-babel'); //编译es6\nvar del = require('del');//清除文件\nvar plumber = require('gulp-plumber');//当发生异常时提示错误\n\n// 默认任务 Default task\ngulp.task('default', ['clean'] ,function() {\n    gulp.start('help','styles', 'scripts', 'testImagemin');\n    gulp.src('src/js/*.js')\n        .pipe(babel({\n            presets: ['es2015']\n        }))\n        .pipe(gulp.dest('src/bjs'))\n});\n\n// help task\ngulp.task('help', function() {\n    console.log(\"gulp build  文件打包\");\n    console.log(\"gulp watch  文件监控\");\n    console.log(\"gulp help  gulp参数说明\");\n    console.log(\"gulp server  测试sever\");\n    console.log(\"gulp -p  生产环境\");\n    console.log(\"gulp -d  开发环境\");\n    console.log(\"gulp -m <module>  部分模块打包（默认全部打包）\");\n});\n\n// 检查js脚本的任务\ngulp.task('lint', function() {\n  return gulp.src('js/*.js') //可配置你需要检查脚本的具体名字。\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'));\n});\n\n// 编译Sass\ngulp.task('sass', function() {\n  return gulp.src('./scss/*.scss')\n        .pipe(sass())\n        .pipe(gulp.dest('css/'));//dest()写入文件\n});\n\n// 编译less\ngulp.task('testLess', function() {\n  return gulp.src('src/less/*.less')\n        //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n        .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n        .pipe(less())\n        .pipe(gulp.dest('src/css'));\n});\n\n// Styles任务\ngulp.task('styles', function() {\n    //编译sass\n    return gulp.src(['src/less/*.less','src/css/*.css'])\n    //css 合并\n    .pipe(concat('all.css'))\n    //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n    .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n    .pipe(less())\n    .pipe(gulp.dest('src/css'))\n    //添加前缀\n    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))\n    //保存未压缩文件到我们指定的目录下面\n    .pipe(gulp.dest('src'))\n    //给文件添加.min后缀\n    .pipe(rename({ suffix: '.min' }))\n    //压缩样式文件\n    .pipe(cleancss())\n    //输出压缩文件到指定目录\n    .pipe(gulp.dest('dist/css'))    \n    //提醒任务完成\n    .pipe(notify({ message: 'Styles task complete' }));\n});\n\n//压缩图片\ngulp.task('testImagemin', function() {\n   return gulp.src('src/img/*.{png,jpg,gif,ico}')\n        .pipe(cache(imagemin({\n            progressive: true,\n            svgoPlugins: [{ removeViewBox: false }],\n            use: [pngquant()]\n        })))\n        .pipe(gulp.dest('dist/img'))\n        .pipe(notify({ message: 'Images task complete' }));\n});\n\n// 合并，压缩js文件\n// 找到 js/ 目录下的所有 js 文件，压缩，重命名，最后将处理完成的js存放在 dist/js/ 目录下\ngulp.task('scripts', function() {\n    return gulp.src('src/js/*.js') //可配置你需要检查脚本的具体名字。\n        //js代码校验\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'))\n        //js代码合并\n        .pipe(concat('all.js'))\n        //压缩脚本文件\n        .pipe(uglify())\n        //给文件添加.min后缀\n        .pipe(rename({ suffix: '.min' }))\n        //压缩脚本文件\n        .pipe(uglify())\n        //输出压缩文件到指定目录\n        .pipe(gulp.dest('dist/js'))\n    //提醒任务完成\n    .pipe(notify({ message: 'Scripts task complete' }))\n    console.log('gulp task is done'); //自定义提醒信息\n});\n\n//clean 清除文件 在任务执行前，最好先清除之前生成的文件\ngulp.task('clean', function(cb) {\n    return del(['dist/css', 'dist/js', 'dist/img'], cb)\n});\n\n//监听 Watch\ngulp.task('testWatch', function() {\n    // Watch .less files\n    gulp.watch('src/**/*.less', ['testLess']); //当所有less文件发生改变时，调用testLess任务\n    // Watch image files\n    gulp.watch('src/**/*.img', ['testImagemin']);\n    // Watch .js files\n    gulp.watch('js/*.js', ['scripts']);\n    // Create LiveReload server\n   livereload.listen();\n   // Watch any files in assets/, reload on change\n   gulp.watch(['dist/**']).on('change', livereload.changed);\n});\n\n```\n## 运行\n可以运行单独的任务，例如\n\n``` bash\ngulp default\ngulp watch\ngulp clean\n```\n也可以运行整个任务\n``` bash\ngulp\n```\n\n## 总结\n1.安装Node\n2.安装gulp\n3.新建gulpfile.js文件\n4.运行\n\n\n参考文献：\n1.[前端自动化的目的](http://wjkang.github.io/2016/05/02/Gulp/#前端自动化的目的)\n2.[gulp API](https://github.com/gulpjs/gulp/blob/master/docs/API.md)\n3.[gulp教程之gulp-minify-css](http://www.ydcss.com/archives/41)\n4.[gulp-notify处理报错](http://www.tuicool.com/articles/2qeuAbi)\n5.[gulp教程之gulp-imagemin](http://www.ydcss.com/archives/26)\n6.[使用BrowserSync浏览及相关配置](http://www.tuicool.com/articles/fUjMRn)\n7.[gulp入门教程]()\n","source":"_posts/gulp学习笔记.md","raw":"---\ntitle: gulp学习笔记\ndate: 2016-07-12 11:51:33\ncategories: 学习笔记\ntags:\n- gulp\n- 学习笔记\n---\nGulp前端自动化：Gulp的高度集成化开发环境，释放了前端开发中大量时间，如css压缩、js压缩、错误检查、合并js、压缩图片、压缩html、模块构造等，只要你能想到的基本都可以通过Gulp插件去实现。\n\n## 前端自动化的目的\n在一个项目过程中，重复而枯燥的工作太多了……绳命就这样浪费了。\n我们需要一个自动化的工作流程，让我们更专注于coding，而不是coding外的繁琐工作。于是Gulp应运而生。可以想像，如果在node环境下，一行命令搞定一个场景，So Cool…\n然而通过了解，显然可看出Gulp\n### 功能\n\n1.版本控制\n2.检查JS\n3.图片合并\n4.压缩CSS\n5.压缩JS\n6.编译SASS\n\n目前最知名的构建工具： Gulp、Grunt、NPM + Webpack；\n\n. grunt是前端工程化的先驱\n\n. gulp更自然基于流的方式连接任务\n\n. Webpack最年轻，擅长用于依赖管理，配置稍较复杂\n\n. 推荐使用Gulp，Gulp基于nodejs中stream，效率更好语法更自然,不需要编写复杂的配置文件\n\n## 安装前准备：\nGulp是基于 Node.js的，需要要安装 Node.js\n\n为了确保依赖环境正确，我们先执行几个简单的命令检查。\n``` bash\n$ node -v\n\nv5.3.0\n\nNode是一个基于Chrome JavaScript V8引擎建立的一个解释器\n检测Node是否已经安装，如果正确安装的话你会看到所安装的Node的版本号\n\n接下来看看npm，它是 node 的包管理工具，可以利用它安装 gulp 所需的包\n\n$ npm -v\n\n3.3.12\n\n这同样能得到npm的版本号，装 Node 时已经自动安装了npm\n\n```\n## 开始全局安装Gulp\n\n``` bash\n$ npm install -g gulp\n```\n``` bash\n$ gulp -v\n\n[18:39:18] CLI version 3.9.1\n\n得到gulp的版本号，确认安装成功\n\n```\n## 创建工程\n\n``` bash\n\nTestProject     (项目名称)\n|–.git               通过git进行版本控制,项目自动生成这个文件\n|–node_modules       组件包目录\n|–dist               发布环境（编译自动生成的）\n    |–css                 样式文件(style.css style.min.css)\n    |–img                 图片文件(压缩图片\\合并后的图片)\n    |–js                  js文件(main.js main.min.js)\n    |–index.html          静态页面文件(压缩html)\n\n|–src                开发环境\n    |–sass                sass文件\n    |–images              图片文件\n    |–js                  js文件\n    |–index.html          静态文件\n|–gulpfile.js        gulp配置文件\n|–package.json       依赖模块json文件,在项目目录下npm install会安装项目所有的依赖模块，简化项目的安装程序\n\n```\n## 创建package.json\n\n我们先使用npm init来创建类似Nuget package的package.config一样的文件，这样我们就知道项目依赖哪些插件，而且我们不需要把插件提交到代码库，其它程序员只需要使用 npm install 就可以安装所有配置的插件\n\n``` bash\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg> --save` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\nname: (test) test                  //名称\nversion: (1.0.0) 1.0.0             //版本\ndescription: test description      //描述\nentry point: (index.js)            //\ntest command:                      //测试代码\ngit repository:                    //Git版本库\nkeywords:                          //关键词\nauthor: luuman                     //作者\nlicense: (ISC)                     //协议\nAbout to write to F:\\Gulp\\test\\package.json:\n\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"test description\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"luuman\",\n  \"license\": \"ISC\"\n}\n\nIs this ok? (yes)\n\n```\n## 我们要进去到项目的根目录再安装一遍\n\n``` bash\n$ npm install gulp --save-dev\n\n```\n## 新建gulpfile.js文件\n我们将要使用Gulp插件来完成我们以下任务：\n\n. sass的编译（gulp-sass）\n. 自动添加css前缀（gulp-autoprefixer）\n. 压缩css（gulp-minify-css）\n. js代码校验（gulp-jshint）\n. 合并js文件（gulp-concat）\n. 压缩js代码（gulp-uglify）\n. 压缩图片（gulp-imagemin）\n. 自动刷新页面（gulp-livereload）\n. 图片缓存，只有图片替换了才压缩（gulp-cache）\n. 更改提醒（gulp-notify）\n\n### 安装这些插件需要运行如下命令：\n\n```bash\nnpm install gulp-jshint gulp-sass gulp-less gulp-autoprefixer gulp-clean-css gulp-imagemin gulp-notify gulp-cache imagemin-pngquant gulp-livereload gulp-concat gulp-uglify  gulp-rename  gulp-babel del --save-dev\n```\ngulp功能模块的文件会放在项目所在的目录的./node_modules 下\n更多插件可以看这里[gulpjs.com/plugins/](http://gulpjs.com/plugins/)\n\n接着我们要创建一个gulpfile.js在根目录下，gulp只有四个API： task，watch，src，和 dest\n\n``` bash\ntask--这个API用来创建任务，在命令行下可以输入 gulp test 来执行test的任务。\nwatch--这个API用来监听任务。\nsrc--这个API设置需要处理的文件的路径，可以是多个文件以数组的形式[main.scss, vender.scss]，也可以是正则表达式/**/*.scss。\n\ndest--这个API设置生成文件的路径，一个任务可以有多个生成路径，一个可以输出未压缩的版本，另一个可以输出压缩后的版本。\n\n```\n### 加载插件：\n\n``` bash\n// 引入gulp\nvar gulp = require('gulp');\n\n// 引入组件\nvar jshint = require('gulp-jshint'); //检查js代码校验\nvar sass = require('gulp-sass'); //编译Sass\nvar less = require('gulp-less'); //编译less\nvar autoprefixer = require('gulp-autoprefixer');\nvar cleancss = require('gulp-clean-css');\nvar imagemin = require('gulp-imagemin'); //压缩图片\nvar notify = require('gulp-notify'); //处理报错\nvar cache = require('gulp-cache'); //图片缓存，只有图片替换了才压缩\nvar pngquant = require('imagemin-pngquant'); //深度压缩图片\nvar livereload = require('gulp-livereload'); //服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）\nvar concat = require('gulp-concat'); //合并js\nvar uglify = require('gulp-uglify'); //uglify 组件（用于压缩 JS）\nvar rename = require('gulp-rename'); //重命名\nvar babel = require('gulp-babel'); //编译es6\nvar del = require('del');//清除文件\nvar plumber = require('gulp-plumber');//当发生异常时提示错误\n\n```\n最后是我自己设置的项目文件路径\n\n|--/src/--------开发环境\n|--/desc/-------生成目录\n|--/plugin/-----插件存放目录\n|--gulpfile.js\n\n###  编译sass、自动添加css前缀和压缩\n首先我们编译sass，添加前缀，保存到我们指定的目录下面，还没结束，我们还要压缩，给文件添加 .min 后缀再输出压缩文件到指定目录，最后提醒任务完成了：\n\n``` bash\n// Styles任务\ngulp.task('styles', function() {\n    //编译sass\n    return gulp.src(['src/less/*.less','src/css/*.css'])\n    //css 合并\n    .pipe(concat('all.css'))\n    //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n    .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n    .pipe(less())\n    .pipe(gulp.dest('src/css'))\n    //添加前缀\n    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))\n    //保存未压缩文件到我们指定的目录下面\n    .pipe(gulp.dest('src'))\n    //给文件添加.min后缀\n    .pipe(rename({ suffix: '.min' }))\n    //压缩样式文件\n    .pipe(cleancss())\n    //输出压缩文件到指定目录\n    .pipe(gulp.dest('dist/css'))    \n    //提醒任务完成\n    .pipe(notify({ message: 'Styles task complete' }));\n});\n```\n### js代码校验、合并和压缩\n\n``` bash\n// 合并，压缩js文件\n// 找到 js/ 目录下的所有 js 文件，压缩，重命名，最后将处理完成的js存放在 dist/js/ 目录下\ngulp.task('scripts', function() {\n    return gulp.src('src/js/*.js') //可配置你需要检查脚本的具体名字。\n        //js代码校验\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'))\n        //js代码合并\n        .pipe(concat('all.js'))\n        //压缩脚本文件\n        .pipe(uglify())\n        //给文件添加.min后缀\n        .pipe(rename({ suffix: '.min' }))\n        //压缩脚本文件\n        .pipe(uglify())\n        //输出压缩文件到指定目录\n        .pipe(gulp.dest('dist/js'))\n    //提醒任务完成\n    .pipe(notify({ message: 'Scripts task complete' }))\n    console.log('gulp task is done'); //自定义提醒信息\n});\n\n```\n### 图片压缩\n``` bash\n//压缩图片\ngulp.task('testImagemin', function() {\n   return gulp.src('src/img/*.{png,jpg,gif,ico}')\n        .pipe(cache(imagemin({\n            progressive: true,\n            svgoPlugins: [{ removeViewBox: false }],\n            use: [pngquant()]\n        })))\n        .pipe(gulp.dest('dist/img'))\n        .pipe(notify({ message: 'Images task complete' }));\n});\n```\n\n### 事件监听\n``` bash\n//监听 Watch\ngulp.task('testWatch', function() {\n    // Watch .less files\n    gulp.watch('src/**/*.less', ['testLess']); //当所有less文件发生改变时，调用testLess任务\n    // Watch image files\n    gulp.watch('src/**/*.img', ['testImagemin']);\n    // Watch .js files\n    gulp.watch('js/*.js', ['scripts']);\n    // Create LiveReload server\n   livereload.listen();\n   // Watch any files in assets/, reload on change\n   gulp.watch(['dist/**']).on('change', livereload.changed);\n});\n```\n### 清除文件\n\n``` bash\n//clean 清除文件 在任务执行前，最好先清除之前生成的文件\ngulp.task('clean', function(cb) {\n    del(['dist/css', 'dist/js', 'dist/img'], cb)\n});\n```\n### 默认任务\n``` bash\n// 默认任务 Default task\ngulp.task('default', ['clean'],function() {\n    gulp.start('help','testLess', 'scripts', 'testImagemin');\n    gulp.src('src/js/*.js')\n        .pipe(babel({\n            presets: ['es2015']\n        }))\n        .pipe(gulp.dest('src/bjs'))\n});\n```\n\n## 其它插件\n``` bash\n// 检查js脚本的任务\ngulp.task('lint', function() {\n  return gulp.src('js/*.js') //可配置你需要检查脚本的具体名字。\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'));\n});\n\n// 编译Sass\ngulp.task('sass', function() {\n  return gulp.src('./scss/*.scss')\n        .pipe(sass())\n        .pipe(gulp.dest('css/'));//dest()写入文件\n});\n\n// 编译less\ngulp.task('testLess', function() {\n  return gulp.src('src/less/*.less')\n        //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n        .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n        .pipe(less())\n        .pipe(gulp.dest('src/css'));\n});\n```\n\n``` bash\nnpm list | gulp <模糊插件匹配>\n```\n### gulp 最终配置文件\n``` bash\n// 引入gulp\nvar gulp = require('gulp');\n\n// 引入组件\nvar jshint = require('gulp-jshint'); //检查js代码校验\nvar sass = require('gulp-sass'); //编译Sass\nvar less = require('gulp-less'); //编译less\nvar autoprefixer = require('gulp-autoprefixer');\nvar cleancss = require('gulp-clean-css');\nvar imagemin = require('gulp-imagemin'); //压缩图片\nvar notify = require('gulp-notify'); //处理报错\nvar cache = require('gulp-cache'); //图片缓存，只有图片替换了才压缩\nvar pngquant = require('imagemin-pngquant'); //深度压缩图片\nvar livereload = require('gulp-livereload'); //服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）\nvar concat = require('gulp-concat'); //合并js\nvar uglify = require('gulp-uglify'); //uglify 组件（用于压缩 JS）\nvar rename = require('gulp-rename'); //重命名\nvar babel = require('gulp-babel'); //编译es6\nvar del = require('del');//清除文件\nvar plumber = require('gulp-plumber');//当发生异常时提示错误\n\n// 默认任务 Default task\ngulp.task('default', ['clean'] ,function() {\n    gulp.start('help','styles', 'scripts', 'testImagemin');\n    gulp.src('src/js/*.js')\n        .pipe(babel({\n            presets: ['es2015']\n        }))\n        .pipe(gulp.dest('src/bjs'))\n});\n\n// help task\ngulp.task('help', function() {\n    console.log(\"gulp build  文件打包\");\n    console.log(\"gulp watch  文件监控\");\n    console.log(\"gulp help  gulp参数说明\");\n    console.log(\"gulp server  测试sever\");\n    console.log(\"gulp -p  生产环境\");\n    console.log(\"gulp -d  开发环境\");\n    console.log(\"gulp -m <module>  部分模块打包（默认全部打包）\");\n});\n\n// 检查js脚本的任务\ngulp.task('lint', function() {\n  return gulp.src('js/*.js') //可配置你需要检查脚本的具体名字。\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'));\n});\n\n// 编译Sass\ngulp.task('sass', function() {\n  return gulp.src('./scss/*.scss')\n        .pipe(sass())\n        .pipe(gulp.dest('css/'));//dest()写入文件\n});\n\n// 编译less\ngulp.task('testLess', function() {\n  return gulp.src('src/less/*.less')\n        //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n        .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n        .pipe(less())\n        .pipe(gulp.dest('src/css'));\n});\n\n// Styles任务\ngulp.task('styles', function() {\n    //编译sass\n    return gulp.src(['src/less/*.less','src/css/*.css'])\n    //css 合并\n    .pipe(concat('all.css'))\n    //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber\n    .pipe(plumber({ errorHandler: notify.onError('Error: <%= error.message %>') }))\n    .pipe(less())\n    .pipe(gulp.dest('src/css'))\n    //添加前缀\n    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))\n    //保存未压缩文件到我们指定的目录下面\n    .pipe(gulp.dest('src'))\n    //给文件添加.min后缀\n    .pipe(rename({ suffix: '.min' }))\n    //压缩样式文件\n    .pipe(cleancss())\n    //输出压缩文件到指定目录\n    .pipe(gulp.dest('dist/css'))    \n    //提醒任务完成\n    .pipe(notify({ message: 'Styles task complete' }));\n});\n\n//压缩图片\ngulp.task('testImagemin', function() {\n   return gulp.src('src/img/*.{png,jpg,gif,ico}')\n        .pipe(cache(imagemin({\n            progressive: true,\n            svgoPlugins: [{ removeViewBox: false }],\n            use: [pngquant()]\n        })))\n        .pipe(gulp.dest('dist/img'))\n        .pipe(notify({ message: 'Images task complete' }));\n});\n\n// 合并，压缩js文件\n// 找到 js/ 目录下的所有 js 文件，压缩，重命名，最后将处理完成的js存放在 dist/js/ 目录下\ngulp.task('scripts', function() {\n    return gulp.src('src/js/*.js') //可配置你需要检查脚本的具体名字。\n        //js代码校验\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'))\n        //js代码合并\n        .pipe(concat('all.js'))\n        //压缩脚本文件\n        .pipe(uglify())\n        //给文件添加.min后缀\n        .pipe(rename({ suffix: '.min' }))\n        //压缩脚本文件\n        .pipe(uglify())\n        //输出压缩文件到指定目录\n        .pipe(gulp.dest('dist/js'))\n    //提醒任务完成\n    .pipe(notify({ message: 'Scripts task complete' }))\n    console.log('gulp task is done'); //自定义提醒信息\n});\n\n//clean 清除文件 在任务执行前，最好先清除之前生成的文件\ngulp.task('clean', function(cb) {\n    return del(['dist/css', 'dist/js', 'dist/img'], cb)\n});\n\n//监听 Watch\ngulp.task('testWatch', function() {\n    // Watch .less files\n    gulp.watch('src/**/*.less', ['testLess']); //当所有less文件发生改变时，调用testLess任务\n    // Watch image files\n    gulp.watch('src/**/*.img', ['testImagemin']);\n    // Watch .js files\n    gulp.watch('js/*.js', ['scripts']);\n    // Create LiveReload server\n   livereload.listen();\n   // Watch any files in assets/, reload on change\n   gulp.watch(['dist/**']).on('change', livereload.changed);\n});\n\n```\n## 运行\n可以运行单独的任务，例如\n\n``` bash\ngulp default\ngulp watch\ngulp clean\n```\n也可以运行整个任务\n``` bash\ngulp\n```\n\n## 总结\n1.安装Node\n2.安装gulp\n3.新建gulpfile.js文件\n4.运行\n\n\n参考文献：\n1.[前端自动化的目的](http://wjkang.github.io/2016/05/02/Gulp/#前端自动化的目的)\n2.[gulp API](https://github.com/gulpjs/gulp/blob/master/docs/API.md)\n3.[gulp教程之gulp-minify-css](http://www.ydcss.com/archives/41)\n4.[gulp-notify处理报错](http://www.tuicool.com/articles/2qeuAbi)\n5.[gulp教程之gulp-imagemin](http://www.ydcss.com/archives/26)\n6.[使用BrowserSync浏览及相关配置](http://www.tuicool.com/articles/fUjMRn)\n7.[gulp入门教程]()\n","slug":"gulp学习笔记","published":1,"updated":"2020-02-15T19:07:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr6eiskd00093fwyq642sdwd","content":"<p>Gulp前端自动化：Gulp的高度集成化开发环境，释放了前端开发中大量时间，如css压缩、js压缩、错误检查、合并js、压缩图片、压缩html、模块构造等，只要你能想到的基本都可以通过Gulp插件去实现。</p>\n<h2 id=\"前端自动化的目的\"><a href=\"#前端自动化的目的\" class=\"headerlink\" title=\"前端自动化的目的\"></a>前端自动化的目的</h2><p>在一个项目过程中，重复而枯燥的工作太多了……绳命就这样浪费了。<br>我们需要一个自动化的工作流程，让我们更专注于coding，而不是coding外的繁琐工作。于是Gulp应运而生。可以想像，如果在node环境下，一行命令搞定一个场景，So Cool…<br>然而通过了解，显然可看出Gulp</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>1.版本控制<br>2.检查JS<br>3.图片合并<br>4.压缩CSS<br>5.压缩JS<br>6.编译SASS</p>\n<p>目前最知名的构建工具： Gulp、Grunt、NPM + Webpack；</p>\n<p>. grunt是前端工程化的先驱</p>\n<p>. gulp更自然基于流的方式连接任务</p>\n<p>. Webpack最年轻，擅长用于依赖管理，配置稍较复杂</p>\n<p>. 推荐使用Gulp，Gulp基于nodejs中stream，效率更好语法更自然,不需要编写复杂的配置文件</p>\n<h2 id=\"安装前准备：\"><a href=\"#安装前准备：\" class=\"headerlink\" title=\"安装前准备：\"></a>安装前准备：</h2><p>Gulp是基于 Node.js的，需要要安装 Node.js</p>\n<p>为了确保依赖环境正确，我们先执行几个简单的命令检查。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br><span class=\"line\"></span><br><span class=\"line\">v5.3.0</span><br><span class=\"line\"></span><br><span class=\"line\">Node是一个基于Chrome JavaScript V8引擎建立的一个解释器</span><br><span class=\"line\">检测Node是否已经安装，如果正确安装的话你会看到所安装的Node的版本号</span><br><span class=\"line\"></span><br><span class=\"line\">接下来看看npm，它是 node 的包管理工具，可以利用它安装 gulp 所需的包</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm -v</span><br><span class=\"line\"></span><br><span class=\"line\">3.3.12</span><br><span class=\"line\"></span><br><span class=\"line\">这同样能得到npm的版本号，装 Node 时已经自动安装了npm</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"开始全局安装Gulp\"><a href=\"#开始全局安装Gulp\" class=\"headerlink\" title=\"开始全局安装Gulp\"></a>开始全局安装Gulp</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g gulp</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp -v</span><br><span class=\"line\"></span><br><span class=\"line\">[18:39:18] CLI version 3.9.1</span><br><span class=\"line\"></span><br><span class=\"line\">得到gulp的版本号，确认安装成功</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">TestProject     (项目名称)</span><br><span class=\"line\">|–.git               通过git进行版本控制,项目自动生成这个文件</span><br><span class=\"line\">|–node_modules       组件包目录</span><br><span class=\"line\">|–dist               发布环境（编译自动生成的）</span><br><span class=\"line\">    |–css                 样式文件(style.css style.min.css)</span><br><span class=\"line\">    |–img                 图片文件(压缩图片\\合并后的图片)</span><br><span class=\"line\">    |–js                  js文件(main.js main.min.js)</span><br><span class=\"line\">    |–index.html          静态页面文件(压缩html)</span><br><span class=\"line\"></span><br><span class=\"line\">|–src                开发环境</span><br><span class=\"line\">    |–sass                sass文件</span><br><span class=\"line\">    |–images              图片文件</span><br><span class=\"line\">    |–js                  js文件</span><br><span class=\"line\">    |–index.html          静态文件</span><br><span class=\"line\">|–gulpfile.js        gulp配置文件</span><br><span class=\"line\">|–package.json       依赖模块json文件,在项目目录下npm install会安装项目所有的依赖模块，简化项目的安装程序</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建package-json\"><a href=\"#创建package-json\" class=\"headerlink\" title=\"创建package.json\"></a>创建package.json</h2><p>我们先使用npm init来创建类似Nuget package的package.config一样的文件，这样我们就知道项目依赖哪些插件，而且我们不需要把插件提交到代码库，其它程序员只需要使用 npm install 就可以安装所有配置的插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See `npm <span class=\"built_in\">help</span> json` <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm install &lt;pkg&gt; --save` afterwards to install a package and</span><br><span class=\"line\">save it as a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">name: (<span class=\"built_in\">test</span>) <span class=\"built_in\">test</span>                  //名称</span><br><span class=\"line\">version: (1.0.0) 1.0.0             //版本</span><br><span class=\"line\">description: <span class=\"built_in\">test</span> description      //描述</span><br><span class=\"line\">entry point: (index.js)            //</span><br><span class=\"line\"><span class=\"built_in\">test</span> <span class=\"built_in\">command</span>:                      //测试代码</span><br><span class=\"line\">git repository:                    //Git版本库</span><br><span class=\"line\">keywords:                          //关键词</span><br><span class=\"line\">author: luuman                     //作者</span><br><span class=\"line\">license: (ISC)                     //协议</span><br><span class=\"line\">About to write to F:\\Gulp\\<span class=\"built_in\">test</span>\\package.json:</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"test description\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"luuman\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Is this ok? (yes)</span><br></pre></td></tr></table></figure>\n<h2 id=\"我们要进去到项目的根目录再安装一遍\"><a href=\"#我们要进去到项目的根目录再安装一遍\" class=\"headerlink\" title=\"我们要进去到项目的根目录再安装一遍\"></a>我们要进去到项目的根目录再安装一遍</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install gulp --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"新建gulpfile-js文件\"><a href=\"#新建gulpfile-js文件\" class=\"headerlink\" title=\"新建gulpfile.js文件\"></a>新建gulpfile.js文件</h2><p>我们将要使用Gulp插件来完成我们以下任务：</p>\n<p>. sass的编译（gulp-sass）<br>. 自动添加css前缀（gulp-autoprefixer）<br>. 压缩css（gulp-minify-css）<br>. js代码校验（gulp-jshint）<br>. 合并js文件（gulp-concat）<br>. 压缩js代码（gulp-uglify）<br>. 压缩图片（gulp-imagemin）<br>. 自动刷新页面（gulp-livereload）<br>. 图片缓存，只有图片替换了才压缩（gulp-cache）<br>. 更改提醒（gulp-notify）</p>\n<h3 id=\"安装这些插件需要运行如下命令：\"><a href=\"#安装这些插件需要运行如下命令：\" class=\"headerlink\" title=\"安装这些插件需要运行如下命令：\"></a>安装这些插件需要运行如下命令：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-jshint gulp-sass gulp-less gulp-autoprefixer gulp-clean-css gulp-imagemin gulp-notify gulp-cache imagemin-pngquant gulp-livereload gulp-concat gulp-uglify  gulp-rename  gulp-babel del --save-dev</span><br></pre></td></tr></table></figure>\n<p>gulp功能模块的文件会放在项目所在的目录的./node_modules 下<br>更多插件可以看这里<a href=\"http://gulpjs.com/plugins/\" target=\"_blank\" rel=\"noopener\">gulpjs.com/plugins/</a></p>\n<p>接着我们要创建一个gulpfile.js在根目录下，gulp只有四个API： task，watch，src，和 dest</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task--这个API用来创建任务，在命令行下可以输入 gulp <span class=\"built_in\">test</span> 来执行<span class=\"built_in\">test</span>的任务。</span><br><span class=\"line\">watch--这个API用来监听任务。</span><br><span class=\"line\">src--这个API设置需要处理的文件的路径，可以是多个文件以数组的形式[main.scss, vender.scss]，也可以是正则表达式/**/*.scss。</span><br><span class=\"line\"></span><br><span class=\"line\">dest--这个API设置生成文件的路径，一个任务可以有多个生成路径，一个可以输出未压缩的版本，另一个可以输出压缩后的版本。</span><br></pre></td></tr></table></figure>\n<h3 id=\"加载插件：\"><a href=\"#加载插件：\" class=\"headerlink\" title=\"加载插件：\"></a>加载插件：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入gulp</span><br><span class=\"line\">var gulp = require(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">// 引入组件</span><br><span class=\"line\">var jshint = require(<span class=\"string\">'gulp-jshint'</span>); //检查js代码校验</span><br><span class=\"line\">var sass = require(<span class=\"string\">'gulp-sass'</span>); //编译Sass</span><br><span class=\"line\">var less = require(<span class=\"string\">'gulp-less'</span>); //编译less</span><br><span class=\"line\">var autoprefixer = require(<span class=\"string\">'gulp-autoprefixer'</span>);</span><br><span class=\"line\">var cleancss = require(<span class=\"string\">'gulp-clean-css'</span>);</span><br><span class=\"line\">var imagemin = require(<span class=\"string\">'gulp-imagemin'</span>); //压缩图片</span><br><span class=\"line\">var notify = require(<span class=\"string\">'gulp-notify'</span>); //处理报错</span><br><span class=\"line\">var cache = require(<span class=\"string\">'gulp-cache'</span>); //图片缓存，只有图片替换了才压缩</span><br><span class=\"line\">var pngquant = require(<span class=\"string\">'imagemin-pngquant'</span>); //深度压缩图片</span><br><span class=\"line\">var livereload = require(<span class=\"string\">'gulp-livereload'</span>); //服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）</span><br><span class=\"line\">var concat = require(<span class=\"string\">'gulp-concat'</span>); //合并js</span><br><span class=\"line\">var uglify = require(<span class=\"string\">'gulp-uglify'</span>); //uglify 组件（用于压缩 JS）</span><br><span class=\"line\">var rename = require(<span class=\"string\">'gulp-rename'</span>); //重命名</span><br><span class=\"line\">var babel = require(<span class=\"string\">'gulp-babel'</span>); //编译es6</span><br><span class=\"line\">var del = require(<span class=\"string\">'del'</span>);//清除文件</span><br><span class=\"line\">var plumber = require(<span class=\"string\">'gulp-plumber'</span>);//当发生异常时提示错误</span><br></pre></td></tr></table></figure>\n<p>最后是我自己设置的项目文件路径</p>\n<p>|–/src/——–开发环境<br>|–/desc/——-生成目录<br>|–/plugin/—–插件存放目录<br>|–gulpfile.js</p>\n<h3 id=\"编译sass、自动添加css前缀和压缩\"><a href=\"#编译sass、自动添加css前缀和压缩\" class=\"headerlink\" title=\"编译sass、自动添加css前缀和压缩\"></a>编译sass、自动添加css前缀和压缩</h3><p>首先我们编译sass，添加前缀，保存到我们指定的目录下面，还没结束，我们还要压缩，给文件添加 .min 后缀再输出压缩文件到指定目录，最后提醒任务完成了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Styles任务</span><br><span class=\"line\">gulp.task(<span class=\"string\">'styles'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    //编译sass</span><br><span class=\"line\">    <span class=\"built_in\">return</span> gulp.src([<span class=\"string\">'src/less/*.less'</span>,<span class=\"string\">'src/css/*.css'</span>])</span><br><span class=\"line\">    //css 合并</span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'all.css'</span>))</span><br><span class=\"line\">    //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber</span><br><span class=\"line\">    .pipe(plumber(&#123; errorHandler: notify.onError(<span class=\"string\">'Error: &lt;%= error.message %&gt;'</span>) &#125;))</span><br><span class=\"line\">    .pipe(less())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'src/css'</span>))</span><br><span class=\"line\">    //添加前缀</span><br><span class=\"line\">    .pipe(autoprefixer(<span class=\"string\">'last 2 version'</span>, <span class=\"string\">'safari 5'</span>, <span class=\"string\">'ie 8'</span>, <span class=\"string\">'ie 9'</span>, <span class=\"string\">'opera 12.1'</span>, <span class=\"string\">'ios 6'</span>, <span class=\"string\">'android 4'</span>))</span><br><span class=\"line\">    //保存未压缩文件到我们指定的目录下面</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'src'</span>))</span><br><span class=\"line\">    //给文件添加.min后缀</span><br><span class=\"line\">    .pipe(rename(&#123; suffix: <span class=\"string\">'.min'</span> &#125;))</span><br><span class=\"line\">    //压缩样式文件</span><br><span class=\"line\">    .pipe(cleancss())</span><br><span class=\"line\">    //输出压缩文件到指定目录</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))    </span><br><span class=\"line\">    //提醒任务完成</span><br><span class=\"line\">    .pipe(notify(&#123; message: <span class=\"string\">'Styles task complete'</span> &#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"js代码校验、合并和压缩\"><a href=\"#js代码校验、合并和压缩\" class=\"headerlink\" title=\"js代码校验、合并和压缩\"></a>js代码校验、合并和压缩</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 合并，压缩js文件</span><br><span class=\"line\">// 找到 js/ 目录下的所有 js 文件，压缩，重命名，最后将处理完成的js存放在 dist/js/ 目录下</span><br><span class=\"line\">gulp.task(<span class=\"string\">'scripts'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'src/js/*.js'</span>) //可配置你需要检查脚本的具体名字。</span><br><span class=\"line\">        //js代码校验</span><br><span class=\"line\">        .pipe(jshint())</span><br><span class=\"line\">        .pipe(jshint.reporter(<span class=\"string\">'default'</span>))</span><br><span class=\"line\">        //js代码合并</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'all.js'</span>))</span><br><span class=\"line\">        //压缩脚本文件</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        //给文件添加.min后缀</span><br><span class=\"line\">        .pipe(rename(&#123; suffix: <span class=\"string\">'.min'</span> &#125;))</span><br><span class=\"line\">        //压缩脚本文件</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        //输出压缩文件到指定目录</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</span><br><span class=\"line\">    //提醒任务完成</span><br><span class=\"line\">    .pipe(notify(&#123; message: <span class=\"string\">'Scripts task complete'</span> &#125;))</span><br><span class=\"line\">    console.log(<span class=\"string\">'gulp task is done'</span>); //自定义提醒信息</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//压缩图片</span><br><span class=\"line\">gulp.task(<span class=\"string\">'testImagemin'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">   <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'src/img/*.&#123;png,jpg,gif,ico&#125;'</span>)</span><br><span class=\"line\">        .pipe(cache(imagemin(&#123;</span><br><span class=\"line\">            progressive: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            svgoPlugins: [&#123; removeViewBox: <span class=\"literal\">false</span> &#125;],</span><br><span class=\"line\">            use: [pngquant()]</span><br><span class=\"line\">        &#125;)))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/img'</span>))</span><br><span class=\"line\">        .pipe(notify(&#123; message: <span class=\"string\">'Images task complete'</span> &#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//监听 Watch</span><br><span class=\"line\">gulp.task(<span class=\"string\">'testWatch'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // Watch .less files</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/**/*.less'</span>, [<span class=\"string\">'testLess'</span>]); //当所有less文件发生改变时，调用testLess任务</span><br><span class=\"line\">    // Watch image files</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/**/*.img'</span>, [<span class=\"string\">'testImagemin'</span>]);</span><br><span class=\"line\">    // Watch .js files</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'js/*.js'</span>, [<span class=\"string\">'scripts'</span>]);</span><br><span class=\"line\">    // Create LiveReload server</span><br><span class=\"line\">   livereload.listen();</span><br><span class=\"line\">   // Watch any files <span class=\"keyword\">in</span> assets/, reload on change</span><br><span class=\"line\">   gulp.watch([<span class=\"string\">'dist/**'</span>]).on(<span class=\"string\">'change'</span>, livereload.changed);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除文件\"><a href=\"#清除文件\" class=\"headerlink\" title=\"清除文件\"></a>清除文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//clean 清除文件 在任务执行前，最好先清除之前生成的文件</span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"keyword\">function</span>(cb) &#123;</span><br><span class=\"line\">    del([<span class=\"string\">'dist/css'</span>, <span class=\"string\">'dist/js'</span>, <span class=\"string\">'dist/img'</span>], cb)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"默认任务\"><a href=\"#默认任务\" class=\"headerlink\" title=\"默认任务\"></a>默认任务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 默认任务 Default task</span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'clean'</span>],<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    gulp.start(<span class=\"string\">'help'</span>,<span class=\"string\">'testLess'</span>, <span class=\"string\">'scripts'</span>, <span class=\"string\">'testImagemin'</span>);</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">        .pipe(babel(&#123;</span><br><span class=\"line\">            presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'src/bjs'</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"其它插件\"><a href=\"#其它插件\" class=\"headerlink\" title=\"其它插件\"></a>其它插件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 检查js脚本的任务</span><br><span class=\"line\">gulp.task(<span class=\"string\">'lint'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'js/*.js'</span>) //可配置你需要检查脚本的具体名字。</span><br><span class=\"line\">        .pipe(jshint())</span><br><span class=\"line\">        .pipe(jshint.reporter(<span class=\"string\">'default'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 编译Sass</span><br><span class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'./scss/*.scss'</span>)</span><br><span class=\"line\">        .pipe(sass())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'css/'</span>));//dest()写入文件</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 编译less</span><br><span class=\"line\">gulp.task(<span class=\"string\">'testLess'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'src/less/*.less'</span>)</span><br><span class=\"line\">        //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber</span><br><span class=\"line\">        .pipe(plumber(&#123; errorHandler: notify.onError(<span class=\"string\">'Error: &lt;%= error.message %&gt;'</span>) &#125;))</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'src/css'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm list | gulp &lt;模糊插件匹配&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"gulp-最终配置文件\"><a href=\"#gulp-最终配置文件\" class=\"headerlink\" title=\"gulp 最终配置文件\"></a>gulp 最终配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入gulp</span><br><span class=\"line\">var gulp = require(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">// 引入组件</span><br><span class=\"line\">var jshint = require(<span class=\"string\">'gulp-jshint'</span>); //检查js代码校验</span><br><span class=\"line\">var sass = require(<span class=\"string\">'gulp-sass'</span>); //编译Sass</span><br><span class=\"line\">var less = require(<span class=\"string\">'gulp-less'</span>); //编译less</span><br><span class=\"line\">var autoprefixer = require(<span class=\"string\">'gulp-autoprefixer'</span>);</span><br><span class=\"line\">var cleancss = require(<span class=\"string\">'gulp-clean-css'</span>);</span><br><span class=\"line\">var imagemin = require(<span class=\"string\">'gulp-imagemin'</span>); //压缩图片</span><br><span class=\"line\">var notify = require(<span class=\"string\">'gulp-notify'</span>); //处理报错</span><br><span class=\"line\">var cache = require(<span class=\"string\">'gulp-cache'</span>); //图片缓存，只有图片替换了才压缩</span><br><span class=\"line\">var pngquant = require(<span class=\"string\">'imagemin-pngquant'</span>); //深度压缩图片</span><br><span class=\"line\">var livereload = require(<span class=\"string\">'gulp-livereload'</span>); //服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）</span><br><span class=\"line\">var concat = require(<span class=\"string\">'gulp-concat'</span>); //合并js</span><br><span class=\"line\">var uglify = require(<span class=\"string\">'gulp-uglify'</span>); //uglify 组件（用于压缩 JS）</span><br><span class=\"line\">var rename = require(<span class=\"string\">'gulp-rename'</span>); //重命名</span><br><span class=\"line\">var babel = require(<span class=\"string\">'gulp-babel'</span>); //编译es6</span><br><span class=\"line\">var del = require(<span class=\"string\">'del'</span>);//清除文件</span><br><span class=\"line\">var plumber = require(<span class=\"string\">'gulp-plumber'</span>);//当发生异常时提示错误</span><br><span class=\"line\"></span><br><span class=\"line\">// 默认任务 Default task</span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'clean'</span>] ,<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    gulp.start(<span class=\"string\">'help'</span>,<span class=\"string\">'styles'</span>, <span class=\"string\">'scripts'</span>, <span class=\"string\">'testImagemin'</span>);</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">        .pipe(babel(&#123;</span><br><span class=\"line\">            presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'src/bjs'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// <span class=\"built_in\">help</span> task</span><br><span class=\"line\">gulp.task(<span class=\"string\">'help'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp build  文件打包\"</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp watch  文件监控\"</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp help  gulp参数说明\"</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp server  测试sever\"</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp -p  生产环境\"</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp -d  开发环境\"</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp -m &lt;module&gt;  部分模块打包（默认全部打包）\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 检查js脚本的任务</span><br><span class=\"line\">gulp.task(<span class=\"string\">'lint'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'js/*.js'</span>) //可配置你需要检查脚本的具体名字。</span><br><span class=\"line\">        .pipe(jshint())</span><br><span class=\"line\">        .pipe(jshint.reporter(<span class=\"string\">'default'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 编译Sass</span><br><span class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'./scss/*.scss'</span>)</span><br><span class=\"line\">        .pipe(sass())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'css/'</span>));//dest()写入文件</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 编译less</span><br><span class=\"line\">gulp.task(<span class=\"string\">'testLess'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'src/less/*.less'</span>)</span><br><span class=\"line\">        //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber</span><br><span class=\"line\">        .pipe(plumber(&#123; errorHandler: notify.onError(<span class=\"string\">'Error: &lt;%= error.message %&gt;'</span>) &#125;))</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'src/css'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Styles任务</span><br><span class=\"line\">gulp.task(<span class=\"string\">'styles'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    //编译sass</span><br><span class=\"line\">    <span class=\"built_in\">return</span> gulp.src([<span class=\"string\">'src/less/*.less'</span>,<span class=\"string\">'src/css/*.css'</span>])</span><br><span class=\"line\">    //css 合并</span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'all.css'</span>))</span><br><span class=\"line\">    //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber</span><br><span class=\"line\">    .pipe(plumber(&#123; errorHandler: notify.onError(<span class=\"string\">'Error: &lt;%= error.message %&gt;'</span>) &#125;))</span><br><span class=\"line\">    .pipe(less())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'src/css'</span>))</span><br><span class=\"line\">    //添加前缀</span><br><span class=\"line\">    .pipe(autoprefixer(<span class=\"string\">'last 2 version'</span>, <span class=\"string\">'safari 5'</span>, <span class=\"string\">'ie 8'</span>, <span class=\"string\">'ie 9'</span>, <span class=\"string\">'opera 12.1'</span>, <span class=\"string\">'ios 6'</span>, <span class=\"string\">'android 4'</span>))</span><br><span class=\"line\">    //保存未压缩文件到我们指定的目录下面</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'src'</span>))</span><br><span class=\"line\">    //给文件添加.min后缀</span><br><span class=\"line\">    .pipe(rename(&#123; suffix: <span class=\"string\">'.min'</span> &#125;))</span><br><span class=\"line\">    //压缩样式文件</span><br><span class=\"line\">    .pipe(cleancss())</span><br><span class=\"line\">    //输出压缩文件到指定目录</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))    </span><br><span class=\"line\">    //提醒任务完成</span><br><span class=\"line\">    .pipe(notify(&#123; message: <span class=\"string\">'Styles task complete'</span> &#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//压缩图片</span><br><span class=\"line\">gulp.task(<span class=\"string\">'testImagemin'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">   <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'src/img/*.&#123;png,jpg,gif,ico&#125;'</span>)</span><br><span class=\"line\">        .pipe(cache(imagemin(&#123;</span><br><span class=\"line\">            progressive: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            svgoPlugins: [&#123; removeViewBox: <span class=\"literal\">false</span> &#125;],</span><br><span class=\"line\">            use: [pngquant()]</span><br><span class=\"line\">        &#125;)))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/img'</span>))</span><br><span class=\"line\">        .pipe(notify(&#123; message: <span class=\"string\">'Images task complete'</span> &#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 合并，压缩js文件</span><br><span class=\"line\">// 找到 js/ 目录下的所有 js 文件，压缩，重命名，最后将处理完成的js存放在 dist/js/ 目录下</span><br><span class=\"line\">gulp.task(<span class=\"string\">'scripts'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'src/js/*.js'</span>) //可配置你需要检查脚本的具体名字。</span><br><span class=\"line\">        //js代码校验</span><br><span class=\"line\">        .pipe(jshint())</span><br><span class=\"line\">        .pipe(jshint.reporter(<span class=\"string\">'default'</span>))</span><br><span class=\"line\">        //js代码合并</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'all.js'</span>))</span><br><span class=\"line\">        //压缩脚本文件</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        //给文件添加.min后缀</span><br><span class=\"line\">        .pipe(rename(&#123; suffix: <span class=\"string\">'.min'</span> &#125;))</span><br><span class=\"line\">        //压缩脚本文件</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        //输出压缩文件到指定目录</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</span><br><span class=\"line\">    //提醒任务完成</span><br><span class=\"line\">    .pipe(notify(&#123; message: <span class=\"string\">'Scripts task complete'</span> &#125;))</span><br><span class=\"line\">    console.log(<span class=\"string\">'gulp task is done'</span>); //自定义提醒信息</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//clean 清除文件 在任务执行前，最好先清除之前生成的文件</span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"keyword\">function</span>(cb) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> del([<span class=\"string\">'dist/css'</span>, <span class=\"string\">'dist/js'</span>, <span class=\"string\">'dist/img'</span>], cb)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//监听 Watch</span><br><span class=\"line\">gulp.task(<span class=\"string\">'testWatch'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // Watch .less files</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/**/*.less'</span>, [<span class=\"string\">'testLess'</span>]); //当所有less文件发生改变时，调用testLess任务</span><br><span class=\"line\">    // Watch image files</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/**/*.img'</span>, [<span class=\"string\">'testImagemin'</span>]);</span><br><span class=\"line\">    // Watch .js files</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'js/*.js'</span>, [<span class=\"string\">'scripts'</span>]);</span><br><span class=\"line\">    // Create LiveReload server</span><br><span class=\"line\">   livereload.listen();</span><br><span class=\"line\">   // Watch any files <span class=\"keyword\">in</span> assets/, reload on change</span><br><span class=\"line\">   gulp.watch([<span class=\"string\">'dist/**'</span>]).on(<span class=\"string\">'change'</span>, livereload.changed);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>可以运行单独的任务，例如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp default</span><br><span class=\"line\">gulp watch</span><br><span class=\"line\">gulp clean</span><br></pre></td></tr></table></figure>\n<p>也可以运行整个任务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1.安装Node<br>2.安装gulp<br>3.新建gulpfile.js文件<br>4.运行</p>\n<p>参考文献：<br>1.<a href=\"http://wjkang.github.io/2016/05/02/Gulp/#前端自动化的目的\" target=\"_blank\" rel=\"noopener\">前端自动化的目的</a><br>2.<a href=\"https://github.com/gulpjs/gulp/blob/master/docs/API.md\" target=\"_blank\" rel=\"noopener\">gulp API</a><br>3.<a href=\"http://www.ydcss.com/archives/41\" target=\"_blank\" rel=\"noopener\">gulp教程之gulp-minify-css</a><br>4.<a href=\"http://www.tuicool.com/articles/2qeuAbi\" target=\"_blank\" rel=\"noopener\">gulp-notify处理报错</a><br>5.<a href=\"http://www.ydcss.com/archives/26\" target=\"_blank\" rel=\"noopener\">gulp教程之gulp-imagemin</a><br>6.<a href=\"http://www.tuicool.com/articles/fUjMRn\" target=\"_blank\" rel=\"noopener\">使用BrowserSync浏览及相关配置</a><br>7.<a href>gulp入门教程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Gulp前端自动化：Gulp的高度集成化开发环境，释放了前端开发中大量时间，如css压缩、js压缩、错误检查、合并js、压缩图片、压缩html、模块构造等，只要你能想到的基本都可以通过Gulp插件去实现。</p>\n<h2 id=\"前端自动化的目的\"><a href=\"#前端自动化的目的\" class=\"headerlink\" title=\"前端自动化的目的\"></a>前端自动化的目的</h2><p>在一个项目过程中，重复而枯燥的工作太多了……绳命就这样浪费了。<br>我们需要一个自动化的工作流程，让我们更专注于coding，而不是coding外的繁琐工作。于是Gulp应运而生。可以想像，如果在node环境下，一行命令搞定一个场景，So Cool…<br>然而通过了解，显然可看出Gulp</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>1.版本控制<br>2.检查JS<br>3.图片合并<br>4.压缩CSS<br>5.压缩JS<br>6.编译SASS</p>\n<p>目前最知名的构建工具： Gulp、Grunt、NPM + Webpack；</p>\n<p>. grunt是前端工程化的先驱</p>\n<p>. gulp更自然基于流的方式连接任务</p>\n<p>. Webpack最年轻，擅长用于依赖管理，配置稍较复杂</p>\n<p>. 推荐使用Gulp，Gulp基于nodejs中stream，效率更好语法更自然,不需要编写复杂的配置文件</p>\n<h2 id=\"安装前准备：\"><a href=\"#安装前准备：\" class=\"headerlink\" title=\"安装前准备：\"></a>安装前准备：</h2><p>Gulp是基于 Node.js的，需要要安装 Node.js</p>\n<p>为了确保依赖环境正确，我们先执行几个简单的命令检查。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br><span class=\"line\"></span><br><span class=\"line\">v5.3.0</span><br><span class=\"line\"></span><br><span class=\"line\">Node是一个基于Chrome JavaScript V8引擎建立的一个解释器</span><br><span class=\"line\">检测Node是否已经安装，如果正确安装的话你会看到所安装的Node的版本号</span><br><span class=\"line\"></span><br><span class=\"line\">接下来看看npm，它是 node 的包管理工具，可以利用它安装 gulp 所需的包</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm -v</span><br><span class=\"line\"></span><br><span class=\"line\">3.3.12</span><br><span class=\"line\"></span><br><span class=\"line\">这同样能得到npm的版本号，装 Node 时已经自动安装了npm</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"开始全局安装Gulp\"><a href=\"#开始全局安装Gulp\" class=\"headerlink\" title=\"开始全局安装Gulp\"></a>开始全局安装Gulp</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g gulp</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp -v</span><br><span class=\"line\"></span><br><span class=\"line\">[18:39:18] CLI version 3.9.1</span><br><span class=\"line\"></span><br><span class=\"line\">得到gulp的版本号，确认安装成功</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">TestProject     (项目名称)</span><br><span class=\"line\">|–.git               通过git进行版本控制,项目自动生成这个文件</span><br><span class=\"line\">|–node_modules       组件包目录</span><br><span class=\"line\">|–dist               发布环境（编译自动生成的）</span><br><span class=\"line\">    |–css                 样式文件(style.css style.min.css)</span><br><span class=\"line\">    |–img                 图片文件(压缩图片\\合并后的图片)</span><br><span class=\"line\">    |–js                  js文件(main.js main.min.js)</span><br><span class=\"line\">    |–index.html          静态页面文件(压缩html)</span><br><span class=\"line\"></span><br><span class=\"line\">|–src                开发环境</span><br><span class=\"line\">    |–sass                sass文件</span><br><span class=\"line\">    |–images              图片文件</span><br><span class=\"line\">    |–js                  js文件</span><br><span class=\"line\">    |–index.html          静态文件</span><br><span class=\"line\">|–gulpfile.js        gulp配置文件</span><br><span class=\"line\">|–package.json       依赖模块json文件,在项目目录下npm install会安装项目所有的依赖模块，简化项目的安装程序</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建package-json\"><a href=\"#创建package-json\" class=\"headerlink\" title=\"创建package.json\"></a>创建package.json</h2><p>我们先使用npm init来创建类似Nuget package的package.config一样的文件，这样我们就知道项目依赖哪些插件，而且我们不需要把插件提交到代码库，其它程序员只需要使用 npm install 就可以安装所有配置的插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See `npm <span class=\"built_in\">help</span> json` <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm install &lt;pkg&gt; --save` afterwards to install a package and</span><br><span class=\"line\">save it as a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">name: (<span class=\"built_in\">test</span>) <span class=\"built_in\">test</span>                  //名称</span><br><span class=\"line\">version: (1.0.0) 1.0.0             //版本</span><br><span class=\"line\">description: <span class=\"built_in\">test</span> description      //描述</span><br><span class=\"line\">entry point: (index.js)            //</span><br><span class=\"line\"><span class=\"built_in\">test</span> <span class=\"built_in\">command</span>:                      //测试代码</span><br><span class=\"line\">git repository:                    //Git版本库</span><br><span class=\"line\">keywords:                          //关键词</span><br><span class=\"line\">author: luuman                     //作者</span><br><span class=\"line\">license: (ISC)                     //协议</span><br><span class=\"line\">About to write to F:\\Gulp\\<span class=\"built_in\">test</span>\\package.json:</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"test description\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"luuman\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Is this ok? (yes)</span><br></pre></td></tr></table></figure>\n<h2 id=\"我们要进去到项目的根目录再安装一遍\"><a href=\"#我们要进去到项目的根目录再安装一遍\" class=\"headerlink\" title=\"我们要进去到项目的根目录再安装一遍\"></a>我们要进去到项目的根目录再安装一遍</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install gulp --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"新建gulpfile-js文件\"><a href=\"#新建gulpfile-js文件\" class=\"headerlink\" title=\"新建gulpfile.js文件\"></a>新建gulpfile.js文件</h2><p>我们将要使用Gulp插件来完成我们以下任务：</p>\n<p>. sass的编译（gulp-sass）<br>. 自动添加css前缀（gulp-autoprefixer）<br>. 压缩css（gulp-minify-css）<br>. js代码校验（gulp-jshint）<br>. 合并js文件（gulp-concat）<br>. 压缩js代码（gulp-uglify）<br>. 压缩图片（gulp-imagemin）<br>. 自动刷新页面（gulp-livereload）<br>. 图片缓存，只有图片替换了才压缩（gulp-cache）<br>. 更改提醒（gulp-notify）</p>\n<h3 id=\"安装这些插件需要运行如下命令：\"><a href=\"#安装这些插件需要运行如下命令：\" class=\"headerlink\" title=\"安装这些插件需要运行如下命令：\"></a>安装这些插件需要运行如下命令：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-jshint gulp-sass gulp-less gulp-autoprefixer gulp-clean-css gulp-imagemin gulp-notify gulp-cache imagemin-pngquant gulp-livereload gulp-concat gulp-uglify  gulp-rename  gulp-babel del --save-dev</span><br></pre></td></tr></table></figure>\n<p>gulp功能模块的文件会放在项目所在的目录的./node_modules 下<br>更多插件可以看这里<a href=\"http://gulpjs.com/plugins/\" target=\"_blank\" rel=\"noopener\">gulpjs.com/plugins/</a></p>\n<p>接着我们要创建一个gulpfile.js在根目录下，gulp只有四个API： task，watch，src，和 dest</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task--这个API用来创建任务，在命令行下可以输入 gulp <span class=\"built_in\">test</span> 来执行<span class=\"built_in\">test</span>的任务。</span><br><span class=\"line\">watch--这个API用来监听任务。</span><br><span class=\"line\">src--这个API设置需要处理的文件的路径，可以是多个文件以数组的形式[main.scss, vender.scss]，也可以是正则表达式/**/*.scss。</span><br><span class=\"line\"></span><br><span class=\"line\">dest--这个API设置生成文件的路径，一个任务可以有多个生成路径，一个可以输出未压缩的版本，另一个可以输出压缩后的版本。</span><br></pre></td></tr></table></figure>\n<h3 id=\"加载插件：\"><a href=\"#加载插件：\" class=\"headerlink\" title=\"加载插件：\"></a>加载插件：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入gulp</span><br><span class=\"line\">var gulp = require(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">// 引入组件</span><br><span class=\"line\">var jshint = require(<span class=\"string\">'gulp-jshint'</span>); //检查js代码校验</span><br><span class=\"line\">var sass = require(<span class=\"string\">'gulp-sass'</span>); //编译Sass</span><br><span class=\"line\">var less = require(<span class=\"string\">'gulp-less'</span>); //编译less</span><br><span class=\"line\">var autoprefixer = require(<span class=\"string\">'gulp-autoprefixer'</span>);</span><br><span class=\"line\">var cleancss = require(<span class=\"string\">'gulp-clean-css'</span>);</span><br><span class=\"line\">var imagemin = require(<span class=\"string\">'gulp-imagemin'</span>); //压缩图片</span><br><span class=\"line\">var notify = require(<span class=\"string\">'gulp-notify'</span>); //处理报错</span><br><span class=\"line\">var cache = require(<span class=\"string\">'gulp-cache'</span>); //图片缓存，只有图片替换了才压缩</span><br><span class=\"line\">var pngquant = require(<span class=\"string\">'imagemin-pngquant'</span>); //深度压缩图片</span><br><span class=\"line\">var livereload = require(<span class=\"string\">'gulp-livereload'</span>); //服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）</span><br><span class=\"line\">var concat = require(<span class=\"string\">'gulp-concat'</span>); //合并js</span><br><span class=\"line\">var uglify = require(<span class=\"string\">'gulp-uglify'</span>); //uglify 组件（用于压缩 JS）</span><br><span class=\"line\">var rename = require(<span class=\"string\">'gulp-rename'</span>); //重命名</span><br><span class=\"line\">var babel = require(<span class=\"string\">'gulp-babel'</span>); //编译es6</span><br><span class=\"line\">var del = require(<span class=\"string\">'del'</span>);//清除文件</span><br><span class=\"line\">var plumber = require(<span class=\"string\">'gulp-plumber'</span>);//当发生异常时提示错误</span><br></pre></td></tr></table></figure>\n<p>最后是我自己设置的项目文件路径</p>\n<p>|–/src/——–开发环境<br>|–/desc/——-生成目录<br>|–/plugin/—–插件存放目录<br>|–gulpfile.js</p>\n<h3 id=\"编译sass、自动添加css前缀和压缩\"><a href=\"#编译sass、自动添加css前缀和压缩\" class=\"headerlink\" title=\"编译sass、自动添加css前缀和压缩\"></a>编译sass、自动添加css前缀和压缩</h3><p>首先我们编译sass，添加前缀，保存到我们指定的目录下面，还没结束，我们还要压缩，给文件添加 .min 后缀再输出压缩文件到指定目录，最后提醒任务完成了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Styles任务</span><br><span class=\"line\">gulp.task(<span class=\"string\">'styles'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    //编译sass</span><br><span class=\"line\">    <span class=\"built_in\">return</span> gulp.src([<span class=\"string\">'src/less/*.less'</span>,<span class=\"string\">'src/css/*.css'</span>])</span><br><span class=\"line\">    //css 合并</span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'all.css'</span>))</span><br><span class=\"line\">    //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber</span><br><span class=\"line\">    .pipe(plumber(&#123; errorHandler: notify.onError(<span class=\"string\">'Error: &lt;%= error.message %&gt;'</span>) &#125;))</span><br><span class=\"line\">    .pipe(less())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'src/css'</span>))</span><br><span class=\"line\">    //添加前缀</span><br><span class=\"line\">    .pipe(autoprefixer(<span class=\"string\">'last 2 version'</span>, <span class=\"string\">'safari 5'</span>, <span class=\"string\">'ie 8'</span>, <span class=\"string\">'ie 9'</span>, <span class=\"string\">'opera 12.1'</span>, <span class=\"string\">'ios 6'</span>, <span class=\"string\">'android 4'</span>))</span><br><span class=\"line\">    //保存未压缩文件到我们指定的目录下面</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'src'</span>))</span><br><span class=\"line\">    //给文件添加.min后缀</span><br><span class=\"line\">    .pipe(rename(&#123; suffix: <span class=\"string\">'.min'</span> &#125;))</span><br><span class=\"line\">    //压缩样式文件</span><br><span class=\"line\">    .pipe(cleancss())</span><br><span class=\"line\">    //输出压缩文件到指定目录</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))    </span><br><span class=\"line\">    //提醒任务完成</span><br><span class=\"line\">    .pipe(notify(&#123; message: <span class=\"string\">'Styles task complete'</span> &#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"js代码校验、合并和压缩\"><a href=\"#js代码校验、合并和压缩\" class=\"headerlink\" title=\"js代码校验、合并和压缩\"></a>js代码校验、合并和压缩</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 合并，压缩js文件</span><br><span class=\"line\">// 找到 js/ 目录下的所有 js 文件，压缩，重命名，最后将处理完成的js存放在 dist/js/ 目录下</span><br><span class=\"line\">gulp.task(<span class=\"string\">'scripts'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'src/js/*.js'</span>) //可配置你需要检查脚本的具体名字。</span><br><span class=\"line\">        //js代码校验</span><br><span class=\"line\">        .pipe(jshint())</span><br><span class=\"line\">        .pipe(jshint.reporter(<span class=\"string\">'default'</span>))</span><br><span class=\"line\">        //js代码合并</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'all.js'</span>))</span><br><span class=\"line\">        //压缩脚本文件</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        //给文件添加.min后缀</span><br><span class=\"line\">        .pipe(rename(&#123; suffix: <span class=\"string\">'.min'</span> &#125;))</span><br><span class=\"line\">        //压缩脚本文件</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        //输出压缩文件到指定目录</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</span><br><span class=\"line\">    //提醒任务完成</span><br><span class=\"line\">    .pipe(notify(&#123; message: <span class=\"string\">'Scripts task complete'</span> &#125;))</span><br><span class=\"line\">    console.log(<span class=\"string\">'gulp task is done'</span>); //自定义提醒信息</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//压缩图片</span><br><span class=\"line\">gulp.task(<span class=\"string\">'testImagemin'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">   <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'src/img/*.&#123;png,jpg,gif,ico&#125;'</span>)</span><br><span class=\"line\">        .pipe(cache(imagemin(&#123;</span><br><span class=\"line\">            progressive: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            svgoPlugins: [&#123; removeViewBox: <span class=\"literal\">false</span> &#125;],</span><br><span class=\"line\">            use: [pngquant()]</span><br><span class=\"line\">        &#125;)))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/img'</span>))</span><br><span class=\"line\">        .pipe(notify(&#123; message: <span class=\"string\">'Images task complete'</span> &#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//监听 Watch</span><br><span class=\"line\">gulp.task(<span class=\"string\">'testWatch'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // Watch .less files</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/**/*.less'</span>, [<span class=\"string\">'testLess'</span>]); //当所有less文件发生改变时，调用testLess任务</span><br><span class=\"line\">    // Watch image files</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/**/*.img'</span>, [<span class=\"string\">'testImagemin'</span>]);</span><br><span class=\"line\">    // Watch .js files</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'js/*.js'</span>, [<span class=\"string\">'scripts'</span>]);</span><br><span class=\"line\">    // Create LiveReload server</span><br><span class=\"line\">   livereload.listen();</span><br><span class=\"line\">   // Watch any files <span class=\"keyword\">in</span> assets/, reload on change</span><br><span class=\"line\">   gulp.watch([<span class=\"string\">'dist/**'</span>]).on(<span class=\"string\">'change'</span>, livereload.changed);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除文件\"><a href=\"#清除文件\" class=\"headerlink\" title=\"清除文件\"></a>清除文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//clean 清除文件 在任务执行前，最好先清除之前生成的文件</span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"keyword\">function</span>(cb) &#123;</span><br><span class=\"line\">    del([<span class=\"string\">'dist/css'</span>, <span class=\"string\">'dist/js'</span>, <span class=\"string\">'dist/img'</span>], cb)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"默认任务\"><a href=\"#默认任务\" class=\"headerlink\" title=\"默认任务\"></a>默认任务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 默认任务 Default task</span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'clean'</span>],<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    gulp.start(<span class=\"string\">'help'</span>,<span class=\"string\">'testLess'</span>, <span class=\"string\">'scripts'</span>, <span class=\"string\">'testImagemin'</span>);</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">        .pipe(babel(&#123;</span><br><span class=\"line\">            presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'src/bjs'</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"其它插件\"><a href=\"#其它插件\" class=\"headerlink\" title=\"其它插件\"></a>其它插件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 检查js脚本的任务</span><br><span class=\"line\">gulp.task(<span class=\"string\">'lint'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'js/*.js'</span>) //可配置你需要检查脚本的具体名字。</span><br><span class=\"line\">        .pipe(jshint())</span><br><span class=\"line\">        .pipe(jshint.reporter(<span class=\"string\">'default'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 编译Sass</span><br><span class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'./scss/*.scss'</span>)</span><br><span class=\"line\">        .pipe(sass())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'css/'</span>));//dest()写入文件</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 编译less</span><br><span class=\"line\">gulp.task(<span class=\"string\">'testLess'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'src/less/*.less'</span>)</span><br><span class=\"line\">        //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber</span><br><span class=\"line\">        .pipe(plumber(&#123; errorHandler: notify.onError(<span class=\"string\">'Error: &lt;%= error.message %&gt;'</span>) &#125;))</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'src/css'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm list | gulp &lt;模糊插件匹配&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"gulp-最终配置文件\"><a href=\"#gulp-最终配置文件\" class=\"headerlink\" title=\"gulp 最终配置文件\"></a>gulp 最终配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入gulp</span><br><span class=\"line\">var gulp = require(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">// 引入组件</span><br><span class=\"line\">var jshint = require(<span class=\"string\">'gulp-jshint'</span>); //检查js代码校验</span><br><span class=\"line\">var sass = require(<span class=\"string\">'gulp-sass'</span>); //编译Sass</span><br><span class=\"line\">var less = require(<span class=\"string\">'gulp-less'</span>); //编译less</span><br><span class=\"line\">var autoprefixer = require(<span class=\"string\">'gulp-autoprefixer'</span>);</span><br><span class=\"line\">var cleancss = require(<span class=\"string\">'gulp-clean-css'</span>);</span><br><span class=\"line\">var imagemin = require(<span class=\"string\">'gulp-imagemin'</span>); //压缩图片</span><br><span class=\"line\">var notify = require(<span class=\"string\">'gulp-notify'</span>); //处理报错</span><br><span class=\"line\">var cache = require(<span class=\"string\">'gulp-cache'</span>); //图片缓存，只有图片替换了才压缩</span><br><span class=\"line\">var pngquant = require(<span class=\"string\">'imagemin-pngquant'</span>); //深度压缩图片</span><br><span class=\"line\">var livereload = require(<span class=\"string\">'gulp-livereload'</span>); //服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）</span><br><span class=\"line\">var concat = require(<span class=\"string\">'gulp-concat'</span>); //合并js</span><br><span class=\"line\">var uglify = require(<span class=\"string\">'gulp-uglify'</span>); //uglify 组件（用于压缩 JS）</span><br><span class=\"line\">var rename = require(<span class=\"string\">'gulp-rename'</span>); //重命名</span><br><span class=\"line\">var babel = require(<span class=\"string\">'gulp-babel'</span>); //编译es6</span><br><span class=\"line\">var del = require(<span class=\"string\">'del'</span>);//清除文件</span><br><span class=\"line\">var plumber = require(<span class=\"string\">'gulp-plumber'</span>);//当发生异常时提示错误</span><br><span class=\"line\"></span><br><span class=\"line\">// 默认任务 Default task</span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'clean'</span>] ,<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    gulp.start(<span class=\"string\">'help'</span>,<span class=\"string\">'styles'</span>, <span class=\"string\">'scripts'</span>, <span class=\"string\">'testImagemin'</span>);</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">        .pipe(babel(&#123;</span><br><span class=\"line\">            presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'src/bjs'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// <span class=\"built_in\">help</span> task</span><br><span class=\"line\">gulp.task(<span class=\"string\">'help'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp build  文件打包\"</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp watch  文件监控\"</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp help  gulp参数说明\"</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp server  测试sever\"</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp -p  生产环境\"</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp -d  开发环境\"</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">\"gulp -m &lt;module&gt;  部分模块打包（默认全部打包）\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 检查js脚本的任务</span><br><span class=\"line\">gulp.task(<span class=\"string\">'lint'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'js/*.js'</span>) //可配置你需要检查脚本的具体名字。</span><br><span class=\"line\">        .pipe(jshint())</span><br><span class=\"line\">        .pipe(jshint.reporter(<span class=\"string\">'default'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 编译Sass</span><br><span class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'./scss/*.scss'</span>)</span><br><span class=\"line\">        .pipe(sass())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'css/'</span>));//dest()写入文件</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 编译less</span><br><span class=\"line\">gulp.task(<span class=\"string\">'testLess'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'src/less/*.less'</span>)</span><br><span class=\"line\">        //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber</span><br><span class=\"line\">        .pipe(plumber(&#123; errorHandler: notify.onError(<span class=\"string\">'Error: &lt;%= error.message %&gt;'</span>) &#125;))</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'src/css'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Styles任务</span><br><span class=\"line\">gulp.task(<span class=\"string\">'styles'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    //编译sass</span><br><span class=\"line\">    <span class=\"built_in\">return</span> gulp.src([<span class=\"string\">'src/less/*.less'</span>,<span class=\"string\">'src/css/*.css'</span>])</span><br><span class=\"line\">    //css 合并</span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'all.css'</span>))</span><br><span class=\"line\">    //当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber</span><br><span class=\"line\">    .pipe(plumber(&#123; errorHandler: notify.onError(<span class=\"string\">'Error: &lt;%= error.message %&gt;'</span>) &#125;))</span><br><span class=\"line\">    .pipe(less())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'src/css'</span>))</span><br><span class=\"line\">    //添加前缀</span><br><span class=\"line\">    .pipe(autoprefixer(<span class=\"string\">'last 2 version'</span>, <span class=\"string\">'safari 5'</span>, <span class=\"string\">'ie 8'</span>, <span class=\"string\">'ie 9'</span>, <span class=\"string\">'opera 12.1'</span>, <span class=\"string\">'ios 6'</span>, <span class=\"string\">'android 4'</span>))</span><br><span class=\"line\">    //保存未压缩文件到我们指定的目录下面</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'src'</span>))</span><br><span class=\"line\">    //给文件添加.min后缀</span><br><span class=\"line\">    .pipe(rename(&#123; suffix: <span class=\"string\">'.min'</span> &#125;))</span><br><span class=\"line\">    //压缩样式文件</span><br><span class=\"line\">    .pipe(cleancss())</span><br><span class=\"line\">    //输出压缩文件到指定目录</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))    </span><br><span class=\"line\">    //提醒任务完成</span><br><span class=\"line\">    .pipe(notify(&#123; message: <span class=\"string\">'Styles task complete'</span> &#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//压缩图片</span><br><span class=\"line\">gulp.task(<span class=\"string\">'testImagemin'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">   <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'src/img/*.&#123;png,jpg,gif,ico&#125;'</span>)</span><br><span class=\"line\">        .pipe(cache(imagemin(&#123;</span><br><span class=\"line\">            progressive: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            svgoPlugins: [&#123; removeViewBox: <span class=\"literal\">false</span> &#125;],</span><br><span class=\"line\">            use: [pngquant()]</span><br><span class=\"line\">        &#125;)))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/img'</span>))</span><br><span class=\"line\">        .pipe(notify(&#123; message: <span class=\"string\">'Images task complete'</span> &#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 合并，压缩js文件</span><br><span class=\"line\">// 找到 js/ 目录下的所有 js 文件，压缩，重命名，最后将处理完成的js存放在 dist/js/ 目录下</span><br><span class=\"line\">gulp.task(<span class=\"string\">'scripts'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'src/js/*.js'</span>) //可配置你需要检查脚本的具体名字。</span><br><span class=\"line\">        //js代码校验</span><br><span class=\"line\">        .pipe(jshint())</span><br><span class=\"line\">        .pipe(jshint.reporter(<span class=\"string\">'default'</span>))</span><br><span class=\"line\">        //js代码合并</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'all.js'</span>))</span><br><span class=\"line\">        //压缩脚本文件</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        //给文件添加.min后缀</span><br><span class=\"line\">        .pipe(rename(&#123; suffix: <span class=\"string\">'.min'</span> &#125;))</span><br><span class=\"line\">        //压缩脚本文件</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        //输出压缩文件到指定目录</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</span><br><span class=\"line\">    //提醒任务完成</span><br><span class=\"line\">    .pipe(notify(&#123; message: <span class=\"string\">'Scripts task complete'</span> &#125;))</span><br><span class=\"line\">    console.log(<span class=\"string\">'gulp task is done'</span>); //自定义提醒信息</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//clean 清除文件 在任务执行前，最好先清除之前生成的文件</span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"keyword\">function</span>(cb) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> del([<span class=\"string\">'dist/css'</span>, <span class=\"string\">'dist/js'</span>, <span class=\"string\">'dist/img'</span>], cb)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//监听 Watch</span><br><span class=\"line\">gulp.task(<span class=\"string\">'testWatch'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // Watch .less files</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/**/*.less'</span>, [<span class=\"string\">'testLess'</span>]); //当所有less文件发生改变时，调用testLess任务</span><br><span class=\"line\">    // Watch image files</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/**/*.img'</span>, [<span class=\"string\">'testImagemin'</span>]);</span><br><span class=\"line\">    // Watch .js files</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'js/*.js'</span>, [<span class=\"string\">'scripts'</span>]);</span><br><span class=\"line\">    // Create LiveReload server</span><br><span class=\"line\">   livereload.listen();</span><br><span class=\"line\">   // Watch any files <span class=\"keyword\">in</span> assets/, reload on change</span><br><span class=\"line\">   gulp.watch([<span class=\"string\">'dist/**'</span>]).on(<span class=\"string\">'change'</span>, livereload.changed);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>可以运行单独的任务，例如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp default</span><br><span class=\"line\">gulp watch</span><br><span class=\"line\">gulp clean</span><br></pre></td></tr></table></figure>\n<p>也可以运行整个任务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1.安装Node<br>2.安装gulp<br>3.新建gulpfile.js文件<br>4.运行</p>\n<p>参考文献：<br>1.<a href=\"http://wjkang.github.io/2016/05/02/Gulp/#前端自动化的目的\" target=\"_blank\" rel=\"noopener\">前端自动化的目的</a><br>2.<a href=\"https://github.com/gulpjs/gulp/blob/master/docs/API.md\" target=\"_blank\" rel=\"noopener\">gulp API</a><br>3.<a href=\"http://www.ydcss.com/archives/41\" target=\"_blank\" rel=\"noopener\">gulp教程之gulp-minify-css</a><br>4.<a href=\"http://www.tuicool.com/articles/2qeuAbi\" target=\"_blank\" rel=\"noopener\">gulp-notify处理报错</a><br>5.<a href=\"http://www.ydcss.com/archives/26\" target=\"_blank\" rel=\"noopener\">gulp教程之gulp-imagemin</a><br>6.<a href=\"http://www.tuicool.com/articles/fUjMRn\" target=\"_blank\" rel=\"noopener\">使用BrowserSync浏览及相关配置</a><br>7.<a href>gulp入门教程</a></p>\n"},{"title":"react-native 第一个demo","date":"2016-10-20T07:18:06.000Z","_content":"# React Native Mac环境搭建\n\n## 1、安装Homebrew\n安装Homebrew是为安装Node.js做前提准备。 \n安装命令:\n``` bash\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n注：可以通过下面命令查看Homebrew是否安装成功\n``` bash\nbrew -v\nHomebrew/homebrew-core (git revision 93f1; last commit 2016-05-23)\n```\n\n## 2、安装Node.js\n\n下载双击安装即可： \n下载地址： \n[https://nodejs.org/en/](https://nodejs.org/en/)\nNode.js 需要 4.0 及其以上版本。安装好之后，npm 也有了。\n\n## 3、安装React Native 命令行工具\n\n``` bash\nsudo npm install -g react-native-cli\n```\n\n## 4、安装Xcode，估计iOS开发的基本都安装有.\n\nXcode 7.0 或更高版本下载地 址： \n[https://developer.apple.com/xcode/downloads/](https://developer.apple.com/xcode/downloads/)\n\n## 5、安装 watchman 和 flow\n\n监控文件变化和类型检查的。安装如下\n\n``` bash \nbrew install watchman\nbrew install flow\n```\n\n## 6、初始化一个项目\n\n打开终端，在某个目录下输入命令(这一步会有点慢，耐心等待一下): \n``` bash\nreact-native init HelloWorld \n```\n### 运行项目\n\n![](img/rn-desk.png)\n\n用XCode打开ios/HelloWorld.xcodeproj文件，点击键盘\"⌘-R”或者点击\"Run\"，编译运行项目。会启动React-Native服务和iOS模拟器。\n在iOS模拟器中可以看到如图界面：\n![](img/rn_helloworld.png)\n\nReact-Native服务在编写过程中要一直开着 如果不小心把它关了，没关系，可以在终端输入：\n\n``` bash\nnpm start\n```\n来重新开启服务\n\n好了，看到这里，如果你已经成功配置了React-Native的环境，并且新建并成功运行了第一个程序了。那么，就先恭喜了，我们甚至没有写一行代码，就已经成功运行了第一个React-Native的程序，是不是还挺简单的。正所谓，良好的开端是成功的一半。\n\n\n\n\n\n","source":"_posts/react-native-第一个demo.md","raw":"---\ntitle: react-native 第一个demo\ndate: 2016-10-20 15:18:06\ncategories: 学习笔记\ntags:\n- 学习笔记\n- react-native\n---\n# React Native Mac环境搭建\n\n## 1、安装Homebrew\n安装Homebrew是为安装Node.js做前提准备。 \n安装命令:\n``` bash\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n注：可以通过下面命令查看Homebrew是否安装成功\n``` bash\nbrew -v\nHomebrew/homebrew-core (git revision 93f1; last commit 2016-05-23)\n```\n\n## 2、安装Node.js\n\n下载双击安装即可： \n下载地址： \n[https://nodejs.org/en/](https://nodejs.org/en/)\nNode.js 需要 4.0 及其以上版本。安装好之后，npm 也有了。\n\n## 3、安装React Native 命令行工具\n\n``` bash\nsudo npm install -g react-native-cli\n```\n\n## 4、安装Xcode，估计iOS开发的基本都安装有.\n\nXcode 7.0 或更高版本下载地 址： \n[https://developer.apple.com/xcode/downloads/](https://developer.apple.com/xcode/downloads/)\n\n## 5、安装 watchman 和 flow\n\n监控文件变化和类型检查的。安装如下\n\n``` bash \nbrew install watchman\nbrew install flow\n```\n\n## 6、初始化一个项目\n\n打开终端，在某个目录下输入命令(这一步会有点慢，耐心等待一下): \n``` bash\nreact-native init HelloWorld \n```\n### 运行项目\n\n![](img/rn-desk.png)\n\n用XCode打开ios/HelloWorld.xcodeproj文件，点击键盘\"⌘-R”或者点击\"Run\"，编译运行项目。会启动React-Native服务和iOS模拟器。\n在iOS模拟器中可以看到如图界面：\n![](img/rn_helloworld.png)\n\nReact-Native服务在编写过程中要一直开着 如果不小心把它关了，没关系，可以在终端输入：\n\n``` bash\nnpm start\n```\n来重新开启服务\n\n好了，看到这里，如果你已经成功配置了React-Native的环境，并且新建并成功运行了第一个程序了。那么，就先恭喜了，我们甚至没有写一行代码，就已经成功运行了第一个React-Native的程序，是不是还挺简单的。正所谓，良好的开端是成功的一半。\n\n\n\n\n\n","slug":"react-native-第一个demo","published":1,"updated":"2020-02-15T19:07:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr6eiske000a3fwycediek88","content":"<h1 id=\"React-Native-Mac环境搭建\"><a href=\"#React-Native-Mac环境搭建\" class=\"headerlink\" title=\"React Native Mac环境搭建\"></a>React Native Mac环境搭建</h1><h2 id=\"1、安装Homebrew\"><a href=\"#1、安装Homebrew\" class=\"headerlink\" title=\"1、安装Homebrew\"></a>1、安装Homebrew</h2><p>安装Homebrew是为安装Node.js做前提准备。<br>安装命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure></p>\n<p>注：可以通过下面命令查看Homebrew是否安装成功<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew -v</span><br><span class=\"line\">Homebrew/homebrew-core (git revision 93f1; last commit 2016-05-23)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2、安装Node-js\"><a href=\"#2、安装Node-js\" class=\"headerlink\" title=\"2、安装Node.js\"></a>2、安装Node.js</h2><p>下载双击安装即可：<br>下载地址：<br><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a><br>Node.js 需要 4.0 及其以上版本。安装好之后，npm 也有了。</p>\n<h2 id=\"3、安装React-Native-命令行工具\"><a href=\"#3、安装React-Native-命令行工具\" class=\"headerlink\" title=\"3、安装React Native 命令行工具\"></a>3、安装React Native 命令行工具</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g react-native-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、安装Xcode，估计iOS开发的基本都安装有\"><a href=\"#4、安装Xcode，估计iOS开发的基本都安装有\" class=\"headerlink\" title=\"4、安装Xcode，估计iOS开发的基本都安装有.\"></a>4、安装Xcode，估计iOS开发的基本都安装有.</h2><p>Xcode 7.0 或更高版本下载地 址：<br><a href=\"https://developer.apple.com/xcode/downloads/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/xcode/downloads/</a></p>\n<h2 id=\"5、安装-watchman-和-flow\"><a href=\"#5、安装-watchman-和-flow\" class=\"headerlink\" title=\"5、安装 watchman 和 flow\"></a>5、安装 watchman 和 flow</h2><p>监控文件变化和类型检查的。安装如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install watchman</span><br><span class=\"line\">brew install flow</span><br></pre></td></tr></table></figure>\n<h2 id=\"6、初始化一个项目\"><a href=\"#6、初始化一个项目\" class=\"headerlink\" title=\"6、初始化一个项目\"></a>6、初始化一个项目</h2><p>打开终端，在某个目录下输入命令(这一步会有点慢，耐心等待一下):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init HelloWorld</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h3><p><img src=\"img/rn-desk.png\" alt></p>\n<p>用XCode打开ios/HelloWorld.xcodeproj文件，点击键盘”⌘-R”或者点击”Run”，编译运行项目。会启动React-Native服务和iOS模拟器。<br>在iOS模拟器中可以看到如图界面：<br><img src=\"img/rn_helloworld.png\" alt></p>\n<p>React-Native服务在编写过程中要一直开着 如果不小心把它关了，没关系，可以在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>来重新开启服务</p>\n<p>好了，看到这里，如果你已经成功配置了React-Native的环境，并且新建并成功运行了第一个程序了。那么，就先恭喜了，我们甚至没有写一行代码，就已经成功运行了第一个React-Native的程序，是不是还挺简单的。正所谓，良好的开端是成功的一半。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React-Native-Mac环境搭建\"><a href=\"#React-Native-Mac环境搭建\" class=\"headerlink\" title=\"React Native Mac环境搭建\"></a>React Native Mac环境搭建</h1><h2 id=\"1、安装Homebrew\"><a href=\"#1、安装Homebrew\" class=\"headerlink\" title=\"1、安装Homebrew\"></a>1、安装Homebrew</h2><p>安装Homebrew是为安装Node.js做前提准备。<br>安装命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure></p>\n<p>注：可以通过下面命令查看Homebrew是否安装成功<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew -v</span><br><span class=\"line\">Homebrew/homebrew-core (git revision 93f1; last commit 2016-05-23)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2、安装Node-js\"><a href=\"#2、安装Node-js\" class=\"headerlink\" title=\"2、安装Node.js\"></a>2、安装Node.js</h2><p>下载双击安装即可：<br>下载地址：<br><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a><br>Node.js 需要 4.0 及其以上版本。安装好之后，npm 也有了。</p>\n<h2 id=\"3、安装React-Native-命令行工具\"><a href=\"#3、安装React-Native-命令行工具\" class=\"headerlink\" title=\"3、安装React Native 命令行工具\"></a>3、安装React Native 命令行工具</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g react-native-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、安装Xcode，估计iOS开发的基本都安装有\"><a href=\"#4、安装Xcode，估计iOS开发的基本都安装有\" class=\"headerlink\" title=\"4、安装Xcode，估计iOS开发的基本都安装有.\"></a>4、安装Xcode，估计iOS开发的基本都安装有.</h2><p>Xcode 7.0 或更高版本下载地 址：<br><a href=\"https://developer.apple.com/xcode/downloads/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/xcode/downloads/</a></p>\n<h2 id=\"5、安装-watchman-和-flow\"><a href=\"#5、安装-watchman-和-flow\" class=\"headerlink\" title=\"5、安装 watchman 和 flow\"></a>5、安装 watchman 和 flow</h2><p>监控文件变化和类型检查的。安装如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install watchman</span><br><span class=\"line\">brew install flow</span><br></pre></td></tr></table></figure>\n<h2 id=\"6、初始化一个项目\"><a href=\"#6、初始化一个项目\" class=\"headerlink\" title=\"6、初始化一个项目\"></a>6、初始化一个项目</h2><p>打开终端，在某个目录下输入命令(这一步会有点慢，耐心等待一下):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init HelloWorld</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h3><p><img src=\"img/rn-desk.png\" alt></p>\n<p>用XCode打开ios/HelloWorld.xcodeproj文件，点击键盘”⌘-R”或者点击”Run”，编译运行项目。会启动React-Native服务和iOS模拟器。<br>在iOS模拟器中可以看到如图界面：<br><img src=\"img/rn_helloworld.png\" alt></p>\n<p>React-Native服务在编写过程中要一直开着 如果不小心把它关了，没关系，可以在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>来重新开启服务</p>\n<p>好了，看到这里，如果你已经成功配置了React-Native的环境，并且新建并成功运行了第一个程序了。那么，就先恭喜了，我们甚至没有写一行代码，就已经成功运行了第一个React-Native的程序，是不是还挺简单的。正所谓，良好的开端是成功的一半。</p>\n"},{"title":"react 环境搭建","date":"2016-10-20T10:12:15.000Z","_content":"\n## 1、node安装\n首先，需要node环境支持，如果你还没有安装node.js，请移步[nodejs官网](https://nodejs.org/en/)。\n\n## 2、初始化项目\n```bash\nnpm init\n```\n回车即可 到最后，你的项目根目录会多一个package.json的文件。\n\n## 3、添加项目依赖\n\n接下来，我们打开package.json文件，给项目添加依赖包。当然，最简单的方法便是直接修改package.json文件，然后通过npm install安装依赖即可，但是考虑到依赖包的不断更新迭代，或许今后的不久就已经不是当前版本，为了能保证，我们每个看到这边文章的童鞋都是用的最新依赖包，我们直接通过npm install  **  --save-dev方式来安装我们依赖包。\n\n首先，我们来安装dependencies：\n\n```bash\nnpm install --save react react-dom lodash\n```\n按理来说，上面的命令并没有任何问题，但是小编却在这里遇到一个坑，那就是项目取名为react，然后再安装react的时候被拒绝\n当然，解决方法就是重新命名，为了避免不必要的麻烦，还是推荐小伙伴们不要把项目名称命名成你要安装的包名，譬如：react，webpack等等。\n\n泪的教训：如果你遇到上述的错误，请删掉该项目重新新建一个项目，因为无论如何也还是会报这个错误，包括重启也是于事无补。\n\n再次安装react的时候，切忌一定要安装到生产依赖。\n```bash\nnpm install --save-dev react\n```\n不出意外，应该是可以了，接下来我们就可以安装其他依赖。\n```bash\nnpm install babel babel-core babel-loader babel-preset-es2015 babel-preset-react css-loader style-loader react-router webpack webpack-dev-server\n```\n\n```bash\nnpm install react-dom lodash --save\n```\n最后提醒一下，webpack和webpack-dev-server这两个包需要全局安装。\n```bash\nnpm install -g webpack webpack-dev-server\n```\n到这里我们的依赖包就安装完毕。\n\n以下便是package.json的最终代码：\n```bash\n{\n\n\"name\": \"react-demo\",\n\n\"version\": \"1.0.0\",\n\n\"description\": \"\",\n\n\"main\": \"index.js\",\n\n\"scripts\": {\n\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n\n},\n\n\"author\": \"\",\n\n\"license\": \"ISC\",\n\n\"devDependencies\": {\n\n\"babel\": \"^6.5.2\",\n\n\"babel-core\": \"^6.13.2\",\n\n\"babel-loader\": \"^6.2.4\",\n\n\"babel-preset-es2015\": \"^6.13.2\",\n\n\"babel-preset-react\": \"^6.11.1\",\n\n\"css-loader\": \"^0.23.1\",\n\n\"react\": \"^15.3.0\",\n\n\"react-hot-loader\": \"^1.3.0\",\n\n\"react-router\": \"^2.6.1\",\n\n\"style-loader\": \"^0.13.1\",\n\n\"webpack\": \"^1.13.1\",\n\n\"webpack-dev-server\": \"^1.14.1\"\n\n},\n\n\"dependencies\": {\n\n\"lodash\": \"^4.15.0\",\n\n\"react-dom\": \"^15.3.0\"\n\n}\n\n}\n\n```\n## 4、配置webpack\n新建一个webpack.config.js文件。\n```bash\nvar webpack = require(\"webpack\")\n\nvar path = require(\"path\")\n\nmodule.exports = {\n\ndevtool: \"inline-source-map\",\n\nentry: [\n\n\"webpack-dev-server/client?http://127.0.0.1:8080/\",\n\n\"webpack/hot/only-dev-server\",\n\n\"./app\"\n\n],\n\noutput: {\n\npath: path.join(__dirname, \"public\"),\n\nfilename: \"bundle.js\"\n\n},\n\nresolve: {\n\nmodulesDirectories: [\"node_modules\", \"app\"],\n\nextensions: [\"\", \".js\"]\n\n},\n\nmodule: {\n\nloaders: [\n\n{\n\ntest: /\\.jsx?$/,\n\nexclude: /node_modules/,\n\nloaders: [\"react-hot\", \"babel?presets[]=react,presets[]=es2015\"]\n\n},\n\n{\n\ntest: /\\.css?$/,\n\nexclude: /node_modules/,\n\nloaders: [\"style\", \"css\"]\n\n}\n]\n\n},\n\nplugins: [\n\nnew webpack.HotModuleReplacementPlugin(),\n\nnew webpack.NoErrorsPlugin()\n\n]\n\n}\n\n```\n以上便是webpack的基本配置，具体的webpack配置以后会单独介绍。\n## 5、项目文件\n![](img/react_files.jpg)\n\nindex.html\n```html\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>React demo</title>\n\n</head>\n\n<body>\n\n<div id=\"app\"></div>\n\n<script src=\"bundle.js\"></script>\n\n</body>\n\n</html>\n\n```\nindex.js\n```html\nimport React from 'react'\n\nimport {render} from 'react-dom'render(\n\nrender(<div>hello wold</div>,document.getElementById(\"app\"));\n```\n\n这个时候，一个简单的hello word就已经完成，运行如下命令\n\n```bash\nwebpack-dev-server\n```\n使用浏览器打开http://127.0.0.1:8080就能看到hello world。这里的webpack-dev-server可以实时监测文件修改，已实时观看最终效果。\n\n但是每次要预览效果，我们要输入这么一大串，难免有所不便，\n\n打开package.json文件，找到scripts结点，更改如下所示：\n```bash\n\"scripts\": {\n\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n\n\"dev\":\"webpack-dev-server\"\n\n}\n```\n这样，我们就只需要在命令行中输入：\n```bash\nnpm run dev\n```\n\n当然，如果你嫌上面的步骤太过繁琐，你可以直接下载[github](https://github.com/swimly/react-demo)上面的代码，然后直接运行：\n```bash\nnpm install\n```\n\n\n文／Swimly（简书作者）\n原文链接：http://www.jianshu.com/p/0d7a70e39d2e\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。\n\n","source":"_posts/react-环境搭建.md","raw":"---\ntitle: react 环境搭建\ndate: 2016-10-20 18:12:15\ntags:\n- react\n---\n\n## 1、node安装\n首先，需要node环境支持，如果你还没有安装node.js，请移步[nodejs官网](https://nodejs.org/en/)。\n\n## 2、初始化项目\n```bash\nnpm init\n```\n回车即可 到最后，你的项目根目录会多一个package.json的文件。\n\n## 3、添加项目依赖\n\n接下来，我们打开package.json文件，给项目添加依赖包。当然，最简单的方法便是直接修改package.json文件，然后通过npm install安装依赖即可，但是考虑到依赖包的不断更新迭代，或许今后的不久就已经不是当前版本，为了能保证，我们每个看到这边文章的童鞋都是用的最新依赖包，我们直接通过npm install  **  --save-dev方式来安装我们依赖包。\n\n首先，我们来安装dependencies：\n\n```bash\nnpm install --save react react-dom lodash\n```\n按理来说，上面的命令并没有任何问题，但是小编却在这里遇到一个坑，那就是项目取名为react，然后再安装react的时候被拒绝\n当然，解决方法就是重新命名，为了避免不必要的麻烦，还是推荐小伙伴们不要把项目名称命名成你要安装的包名，譬如：react，webpack等等。\n\n泪的教训：如果你遇到上述的错误，请删掉该项目重新新建一个项目，因为无论如何也还是会报这个错误，包括重启也是于事无补。\n\n再次安装react的时候，切忌一定要安装到生产依赖。\n```bash\nnpm install --save-dev react\n```\n不出意外，应该是可以了，接下来我们就可以安装其他依赖。\n```bash\nnpm install babel babel-core babel-loader babel-preset-es2015 babel-preset-react css-loader style-loader react-router webpack webpack-dev-server\n```\n\n```bash\nnpm install react-dom lodash --save\n```\n最后提醒一下，webpack和webpack-dev-server这两个包需要全局安装。\n```bash\nnpm install -g webpack webpack-dev-server\n```\n到这里我们的依赖包就安装完毕。\n\n以下便是package.json的最终代码：\n```bash\n{\n\n\"name\": \"react-demo\",\n\n\"version\": \"1.0.0\",\n\n\"description\": \"\",\n\n\"main\": \"index.js\",\n\n\"scripts\": {\n\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n\n},\n\n\"author\": \"\",\n\n\"license\": \"ISC\",\n\n\"devDependencies\": {\n\n\"babel\": \"^6.5.2\",\n\n\"babel-core\": \"^6.13.2\",\n\n\"babel-loader\": \"^6.2.4\",\n\n\"babel-preset-es2015\": \"^6.13.2\",\n\n\"babel-preset-react\": \"^6.11.1\",\n\n\"css-loader\": \"^0.23.1\",\n\n\"react\": \"^15.3.0\",\n\n\"react-hot-loader\": \"^1.3.0\",\n\n\"react-router\": \"^2.6.1\",\n\n\"style-loader\": \"^0.13.1\",\n\n\"webpack\": \"^1.13.1\",\n\n\"webpack-dev-server\": \"^1.14.1\"\n\n},\n\n\"dependencies\": {\n\n\"lodash\": \"^4.15.0\",\n\n\"react-dom\": \"^15.3.0\"\n\n}\n\n}\n\n```\n## 4、配置webpack\n新建一个webpack.config.js文件。\n```bash\nvar webpack = require(\"webpack\")\n\nvar path = require(\"path\")\n\nmodule.exports = {\n\ndevtool: \"inline-source-map\",\n\nentry: [\n\n\"webpack-dev-server/client?http://127.0.0.1:8080/\",\n\n\"webpack/hot/only-dev-server\",\n\n\"./app\"\n\n],\n\noutput: {\n\npath: path.join(__dirname, \"public\"),\n\nfilename: \"bundle.js\"\n\n},\n\nresolve: {\n\nmodulesDirectories: [\"node_modules\", \"app\"],\n\nextensions: [\"\", \".js\"]\n\n},\n\nmodule: {\n\nloaders: [\n\n{\n\ntest: /\\.jsx?$/,\n\nexclude: /node_modules/,\n\nloaders: [\"react-hot\", \"babel?presets[]=react,presets[]=es2015\"]\n\n},\n\n{\n\ntest: /\\.css?$/,\n\nexclude: /node_modules/,\n\nloaders: [\"style\", \"css\"]\n\n}\n]\n\n},\n\nplugins: [\n\nnew webpack.HotModuleReplacementPlugin(),\n\nnew webpack.NoErrorsPlugin()\n\n]\n\n}\n\n```\n以上便是webpack的基本配置，具体的webpack配置以后会单独介绍。\n## 5、项目文件\n![](img/react_files.jpg)\n\nindex.html\n```html\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>React demo</title>\n\n</head>\n\n<body>\n\n<div id=\"app\"></div>\n\n<script src=\"bundle.js\"></script>\n\n</body>\n\n</html>\n\n```\nindex.js\n```html\nimport React from 'react'\n\nimport {render} from 'react-dom'render(\n\nrender(<div>hello wold</div>,document.getElementById(\"app\"));\n```\n\n这个时候，一个简单的hello word就已经完成，运行如下命令\n\n```bash\nwebpack-dev-server\n```\n使用浏览器打开http://127.0.0.1:8080就能看到hello world。这里的webpack-dev-server可以实时监测文件修改，已实时观看最终效果。\n\n但是每次要预览效果，我们要输入这么一大串，难免有所不便，\n\n打开package.json文件，找到scripts结点，更改如下所示：\n```bash\n\"scripts\": {\n\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n\n\"dev\":\"webpack-dev-server\"\n\n}\n```\n这样，我们就只需要在命令行中输入：\n```bash\nnpm run dev\n```\n\n当然，如果你嫌上面的步骤太过繁琐，你可以直接下载[github](https://github.com/swimly/react-demo)上面的代码，然后直接运行：\n```bash\nnpm install\n```\n\n\n文／Swimly（简书作者）\n原文链接：http://www.jianshu.com/p/0d7a70e39d2e\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。\n\n","slug":"react-环境搭建","published":1,"updated":"2020-02-15T19:07:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr6eiskh000e3fwy45211vf2","content":"<h2 id=\"1、node安装\"><a href=\"#1、node安装\" class=\"headerlink\" title=\"1、node安装\"></a>1、node安装</h2><p>首先，需要node环境支持，如果你还没有安装node.js，请移步<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">nodejs官网</a>。</p>\n<h2 id=\"2、初始化项目\"><a href=\"#2、初始化项目\" class=\"headerlink\" title=\"2、初始化项目\"></a>2、初始化项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>回车即可 到最后，你的项目根目录会多一个package.json的文件。</p>\n<h2 id=\"3、添加项目依赖\"><a href=\"#3、添加项目依赖\" class=\"headerlink\" title=\"3、添加项目依赖\"></a>3、添加项目依赖</h2><p>接下来，我们打开package.json文件，给项目添加依赖包。当然，最简单的方法便是直接修改package.json文件，然后通过npm install安装依赖即可，但是考虑到依赖包的不断更新迭代，或许今后的不久就已经不是当前版本，为了能保证，我们每个看到这边文章的童鞋都是用的最新依赖包，我们直接通过npm install  **  –save-dev方式来安装我们依赖包。</p>\n<p>首先，我们来安装dependencies：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom lodash</span><br></pre></td></tr></table></figure>\n<p>按理来说，上面的命令并没有任何问题，但是小编却在这里遇到一个坑，那就是项目取名为react，然后再安装react的时候被拒绝<br>当然，解决方法就是重新命名，为了避免不必要的麻烦，还是推荐小伙伴们不要把项目名称命名成你要安装的包名，譬如：react，webpack等等。</p>\n<p>泪的教训：如果你遇到上述的错误，请删掉该项目重新新建一个项目，因为无论如何也还是会报这个错误，包括重启也是于事无补。</p>\n<p>再次安装react的时候，切忌一定要安装到生产依赖。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev react</span><br></pre></td></tr></table></figure></p>\n<p>不出意外，应该是可以了，接下来我们就可以安装其他依赖。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel babel-core babel-loader babel-preset-es2015 babel-preset-react css-loader style-loader react-router webpack webpack-dev-server</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-dom lodash --save</span><br></pre></td></tr></table></figure>\n<p>最后提醒一下，webpack和webpack-dev-server这两个包需要全局安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g webpack webpack-dev-server</span><br></pre></td></tr></table></figure></p>\n<p>到这里我们的依赖包就安装完毕。</p>\n<p>以下便是package.json的最终代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"name\"</span>: <span class=\"string\">\"react-demo\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"babel\"</span>: <span class=\"string\">\"^6.5.2\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"babel-core\"</span>: <span class=\"string\">\"^6.13.2\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.4\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.13.2\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.11.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.23.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"react\"</span>: <span class=\"string\">\"^15.3.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"react-hot-loader\"</span>: <span class=\"string\">\"^1.3.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"react-router\"</span>: <span class=\"string\">\"^2.6.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.13.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^1.13.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.14.1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"lodash\"</span>: <span class=\"string\">\"^4.15.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"react-dom\"</span>: <span class=\"string\">\"^15.3.0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4、配置webpack\"><a href=\"#4、配置webpack\" class=\"headerlink\" title=\"4、配置webpack\"></a>4、配置webpack</h2><p>新建一个webpack.config.js文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webpack = require(<span class=\"string\">\"webpack\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">var path = require(<span class=\"string\">\"path\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">devtool: <span class=\"string\">\"inline-source-map\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">entry: [</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"webpack-dev-server/client?http://127.0.0.1:8080/\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"webpack/hot/only-dev-server\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"./app\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">],</span><br><span class=\"line\"></span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">path: path.join(__dirname, <span class=\"string\">\"public\"</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">filename: <span class=\"string\">\"bundle.js\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">resolve: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">modulesDirectories: [<span class=\"string\">\"node_modules\"</span>, <span class=\"string\">\"app\"</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">extensions: [<span class=\"string\">\"\"</span>, <span class=\"string\">\".js\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">module: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">loaders: [</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">test</span>: /\\.jsx?$/,</span><br><span class=\"line\"></span><br><span class=\"line\">exclude: /node_modules/,</span><br><span class=\"line\"></span><br><span class=\"line\">loaders: [<span class=\"string\">\"react-hot\"</span>, <span class=\"string\">\"babel?presets[]=react,presets[]=es2015\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">test</span>: /\\.css?$/,</span><br><span class=\"line\"></span><br><span class=\"line\">exclude: /node_modules/,</span><br><span class=\"line\"></span><br><span class=\"line\">loaders: [<span class=\"string\">\"style\"</span>, <span class=\"string\">\"css\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\"></span><br><span class=\"line\">new webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">new webpack.NoErrorsPlugin()</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上便是webpack的基本配置，具体的webpack配置以后会单独介绍。</p>\n<h2 id=\"5、项目文件\"><a href=\"#5、项目文件\" class=\"headerlink\" title=\"5、项目文件\"></a>5、项目文件</h2><p><img src=\"img/react_files.jpg\" alt></p>\n<p>index.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>React demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>index.js<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from 'react'</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;render&#125; from 'react-dom'render(</span><br><span class=\"line\"></span><br><span class=\"line\">render(<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>hello wold<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>,document.getElementById(\"app\"));</span><br></pre></td></tr></table></figure></p>\n<p>这个时候，一个简单的hello word就已经完成，运行如下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>使用浏览器打开<a href=\"http://127.0.0.1:8080就能看到hello\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080就能看到hello</a> world。这里的webpack-dev-server可以实时监测文件修改，已实时观看最终效果。</p>\n<p>但是每次要预览效果，我们要输入这么一大串，难免有所不便，</p>\n<p>打开package.json文件，找到scripts结点，更改如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"dev\"</span>:<span class=\"string\">\"webpack-dev-server\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样，我们就只需要在命令行中输入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure></p>\n<p>当然，如果你嫌上面的步骤太过繁琐，你可以直接下载<a href=\"https://github.com/swimly/react-demo\" target=\"_blank\" rel=\"noopener\">github</a>上面的代码，然后直接运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>文／Swimly（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/0d7a70e39d2e\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/0d7a70e39d2e</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、node安装\"><a href=\"#1、node安装\" class=\"headerlink\" title=\"1、node安装\"></a>1、node安装</h2><p>首先，需要node环境支持，如果你还没有安装node.js，请移步<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">nodejs官网</a>。</p>\n<h2 id=\"2、初始化项目\"><a href=\"#2、初始化项目\" class=\"headerlink\" title=\"2、初始化项目\"></a>2、初始化项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>回车即可 到最后，你的项目根目录会多一个package.json的文件。</p>\n<h2 id=\"3、添加项目依赖\"><a href=\"#3、添加项目依赖\" class=\"headerlink\" title=\"3、添加项目依赖\"></a>3、添加项目依赖</h2><p>接下来，我们打开package.json文件，给项目添加依赖包。当然，最简单的方法便是直接修改package.json文件，然后通过npm install安装依赖即可，但是考虑到依赖包的不断更新迭代，或许今后的不久就已经不是当前版本，为了能保证，我们每个看到这边文章的童鞋都是用的最新依赖包，我们直接通过npm install  **  –save-dev方式来安装我们依赖包。</p>\n<p>首先，我们来安装dependencies：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom lodash</span><br></pre></td></tr></table></figure>\n<p>按理来说，上面的命令并没有任何问题，但是小编却在这里遇到一个坑，那就是项目取名为react，然后再安装react的时候被拒绝<br>当然，解决方法就是重新命名，为了避免不必要的麻烦，还是推荐小伙伴们不要把项目名称命名成你要安装的包名，譬如：react，webpack等等。</p>\n<p>泪的教训：如果你遇到上述的错误，请删掉该项目重新新建一个项目，因为无论如何也还是会报这个错误，包括重启也是于事无补。</p>\n<p>再次安装react的时候，切忌一定要安装到生产依赖。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev react</span><br></pre></td></tr></table></figure></p>\n<p>不出意外，应该是可以了，接下来我们就可以安装其他依赖。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel babel-core babel-loader babel-preset-es2015 babel-preset-react css-loader style-loader react-router webpack webpack-dev-server</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-dom lodash --save</span><br></pre></td></tr></table></figure>\n<p>最后提醒一下，webpack和webpack-dev-server这两个包需要全局安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g webpack webpack-dev-server</span><br></pre></td></tr></table></figure></p>\n<p>到这里我们的依赖包就安装完毕。</p>\n<p>以下便是package.json的最终代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"name\"</span>: <span class=\"string\">\"react-demo\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"babel\"</span>: <span class=\"string\">\"^6.5.2\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"babel-core\"</span>: <span class=\"string\">\"^6.13.2\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.4\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.13.2\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.11.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.23.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"react\"</span>: <span class=\"string\">\"^15.3.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"react-hot-loader\"</span>: <span class=\"string\">\"^1.3.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"react-router\"</span>: <span class=\"string\">\"^2.6.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.13.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^1.13.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.14.1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"lodash\"</span>: <span class=\"string\">\"^4.15.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"react-dom\"</span>: <span class=\"string\">\"^15.3.0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4、配置webpack\"><a href=\"#4、配置webpack\" class=\"headerlink\" title=\"4、配置webpack\"></a>4、配置webpack</h2><p>新建一个webpack.config.js文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webpack = require(<span class=\"string\">\"webpack\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">var path = require(<span class=\"string\">\"path\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">devtool: <span class=\"string\">\"inline-source-map\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">entry: [</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"webpack-dev-server/client?http://127.0.0.1:8080/\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"webpack/hot/only-dev-server\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"./app\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">],</span><br><span class=\"line\"></span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">path: path.join(__dirname, <span class=\"string\">\"public\"</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">filename: <span class=\"string\">\"bundle.js\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">resolve: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">modulesDirectories: [<span class=\"string\">\"node_modules\"</span>, <span class=\"string\">\"app\"</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">extensions: [<span class=\"string\">\"\"</span>, <span class=\"string\">\".js\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">module: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">loaders: [</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">test</span>: /\\.jsx?$/,</span><br><span class=\"line\"></span><br><span class=\"line\">exclude: /node_modules/,</span><br><span class=\"line\"></span><br><span class=\"line\">loaders: [<span class=\"string\">\"react-hot\"</span>, <span class=\"string\">\"babel?presets[]=react,presets[]=es2015\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">test</span>: /\\.css?$/,</span><br><span class=\"line\"></span><br><span class=\"line\">exclude: /node_modules/,</span><br><span class=\"line\"></span><br><span class=\"line\">loaders: [<span class=\"string\">\"style\"</span>, <span class=\"string\">\"css\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\"></span><br><span class=\"line\">new webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">new webpack.NoErrorsPlugin()</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上便是webpack的基本配置，具体的webpack配置以后会单独介绍。</p>\n<h2 id=\"5、项目文件\"><a href=\"#5、项目文件\" class=\"headerlink\" title=\"5、项目文件\"></a>5、项目文件</h2><p><img src=\"img/react_files.jpg\" alt></p>\n<p>index.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>React demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>index.js<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from 'react'</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;render&#125; from 'react-dom'render(</span><br><span class=\"line\"></span><br><span class=\"line\">render(<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>hello wold<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>,document.getElementById(\"app\"));</span><br></pre></td></tr></table></figure></p>\n<p>这个时候，一个简单的hello word就已经完成，运行如下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>使用浏览器打开<a href=\"http://127.0.0.1:8080就能看到hello\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080就能看到hello</a> world。这里的webpack-dev-server可以实时监测文件修改，已实时观看最终效果。</p>\n<p>但是每次要预览效果，我们要输入这么一大串，难免有所不便，</p>\n<p>打开package.json文件，找到scripts结点，更改如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"dev\"</span>:<span class=\"string\">\"webpack-dev-server\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样，我们就只需要在命令行中输入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure></p>\n<p>当然，如果你嫌上面的步骤太过繁琐，你可以直接下载<a href=\"https://github.com/swimly/react-demo\" target=\"_blank\" rel=\"noopener\">github</a>上面的代码，然后直接运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>文／Swimly（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/0d7a70e39d2e\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/0d7a70e39d2e</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>\n"},{"title":"关于IE的下的haslayout问题","date":"2016-01-26T02:58:48.000Z","_content":"今天早上我们一个前端同事GQL遇到一个问题。在IE7下position:relative层在动态渲染时出现偏移.\n跟下面这个demo情景相似\n\n``` html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <title>IE7 absolute positioning bug</title>\n    <style type=\"text/css\">\n      #panel { position: relative; border: solid 1px black; }\n      #spacer { height: 100px; }\n      #footer { position: absolute; bottom: 0px; }\n    </style>\n    <script type=\"text/javascript\">\n      function toggle() {\n        var spacer = document.getElementById(\"spacer\");\n        var style = \"block\";\n        if (spacer.style.display == \"block\" || spacer.style.display == \"\") {\n          style = \"none\";\n        }\n        spacer.style.display = style;\n      }\n    </script>\n  </head>\n  <body>\n    <div id=\"panel\">\n      <button onclick=\"toggle();\">Click me</button>\n      <br /><br /><br />\n      <div id=\"spacer\"></div>\n      <div id=\"footer\">This is some footer</div>\n    </div>\n  </body>\n</html>\n```\n\n在IE7中，点击\"Click me\"，“This is some footer”没有随着边框向上走。在IE8/9/10/11，firefox里面都是正常。\n\n二、原因分析\n1 \\#panel没有布局，因此当#panel重新布局的时候，IE7没有重画#panel的孩子。\n2 position:relative没有触发IE的hasLayout属性。只有当元素的hasLayout属性被设为了true，才能对自己和子孙元素进行尺寸计算和定位。\n3 overflow:hidden和float:left和zoom:1都能触发hasLayout属性。\n<!--more-->\n至于为什么一定要触发hasLayout属性，才会对元素和元素的子孙进行重新定位，请参照【资料1】。\n\n三、解决方法\n\\#panel的属性中添加 overflow:hidden，或者添加float:left;width:100%; 再或者zoom:1 。这三种方法都是可以修复这个bug的。\n\n四、参考资料\n资料1：[IE7 relative/absolute positioning bug with dynamically modified page content](http://stackoverflow.com/questions/2473171/ie7-relative-absolute-positioning-bug-with-dynamically-modified-page-content)\n\n即然问题出在haslayout上，那下面就着重介绍一下haslayout\n\n# haslayout详解\n\nIE，这个令所有网站设计人员讨厌，但又不得不为它工作的浏览器。不论是6、7还是8，它们都有一个共同的渲染标准haslayout，所以haslayout 是一个非常有必要彻底弄清除的概念。大多 数IE下的显示错误，就是源于它。\n\n## 什么是Layout呢？\n\n\"Layout\"是IE的一个私有属性，并不是W3C标准。它决定了一个对象（就是一个标签div、li等）在内容中如何显示、与周围对象的位置关系、以及怎样响应程序或用户产生的事件。\n\n这个属性可以被一些css强制激活。一些HTML标签默认具有haslayout。\nPS：一个对象的layout属性被激活，它的具体表现就是haslayout=true。我们可以用IE Developer Toolbar工具看到被激活的对象带有\"haslayout = -1\"的属性。\n\n## 下面这些标签默认拥有haslayout属性：\n\n\n``` html\n<html>, <body>\n<table>, <tr>, <th>, <td>\n<img>\n<hr>\n<input>, <button>, <select>, <textarea>, <fieldset>, <legend>\n<iframe>, <embed>, <object>, <applet>\n<marquee>\n```\n<!--<p>&lt;html&gt;, &lt;body&gt;\n&lt;table&gt;, &lt;tr&gt;, &lt;th&gt;, &lt;td&gt;\n&lt;img&gt;\n&lt;hr&gt;\n&lt;input&gt;, &lt;button&gt;, &lt;select&gt;, &lt;textarea&gt;, &lt;fieldset&gt;, &lt;legend&gt;\n&lt;iframe&gt;, &lt;embed&gt;, &lt;object&gt;, &lt;applet&gt;\n&lt;marquee&gt;</p>-->\n\n\n你可能就问：微软干嘛要设layout这个东西呢？当一个对象的layout被激活时，它以及它的子对象的定位和尺寸计算将独立进行，不受附近对象 的干扰。也就是说它拥有一个独立的布局（layout）。因此浏览器要花费更多的代价来处理拥有haslayout的对象。为了提高性能，微软增加了 layout这个IE私有的概念。\n\n## 怎样激活layout？\n\n### 下面列出的css属性可以激活对象的layout：\n\nposition: absolute\n设置绝对定位可能会引发新的问题。\nfloat: left|right\nIE下的浮动也会产生一些莫名其妙的问题。\ndisplay: inline-block\n当一个内联元素需要haslayout属性时就需要用它，但是IE本身不支持inline-block的，只是表现得像标准里说的inline-block。\nwidth: 除'auto'外的任意值\n优先考虑使用该属性。\nheight: 除'auto'外的任意值\n对 IE6 及更早版本来说很常用，该方法被称为霍莉破解(Holly hack)，即设定这个元素的高度为 1% (height:1%;)。但是要注意，当这个元素的 overflow 属性被设置为 visible 时，这个方法就失效了。\nzoom: 除'normal'外的任意值\n又一个ie私有属性，不兼容标准。zoom:1可以在测试或者不追求标准的情况下使用，效果不错。\nwriting-mode: tb-rl\nie私有属性，不推荐用。\n### IE7 还有一些额外的属性：\n\nmin-height: (任意值)\nmax-height: (除 none 外任意值)\nmin-width: (任意值)\nmax-width: (除 none 外任意值)\noverflow: (除 visible 外任意值)\noverflow-x: (除 visible 外任意值)\noverflow-y: (除 visible 外任意值)\nposition: fixed\n重置haslayout\n\n### 在没有其它属性激活layout的情况下，使用下面的css可以重置haslayout属性：\n\nwidth, height (设为 \"auto\")\nmax-width, max-height (设为 \"none\")(在 IE 7 中)\nposition (设为 \"static\")\nfloat (设为 \"none\")\noverflow (设为 \"visible\") (在 IE 7 中)\nzoom (设为 \"normal\")\nwriting-mode (从 \"tb-rl\" 设为 \"lr-t\")\ndisplay 属性的不同：当用\"inline-block\"激活了haslayout 属性时，就算在一条独立的规则中覆盖这个属性为\"block\"或\"inline\"，haslayout 这个标志位也不会被重置为 false。\n\n把 mid-width, mid-height 设为它们的默认值\"0\"仍然会赋予 hasLayout，但是 IE 7 却可以接受一个不合法的属性\"auto\"来重置 hasLayout。\n","source":"_posts/关于haslayout.md","raw":"---\ntitle: '关于IE的下的haslayout问题'\ndate: 2016-01-26 10:58:48\ntags:\n  - 学习笔记\ncategories: 学习笔记\n---\n今天早上我们一个前端同事GQL遇到一个问题。在IE7下position:relative层在动态渲染时出现偏移.\n跟下面这个demo情景相似\n\n``` html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <title>IE7 absolute positioning bug</title>\n    <style type=\"text/css\">\n      #panel { position: relative; border: solid 1px black; }\n      #spacer { height: 100px; }\n      #footer { position: absolute; bottom: 0px; }\n    </style>\n    <script type=\"text/javascript\">\n      function toggle() {\n        var spacer = document.getElementById(\"spacer\");\n        var style = \"block\";\n        if (spacer.style.display == \"block\" || spacer.style.display == \"\") {\n          style = \"none\";\n        }\n        spacer.style.display = style;\n      }\n    </script>\n  </head>\n  <body>\n    <div id=\"panel\">\n      <button onclick=\"toggle();\">Click me</button>\n      <br /><br /><br />\n      <div id=\"spacer\"></div>\n      <div id=\"footer\">This is some footer</div>\n    </div>\n  </body>\n</html>\n```\n\n在IE7中，点击\"Click me\"，“This is some footer”没有随着边框向上走。在IE8/9/10/11，firefox里面都是正常。\n\n二、原因分析\n1 \\#panel没有布局，因此当#panel重新布局的时候，IE7没有重画#panel的孩子。\n2 position:relative没有触发IE的hasLayout属性。只有当元素的hasLayout属性被设为了true，才能对自己和子孙元素进行尺寸计算和定位。\n3 overflow:hidden和float:left和zoom:1都能触发hasLayout属性。\n<!--more-->\n至于为什么一定要触发hasLayout属性，才会对元素和元素的子孙进行重新定位，请参照【资料1】。\n\n三、解决方法\n\\#panel的属性中添加 overflow:hidden，或者添加float:left;width:100%; 再或者zoom:1 。这三种方法都是可以修复这个bug的。\n\n四、参考资料\n资料1：[IE7 relative/absolute positioning bug with dynamically modified page content](http://stackoverflow.com/questions/2473171/ie7-relative-absolute-positioning-bug-with-dynamically-modified-page-content)\n\n即然问题出在haslayout上，那下面就着重介绍一下haslayout\n\n# haslayout详解\n\nIE，这个令所有网站设计人员讨厌，但又不得不为它工作的浏览器。不论是6、7还是8，它们都有一个共同的渲染标准haslayout，所以haslayout 是一个非常有必要彻底弄清除的概念。大多 数IE下的显示错误，就是源于它。\n\n## 什么是Layout呢？\n\n\"Layout\"是IE的一个私有属性，并不是W3C标准。它决定了一个对象（就是一个标签div、li等）在内容中如何显示、与周围对象的位置关系、以及怎样响应程序或用户产生的事件。\n\n这个属性可以被一些css强制激活。一些HTML标签默认具有haslayout。\nPS：一个对象的layout属性被激活，它的具体表现就是haslayout=true。我们可以用IE Developer Toolbar工具看到被激活的对象带有\"haslayout = -1\"的属性。\n\n## 下面这些标签默认拥有haslayout属性：\n\n\n``` html\n<html>, <body>\n<table>, <tr>, <th>, <td>\n<img>\n<hr>\n<input>, <button>, <select>, <textarea>, <fieldset>, <legend>\n<iframe>, <embed>, <object>, <applet>\n<marquee>\n```\n<!--<p>&lt;html&gt;, &lt;body&gt;\n&lt;table&gt;, &lt;tr&gt;, &lt;th&gt;, &lt;td&gt;\n&lt;img&gt;\n&lt;hr&gt;\n&lt;input&gt;, &lt;button&gt;, &lt;select&gt;, &lt;textarea&gt;, &lt;fieldset&gt;, &lt;legend&gt;\n&lt;iframe&gt;, &lt;embed&gt;, &lt;object&gt;, &lt;applet&gt;\n&lt;marquee&gt;</p>-->\n\n\n你可能就问：微软干嘛要设layout这个东西呢？当一个对象的layout被激活时，它以及它的子对象的定位和尺寸计算将独立进行，不受附近对象 的干扰。也就是说它拥有一个独立的布局（layout）。因此浏览器要花费更多的代价来处理拥有haslayout的对象。为了提高性能，微软增加了 layout这个IE私有的概念。\n\n## 怎样激活layout？\n\n### 下面列出的css属性可以激活对象的layout：\n\nposition: absolute\n设置绝对定位可能会引发新的问题。\nfloat: left|right\nIE下的浮动也会产生一些莫名其妙的问题。\ndisplay: inline-block\n当一个内联元素需要haslayout属性时就需要用它，但是IE本身不支持inline-block的，只是表现得像标准里说的inline-block。\nwidth: 除'auto'外的任意值\n优先考虑使用该属性。\nheight: 除'auto'外的任意值\n对 IE6 及更早版本来说很常用，该方法被称为霍莉破解(Holly hack)，即设定这个元素的高度为 1% (height:1%;)。但是要注意，当这个元素的 overflow 属性被设置为 visible 时，这个方法就失效了。\nzoom: 除'normal'外的任意值\n又一个ie私有属性，不兼容标准。zoom:1可以在测试或者不追求标准的情况下使用，效果不错。\nwriting-mode: tb-rl\nie私有属性，不推荐用。\n### IE7 还有一些额外的属性：\n\nmin-height: (任意值)\nmax-height: (除 none 外任意值)\nmin-width: (任意值)\nmax-width: (除 none 外任意值)\noverflow: (除 visible 外任意值)\noverflow-x: (除 visible 外任意值)\noverflow-y: (除 visible 外任意值)\nposition: fixed\n重置haslayout\n\n### 在没有其它属性激活layout的情况下，使用下面的css可以重置haslayout属性：\n\nwidth, height (设为 \"auto\")\nmax-width, max-height (设为 \"none\")(在 IE 7 中)\nposition (设为 \"static\")\nfloat (设为 \"none\")\noverflow (设为 \"visible\") (在 IE 7 中)\nzoom (设为 \"normal\")\nwriting-mode (从 \"tb-rl\" 设为 \"lr-t\")\ndisplay 属性的不同：当用\"inline-block\"激活了haslayout 属性时，就算在一条独立的规则中覆盖这个属性为\"block\"或\"inline\"，haslayout 这个标志位也不会被重置为 false。\n\n把 mid-width, mid-height 设为它们的默认值\"0\"仍然会赋予 hasLayout，但是 IE 7 却可以接受一个不合法的属性\"auto\"来重置 hasLayout。\n","slug":"关于haslayout","published":1,"updated":"2020-02-15T19:07:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr6eiski000g3fwy5arvlije","content":"<p>今天早上我们一个前端同事GQL遇到一个问题。在IE7下position:relative层在动态渲染时出现偏移.<br>跟下面这个demo情景相似</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//W3C//DTD XHTML 1.0 Transitional//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\"> <span class=\"meta-string\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>IE7 absolute positioning bug<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></span><br><span class=\"line\">      #panel &#123; position: relative; border: solid 1px black; &#125;</span><br><span class=\"line\">      #spacer &#123; height: 100px; &#125;</span><br><span class=\"line\">      #footer &#123; position: absolute; bottom: 0px; &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggle</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> spacer = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"spacer\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> style = <span class=\"string\">\"block\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (spacer.style.display == <span class=\"string\">\"block\"</span> || spacer.style.display == <span class=\"string\">\"\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          style = <span class=\"string\">\"none\"</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        spacer.style.display = style;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"toggle();\"</span>&gt;</span>Click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"spacer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"footer\"</span>&gt;</span>This is some footer<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在IE7中，点击”Click me”，“This is some footer”没有随着边框向上走。在IE8/9/10/11，firefox里面都是正常。</p>\n<p>二、原因分析<br>1 #panel没有布局，因此当#panel重新布局的时候，IE7没有重画#panel的孩子。<br>2 position:relative没有触发IE的hasLayout属性。只有当元素的hasLayout属性被设为了true，才能对自己和子孙元素进行尺寸计算和定位。<br>3 overflow:hidden和float:left和zoom:1都能触发hasLayout属性。<br><a id=\"more\"></a><br>至于为什么一定要触发hasLayout属性，才会对元素和元素的子孙进行重新定位，请参照【资料1】。</p>\n<p>三、解决方法<br>#panel的属性中添加 overflow:hidden，或者添加float:left;width:100%; 再或者zoom:1 。这三种方法都是可以修复这个bug的。</p>\n<p>四、参考资料<br>资料1：<a href=\"http://stackoverflow.com/questions/2473171/ie7-relative-absolute-positioning-bug-with-dynamically-modified-page-content\" target=\"_blank\" rel=\"noopener\">IE7 relative/absolute positioning bug with dynamically modified page content</a></p>\n<p>即然问题出在haslayout上，那下面就着重介绍一下haslayout</p>\n<h1 id=\"haslayout详解\"><a href=\"#haslayout详解\" class=\"headerlink\" title=\"haslayout详解\"></a>haslayout详解</h1><p>IE，这个令所有网站设计人员讨厌，但又不得不为它工作的浏览器。不论是6、7还是8，它们都有一个共同的渲染标准haslayout，所以haslayout 是一个非常有必要彻底弄清除的概念。大多 数IE下的显示错误，就是源于它。</p>\n<h2 id=\"什么是Layout呢？\"><a href=\"#什么是Layout呢？\" class=\"headerlink\" title=\"什么是Layout呢？\"></a>什么是Layout呢？</h2><p>“Layout”是IE的一个私有属性，并不是W3C标准。它决定了一个对象（就是一个标签div、li等）在内容中如何显示、与周围对象的位置关系、以及怎样响应程序或用户产生的事件。</p>\n<p>这个属性可以被一些css强制激活。一些HTML标签默认具有haslayout。<br>PS：一个对象的layout属性被激活，它的具体表现就是haslayout=true。我们可以用IE Developer Toolbar工具看到被激活的对象带有”haslayout = -1”的属性。</p>\n<h2 id=\"下面这些标签默认拥有haslayout属性：\"><a href=\"#下面这些标签默认拥有haslayout属性：\" class=\"headerlink\" title=\"下面这些标签默认拥有haslayout属性：\"></a>下面这些标签默认拥有haslayout属性：</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">textarea</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">embed</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">object</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">applet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<!--<p>&lt;html&gt;, &lt;body&gt;\n&lt;table&gt;, &lt;tr&gt;, &lt;th&gt;, &lt;td&gt;\n&lt;img&gt;\n&lt;hr&gt;\n&lt;input&gt;, &lt;button&gt;, &lt;select&gt;, &lt;textarea&gt;, &lt;fieldset&gt;, &lt;legend&gt;\n&lt;iframe&gt;, &lt;embed&gt;, &lt;object&gt;, &lt;applet&gt;\n&lt;marquee&gt;</p>-->\n<p>你可能就问：微软干嘛要设layout这个东西呢？当一个对象的layout被激活时，它以及它的子对象的定位和尺寸计算将独立进行，不受附近对象 的干扰。也就是说它拥有一个独立的布局（layout）。因此浏览器要花费更多的代价来处理拥有haslayout的对象。为了提高性能，微软增加了 layout这个IE私有的概念。</p>\n<h2 id=\"怎样激活layout？\"><a href=\"#怎样激活layout？\" class=\"headerlink\" title=\"怎样激活layout？\"></a>怎样激活layout？</h2><h3 id=\"下面列出的css属性可以激活对象的layout：\"><a href=\"#下面列出的css属性可以激活对象的layout：\" class=\"headerlink\" title=\"下面列出的css属性可以激活对象的layout：\"></a>下面列出的css属性可以激活对象的layout：</h3><p>position: absolute<br>设置绝对定位可能会引发新的问题。<br>float: left|right<br>IE下的浮动也会产生一些莫名其妙的问题。<br>display: inline-block<br>当一个内联元素需要haslayout属性时就需要用它，但是IE本身不支持inline-block的，只是表现得像标准里说的inline-block。<br>width: 除’auto’外的任意值<br>优先考虑使用该属性。<br>height: 除’auto’外的任意值<br>对 IE6 及更早版本来说很常用，该方法被称为霍莉破解(Holly hack)，即设定这个元素的高度为 1% (height:1%;)。但是要注意，当这个元素的 overflow 属性被设置为 visible 时，这个方法就失效了。<br>zoom: 除’normal’外的任意值<br>又一个ie私有属性，不兼容标准。zoom:1可以在测试或者不追求标准的情况下使用，效果不错。<br>writing-mode: tb-rl<br>ie私有属性，不推荐用。</p>\n<h3 id=\"IE7-还有一些额外的属性：\"><a href=\"#IE7-还有一些额外的属性：\" class=\"headerlink\" title=\"IE7 还有一些额外的属性：\"></a>IE7 还有一些额外的属性：</h3><p>min-height: (任意值)<br>max-height: (除 none 外任意值)<br>min-width: (任意值)<br>max-width: (除 none 外任意值)<br>overflow: (除 visible 外任意值)<br>overflow-x: (除 visible 外任意值)<br>overflow-y: (除 visible 外任意值)<br>position: fixed<br>重置haslayout</p>\n<h3 id=\"在没有其它属性激活layout的情况下，使用下面的css可以重置haslayout属性：\"><a href=\"#在没有其它属性激活layout的情况下，使用下面的css可以重置haslayout属性：\" class=\"headerlink\" title=\"在没有其它属性激活layout的情况下，使用下面的css可以重置haslayout属性：\"></a>在没有其它属性激活layout的情况下，使用下面的css可以重置haslayout属性：</h3><p>width, height (设为 “auto”)<br>max-width, max-height (设为 “none”)(在 IE 7 中)<br>position (设为 “static”)<br>float (设为 “none”)<br>overflow (设为 “visible”) (在 IE 7 中)<br>zoom (设为 “normal”)<br>writing-mode (从 “tb-rl” 设为 “lr-t”)<br>display 属性的不同：当用”inline-block”激活了haslayout 属性时，就算在一条独立的规则中覆盖这个属性为”block”或”inline”，haslayout 这个标志位也不会被重置为 false。</p>\n<p>把 mid-width, mid-height 设为它们的默认值”0”仍然会赋予 hasLayout，但是 IE 7 却可以接受一个不合法的属性”auto”来重置 hasLayout。</p>\n","site":{"data":{}},"excerpt":"<p>今天早上我们一个前端同事GQL遇到一个问题。在IE7下position:relative层在动态渲染时出现偏移.<br>跟下面这个demo情景相似</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//W3C//DTD XHTML 1.0 Transitional//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\"> <span class=\"meta-string\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>IE7 absolute positioning bug<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></span><br><span class=\"line\">      #panel &#123; position: relative; border: solid 1px black; &#125;</span><br><span class=\"line\">      #spacer &#123; height: 100px; &#125;</span><br><span class=\"line\">      #footer &#123; position: absolute; bottom: 0px; &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggle</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> spacer = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"spacer\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> style = <span class=\"string\">\"block\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (spacer.style.display == <span class=\"string\">\"block\"</span> || spacer.style.display == <span class=\"string\">\"\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          style = <span class=\"string\">\"none\"</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        spacer.style.display = style;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"toggle();\"</span>&gt;</span>Click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"spacer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"footer\"</span>&gt;</span>This is some footer<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在IE7中，点击”Click me”，“This is some footer”没有随着边框向上走。在IE8/9/10/11，firefox里面都是正常。</p>\n<p>二、原因分析<br>1 #panel没有布局，因此当#panel重新布局的时候，IE7没有重画#panel的孩子。<br>2 position:relative没有触发IE的hasLayout属性。只有当元素的hasLayout属性被设为了true，才能对自己和子孙元素进行尺寸计算和定位。<br>3 overflow:hidden和float:left和zoom:1都能触发hasLayout属性。<br>","more":"<br>至于为什么一定要触发hasLayout属性，才会对元素和元素的子孙进行重新定位，请参照【资料1】。</p>\n<p>三、解决方法<br>#panel的属性中添加 overflow:hidden，或者添加float:left;width:100%; 再或者zoom:1 。这三种方法都是可以修复这个bug的。</p>\n<p>四、参考资料<br>资料1：<a href=\"http://stackoverflow.com/questions/2473171/ie7-relative-absolute-positioning-bug-with-dynamically-modified-page-content\" target=\"_blank\" rel=\"noopener\">IE7 relative/absolute positioning bug with dynamically modified page content</a></p>\n<p>即然问题出在haslayout上，那下面就着重介绍一下haslayout</p>\n<h1 id=\"haslayout详解\"><a href=\"#haslayout详解\" class=\"headerlink\" title=\"haslayout详解\"></a>haslayout详解</h1><p>IE，这个令所有网站设计人员讨厌，但又不得不为它工作的浏览器。不论是6、7还是8，它们都有一个共同的渲染标准haslayout，所以haslayout 是一个非常有必要彻底弄清除的概念。大多 数IE下的显示错误，就是源于它。</p>\n<h2 id=\"什么是Layout呢？\"><a href=\"#什么是Layout呢？\" class=\"headerlink\" title=\"什么是Layout呢？\"></a>什么是Layout呢？</h2><p>“Layout”是IE的一个私有属性，并不是W3C标准。它决定了一个对象（就是一个标签div、li等）在内容中如何显示、与周围对象的位置关系、以及怎样响应程序或用户产生的事件。</p>\n<p>这个属性可以被一些css强制激活。一些HTML标签默认具有haslayout。<br>PS：一个对象的layout属性被激活，它的具体表现就是haslayout=true。我们可以用IE Developer Toolbar工具看到被激活的对象带有”haslayout = -1”的属性。</p>\n<h2 id=\"下面这些标签默认拥有haslayout属性：\"><a href=\"#下面这些标签默认拥有haslayout属性：\" class=\"headerlink\" title=\"下面这些标签默认拥有haslayout属性：\"></a>下面这些标签默认拥有haslayout属性：</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">textarea</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">embed</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">object</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">applet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<!--<p>&lt;html&gt;, &lt;body&gt;\n&lt;table&gt;, &lt;tr&gt;, &lt;th&gt;, &lt;td&gt;\n&lt;img&gt;\n&lt;hr&gt;\n&lt;input&gt;, &lt;button&gt;, &lt;select&gt;, &lt;textarea&gt;, &lt;fieldset&gt;, &lt;legend&gt;\n&lt;iframe&gt;, &lt;embed&gt;, &lt;object&gt;, &lt;applet&gt;\n&lt;marquee&gt;</p>-->\n<p>你可能就问：微软干嘛要设layout这个东西呢？当一个对象的layout被激活时，它以及它的子对象的定位和尺寸计算将独立进行，不受附近对象 的干扰。也就是说它拥有一个独立的布局（layout）。因此浏览器要花费更多的代价来处理拥有haslayout的对象。为了提高性能，微软增加了 layout这个IE私有的概念。</p>\n<h2 id=\"怎样激活layout？\"><a href=\"#怎样激活layout？\" class=\"headerlink\" title=\"怎样激活layout？\"></a>怎样激活layout？</h2><h3 id=\"下面列出的css属性可以激活对象的layout：\"><a href=\"#下面列出的css属性可以激活对象的layout：\" class=\"headerlink\" title=\"下面列出的css属性可以激活对象的layout：\"></a>下面列出的css属性可以激活对象的layout：</h3><p>position: absolute<br>设置绝对定位可能会引发新的问题。<br>float: left|right<br>IE下的浮动也会产生一些莫名其妙的问题。<br>display: inline-block<br>当一个内联元素需要haslayout属性时就需要用它，但是IE本身不支持inline-block的，只是表现得像标准里说的inline-block。<br>width: 除’auto’外的任意值<br>优先考虑使用该属性。<br>height: 除’auto’外的任意值<br>对 IE6 及更早版本来说很常用，该方法被称为霍莉破解(Holly hack)，即设定这个元素的高度为 1% (height:1%;)。但是要注意，当这个元素的 overflow 属性被设置为 visible 时，这个方法就失效了。<br>zoom: 除’normal’外的任意值<br>又一个ie私有属性，不兼容标准。zoom:1可以在测试或者不追求标准的情况下使用，效果不错。<br>writing-mode: tb-rl<br>ie私有属性，不推荐用。</p>\n<h3 id=\"IE7-还有一些额外的属性：\"><a href=\"#IE7-还有一些额外的属性：\" class=\"headerlink\" title=\"IE7 还有一些额外的属性：\"></a>IE7 还有一些额外的属性：</h3><p>min-height: (任意值)<br>max-height: (除 none 外任意值)<br>min-width: (任意值)<br>max-width: (除 none 外任意值)<br>overflow: (除 visible 外任意值)<br>overflow-x: (除 visible 外任意值)<br>overflow-y: (除 visible 外任意值)<br>position: fixed<br>重置haslayout</p>\n<h3 id=\"在没有其它属性激活layout的情况下，使用下面的css可以重置haslayout属性：\"><a href=\"#在没有其它属性激活layout的情况下，使用下面的css可以重置haslayout属性：\" class=\"headerlink\" title=\"在没有其它属性激活layout的情况下，使用下面的css可以重置haslayout属性：\"></a>在没有其它属性激活layout的情况下，使用下面的css可以重置haslayout属性：</h3><p>width, height (设为 “auto”)<br>max-width, max-height (设为 “none”)(在 IE 7 中)<br>position (设为 “static”)<br>float (设为 “none”)<br>overflow (设为 “visible”) (在 IE 7 中)<br>zoom (设为 “normal”)<br>writing-mode (从 “tb-rl” 设为 “lr-t”)<br>display 属性的不同：当用”inline-block”激活了haslayout 属性时，就算在一条独立的规则中覆盖这个属性为”block”或”inline”，haslayout 这个标志位也不会被重置为 false。</p>\n<p>把 mid-width, mid-height 设为它们的默认值”0”仍然会赋予 hasLayout，但是 IE 7 却可以接受一个不合法的属性”auto”来重置 hasLayout。</p>"},{"title":"关于面试","date":"2016-01-25T15:32:50.000Z","_content":"今天天小组会的时候组长wh模拟了一次面试。面试对象是猴哥，但问题几乎虐翻全场。\n这两年也经过的一些面试，总结感受。我觉得面试有三个要点，一看真实实力，二看运气，三看面试你的人。对whao这种技术狂人来说，面试是一个互劈的过程。当然我是面试官可能也不太会以自己软肋接别人硬拳头。所以通过他进入平安的人都是js逼，绝逼不可能有css逼。我看得出他十分享受别人被他问的一愣一愣又一脸崇拜的样子。他问猴哥的问题我印象里在去年他做过一次分享会。既是能拿出手的一定是他强项。当然，这不代表他其他方面就弱。所以记住一点，面试官问的问题一般都是有备而来，胸有成竹的。所以不会就谦虚点坦言自己不会，千万别不会还一本正经的胡说八道。技不如人不丢人，通过后天学习可以弥补。但不会做人就是品质问题了。会做事是(IQ)而处理事的态度是(EQ)。我觉得实际工作中情商比智商更重要。\n\n当然如果你足够有聪慧又健谈，也可以争得主动权引导着面试官跟着你的思路走。多聊你自己擅长的东西，但前提得是你这方面真的牛逼，否则不要轻易撕逼，否则撕完你就成傻逼。前端是一个知识很广泛的圈。只要不是到了专家的变态级别应该不会有人真的各个方面都无懈可击。\n一般来说去面试跟你聊生活的是行政人事，聊技术的是同事或Leader， 聊情怀和理想的是老板。其他俩个随便扯扯淡即可，聊技术的，决定了你今后跟什么样的人和团队共事。 从面试官的身上可以直接反映这个前端团队的技术层次和应征单位前端职位的受重视程度。这是一个互相试水的过程。所以一定要诚实对待，假如你跟面你的人话不投机就别妄想了。就算你趋炎附势混进去，终有一天也会因各种水土不服滚出来。我常说面试跟相亲一样，虽然我没相过亲，但没吃过猪肉也看过猪跑。面试二字，面首先是眼缘，第一印象，话语是否投机，沟通是否顺畅，其次是试。这试具体前面已经说过，不再赘述。有机会还是多去知名的大公司去。我不是对小公司有偏见，也不否认小公司也有强人，而是概率问题，就像我相信“鸡窝里也能飞出金凤凰”，但毕竟少数个例，总能看见鸡窝里飞出凤凰的概率还是极低的。\n附几个较新的前端面试题链接。平时可以自己做一下。心里有个底，不足则加勉。\n来源阿里的寒冬witer老师(github:@wintercn)\n[前端开发面试题](https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md?from=timeline&isappinstalled=0)\n来源凯歌博客[前端开发面试题](https://github.com/jsonxu/F2E-Blog/blob/master/2015%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md)\n[前端开发面试问题及答案整理1](https://github.com/hawx1993/Front-end-Interview-questions)\n[前端开发面试问题及答案整理2](https://github.com/AutumnsWind/Front-end-questions-to-the-interview-stage)\n[前端开发面试问题及答案整理3](https://github.com/paddingme/Front-end-Web-Development-Interview-Question)\n[前端开发面试问题及答案整理4](https://github.com/qiu-deqing/FE-interview)\n说完面试，再聊聊最近学习上的一些感悟。进入平安金科也有1年半。各个小组也都共事过一圈。从一账通到官网到旗舰店，平安金融卫士，到现在的移动端。每个小组和组长都有自己的特点，优势和不足。这一年收获很大。美国有句谚语“学会游泳的最好办法 就是把鸭子扔进河里”想学到东西方法很多，最有用的途径绝不是照本宣科，而是投在实际项目中不断的打怪升级。不要畏惧辛苦，手里有项目做，并且是有价值的项目是一件极好的事。\n人无论水平高还是低，在自学的过程中都会有自己的瓶颈和盲点。有时我们或许很用心认真的按自己的逻辑完成一个demo，你觉得你已经倾其所能把它做到极致了。OK你觉得很完美。其实远远不够，多看别人的代码，会从中获取新的能量。我有时常看zf的代码会发现他做了跟我同样的东西，却用了不同的办法。然后思考他为什么这么做？好处是什么？思考之后，去其糟粕，取其精华，再回头把自己原来的代码进一步优化。可能忽然一下如醍醐灌顶。 \n\n古话说“他山之石，可以功玉” 可能你开始只会把别人的代码拷过来，后来渐渐会改一点。一点点从借用到巧用，但只要足够坚持，天道酬勤总有一天你会写出自己的东西。\n我很喜欢图灵的书，觉的几乎每本都是精华，但每本图灵的书封总有那句话“站在巨人的肩膀上”!\n 我觉得不管用什么方式，只要不涉及版权和盈利目地，在合理范围内以正常途径的抄写，借鉴，引用……只要可以从中吸收营养，推进自己进步都不失为一种好的学习途径。\n","source":"_posts/关于面试.md","raw":"---\ntitle: 关于面试\ndate: 2016-01-25 23:32:50\ntags:\n- 前题面试题\n- 随笔\n---\n今天天小组会的时候组长wh模拟了一次面试。面试对象是猴哥，但问题几乎虐翻全场。\n这两年也经过的一些面试，总结感受。我觉得面试有三个要点，一看真实实力，二看运气，三看面试你的人。对whao这种技术狂人来说，面试是一个互劈的过程。当然我是面试官可能也不太会以自己软肋接别人硬拳头。所以通过他进入平安的人都是js逼，绝逼不可能有css逼。我看得出他十分享受别人被他问的一愣一愣又一脸崇拜的样子。他问猴哥的问题我印象里在去年他做过一次分享会。既是能拿出手的一定是他强项。当然，这不代表他其他方面就弱。所以记住一点，面试官问的问题一般都是有备而来，胸有成竹的。所以不会就谦虚点坦言自己不会，千万别不会还一本正经的胡说八道。技不如人不丢人，通过后天学习可以弥补。但不会做人就是品质问题了。会做事是(IQ)而处理事的态度是(EQ)。我觉得实际工作中情商比智商更重要。\n\n当然如果你足够有聪慧又健谈，也可以争得主动权引导着面试官跟着你的思路走。多聊你自己擅长的东西，但前提得是你这方面真的牛逼，否则不要轻易撕逼，否则撕完你就成傻逼。前端是一个知识很广泛的圈。只要不是到了专家的变态级别应该不会有人真的各个方面都无懈可击。\n一般来说去面试跟你聊生活的是行政人事，聊技术的是同事或Leader， 聊情怀和理想的是老板。其他俩个随便扯扯淡即可，聊技术的，决定了你今后跟什么样的人和团队共事。 从面试官的身上可以直接反映这个前端团队的技术层次和应征单位前端职位的受重视程度。这是一个互相试水的过程。所以一定要诚实对待，假如你跟面你的人话不投机就别妄想了。就算你趋炎附势混进去，终有一天也会因各种水土不服滚出来。我常说面试跟相亲一样，虽然我没相过亲，但没吃过猪肉也看过猪跑。面试二字，面首先是眼缘，第一印象，话语是否投机，沟通是否顺畅，其次是试。这试具体前面已经说过，不再赘述。有机会还是多去知名的大公司去。我不是对小公司有偏见，也不否认小公司也有强人，而是概率问题，就像我相信“鸡窝里也能飞出金凤凰”，但毕竟少数个例，总能看见鸡窝里飞出凤凰的概率还是极低的。\n附几个较新的前端面试题链接。平时可以自己做一下。心里有个底，不足则加勉。\n来源阿里的寒冬witer老师(github:@wintercn)\n[前端开发面试题](https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md?from=timeline&isappinstalled=0)\n来源凯歌博客[前端开发面试题](https://github.com/jsonxu/F2E-Blog/blob/master/2015%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md)\n[前端开发面试问题及答案整理1](https://github.com/hawx1993/Front-end-Interview-questions)\n[前端开发面试问题及答案整理2](https://github.com/AutumnsWind/Front-end-questions-to-the-interview-stage)\n[前端开发面试问题及答案整理3](https://github.com/paddingme/Front-end-Web-Development-Interview-Question)\n[前端开发面试问题及答案整理4](https://github.com/qiu-deqing/FE-interview)\n说完面试，再聊聊最近学习上的一些感悟。进入平安金科也有1年半。各个小组也都共事过一圈。从一账通到官网到旗舰店，平安金融卫士，到现在的移动端。每个小组和组长都有自己的特点，优势和不足。这一年收获很大。美国有句谚语“学会游泳的最好办法 就是把鸭子扔进河里”想学到东西方法很多，最有用的途径绝不是照本宣科，而是投在实际项目中不断的打怪升级。不要畏惧辛苦，手里有项目做，并且是有价值的项目是一件极好的事。\n人无论水平高还是低，在自学的过程中都会有自己的瓶颈和盲点。有时我们或许很用心认真的按自己的逻辑完成一个demo，你觉得你已经倾其所能把它做到极致了。OK你觉得很完美。其实远远不够，多看别人的代码，会从中获取新的能量。我有时常看zf的代码会发现他做了跟我同样的东西，却用了不同的办法。然后思考他为什么这么做？好处是什么？思考之后，去其糟粕，取其精华，再回头把自己原来的代码进一步优化。可能忽然一下如醍醐灌顶。 \n\n古话说“他山之石，可以功玉” 可能你开始只会把别人的代码拷过来，后来渐渐会改一点。一点点从借用到巧用，但只要足够坚持，天道酬勤总有一天你会写出自己的东西。\n我很喜欢图灵的书，觉的几乎每本都是精华，但每本图灵的书封总有那句话“站在巨人的肩膀上”!\n 我觉得不管用什么方式，只要不涉及版权和盈利目地，在合理范围内以正常途径的抄写，借鉴，引用……只要可以从中吸收营养，推进自己进步都不失为一种好的学习途径。\n","slug":"关于面试","published":1,"updated":"2020-02-15T19:07:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr6eiskk000l3fwy2ozvlpb7","content":"<p>今天天小组会的时候组长wh模拟了一次面试。面试对象是猴哥，但问题几乎虐翻全场。<br>这两年也经过的一些面试，总结感受。我觉得面试有三个要点，一看真实实力，二看运气，三看面试你的人。对whao这种技术狂人来说，面试是一个互劈的过程。当然我是面试官可能也不太会以自己软肋接别人硬拳头。所以通过他进入平安的人都是js逼，绝逼不可能有css逼。我看得出他十分享受别人被他问的一愣一愣又一脸崇拜的样子。他问猴哥的问题我印象里在去年他做过一次分享会。既是能拿出手的一定是他强项。当然，这不代表他其他方面就弱。所以记住一点，面试官问的问题一般都是有备而来，胸有成竹的。所以不会就谦虚点坦言自己不会，千万别不会还一本正经的胡说八道。技不如人不丢人，通过后天学习可以弥补。但不会做人就是品质问题了。会做事是(IQ)而处理事的态度是(EQ)。我觉得实际工作中情商比智商更重要。</p>\n<p>当然如果你足够有聪慧又健谈，也可以争得主动权引导着面试官跟着你的思路走。多聊你自己擅长的东西，但前提得是你这方面真的牛逼，否则不要轻易撕逼，否则撕完你就成傻逼。前端是一个知识很广泛的圈。只要不是到了专家的变态级别应该不会有人真的各个方面都无懈可击。<br>一般来说去面试跟你聊生活的是行政人事，聊技术的是同事或Leader， 聊情怀和理想的是老板。其他俩个随便扯扯淡即可，聊技术的，决定了你今后跟什么样的人和团队共事。 从面试官的身上可以直接反映这个前端团队的技术层次和应征单位前端职位的受重视程度。这是一个互相试水的过程。所以一定要诚实对待，假如你跟面你的人话不投机就别妄想了。就算你趋炎附势混进去，终有一天也会因各种水土不服滚出来。我常说面试跟相亲一样，虽然我没相过亲，但没吃过猪肉也看过猪跑。面试二字，面首先是眼缘，第一印象，话语是否投机，沟通是否顺畅，其次是试。这试具体前面已经说过，不再赘述。有机会还是多去知名的大公司去。我不是对小公司有偏见，也不否认小公司也有强人，而是概率问题，就像我相信“鸡窝里也能飞出金凤凰”，但毕竟少数个例，总能看见鸡窝里飞出凤凰的概率还是极低的。<br>附几个较新的前端面试题链接。平时可以自己做一下。心里有个底，不足则加勉。<br>来源阿里的寒冬witer老师(github:@wintercn)<br><a href=\"https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md?from=timeline&amp;isappinstalled=0\" target=\"_blank\" rel=\"noopener\">前端开发面试题</a><br>来源凯歌博客<a href=\"https://github.com/jsonxu/F2E-Blog/blob/master/2015%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md\" target=\"_blank\" rel=\"noopener\">前端开发面试题</a><br><a href=\"https://github.com/hawx1993/Front-end-Interview-questions\" target=\"_blank\" rel=\"noopener\">前端开发面试问题及答案整理1</a><br><a href=\"https://github.com/AutumnsWind/Front-end-questions-to-the-interview-stage\" target=\"_blank\" rel=\"noopener\">前端开发面试问题及答案整理2</a><br><a href=\"https://github.com/paddingme/Front-end-Web-Development-Interview-Question\" target=\"_blank\" rel=\"noopener\">前端开发面试问题及答案整理3</a><br><a href=\"https://github.com/qiu-deqing/FE-interview\" target=\"_blank\" rel=\"noopener\">前端开发面试问题及答案整理4</a><br>说完面试，再聊聊最近学习上的一些感悟。进入平安金科也有1年半。各个小组也都共事过一圈。从一账通到官网到旗舰店，平安金融卫士，到现在的移动端。每个小组和组长都有自己的特点，优势和不足。这一年收获很大。美国有句谚语“学会游泳的最好办法 就是把鸭子扔进河里”想学到东西方法很多，最有用的途径绝不是照本宣科，而是投在实际项目中不断的打怪升级。不要畏惧辛苦，手里有项目做，并且是有价值的项目是一件极好的事。<br>人无论水平高还是低，在自学的过程中都会有自己的瓶颈和盲点。有时我们或许很用心认真的按自己的逻辑完成一个demo，你觉得你已经倾其所能把它做到极致了。OK你觉得很完美。其实远远不够，多看别人的代码，会从中获取新的能量。我有时常看zf的代码会发现他做了跟我同样的东西，却用了不同的办法。然后思考他为什么这么做？好处是什么？思考之后，去其糟粕，取其精华，再回头把自己原来的代码进一步优化。可能忽然一下如醍醐灌顶。 </p>\n<p>古话说“他山之石，可以功玉” 可能你开始只会把别人的代码拷过来，后来渐渐会改一点。一点点从借用到巧用，但只要足够坚持，天道酬勤总有一天你会写出自己的东西。<br>我很喜欢图灵的书，觉的几乎每本都是精华，但每本图灵的书封总有那句话“站在巨人的肩膀上”!<br> 我觉得不管用什么方式，只要不涉及版权和盈利目地，在合理范围内以正常途径的抄写，借鉴，引用……只要可以从中吸收营养，推进自己进步都不失为一种好的学习途径。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天天小组会的时候组长wh模拟了一次面试。面试对象是猴哥，但问题几乎虐翻全场。<br>这两年也经过的一些面试，总结感受。我觉得面试有三个要点，一看真实实力，二看运气，三看面试你的人。对whao这种技术狂人来说，面试是一个互劈的过程。当然我是面试官可能也不太会以自己软肋接别人硬拳头。所以通过他进入平安的人都是js逼，绝逼不可能有css逼。我看得出他十分享受别人被他问的一愣一愣又一脸崇拜的样子。他问猴哥的问题我印象里在去年他做过一次分享会。既是能拿出手的一定是他强项。当然，这不代表他其他方面就弱。所以记住一点，面试官问的问题一般都是有备而来，胸有成竹的。所以不会就谦虚点坦言自己不会，千万别不会还一本正经的胡说八道。技不如人不丢人，通过后天学习可以弥补。但不会做人就是品质问题了。会做事是(IQ)而处理事的态度是(EQ)。我觉得实际工作中情商比智商更重要。</p>\n<p>当然如果你足够有聪慧又健谈，也可以争得主动权引导着面试官跟着你的思路走。多聊你自己擅长的东西，但前提得是你这方面真的牛逼，否则不要轻易撕逼，否则撕完你就成傻逼。前端是一个知识很广泛的圈。只要不是到了专家的变态级别应该不会有人真的各个方面都无懈可击。<br>一般来说去面试跟你聊生活的是行政人事，聊技术的是同事或Leader， 聊情怀和理想的是老板。其他俩个随便扯扯淡即可，聊技术的，决定了你今后跟什么样的人和团队共事。 从面试官的身上可以直接反映这个前端团队的技术层次和应征单位前端职位的受重视程度。这是一个互相试水的过程。所以一定要诚实对待，假如你跟面你的人话不投机就别妄想了。就算你趋炎附势混进去，终有一天也会因各种水土不服滚出来。我常说面试跟相亲一样，虽然我没相过亲，但没吃过猪肉也看过猪跑。面试二字，面首先是眼缘，第一印象，话语是否投机，沟通是否顺畅，其次是试。这试具体前面已经说过，不再赘述。有机会还是多去知名的大公司去。我不是对小公司有偏见，也不否认小公司也有强人，而是概率问题，就像我相信“鸡窝里也能飞出金凤凰”，但毕竟少数个例，总能看见鸡窝里飞出凤凰的概率还是极低的。<br>附几个较新的前端面试题链接。平时可以自己做一下。心里有个底，不足则加勉。<br>来源阿里的寒冬witer老师(github:@wintercn)<br><a href=\"https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md?from=timeline&amp;isappinstalled=0\" target=\"_blank\" rel=\"noopener\">前端开发面试题</a><br>来源凯歌博客<a href=\"https://github.com/jsonxu/F2E-Blog/blob/master/2015%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md\" target=\"_blank\" rel=\"noopener\">前端开发面试题</a><br><a href=\"https://github.com/hawx1993/Front-end-Interview-questions\" target=\"_blank\" rel=\"noopener\">前端开发面试问题及答案整理1</a><br><a href=\"https://github.com/AutumnsWind/Front-end-questions-to-the-interview-stage\" target=\"_blank\" rel=\"noopener\">前端开发面试问题及答案整理2</a><br><a href=\"https://github.com/paddingme/Front-end-Web-Development-Interview-Question\" target=\"_blank\" rel=\"noopener\">前端开发面试问题及答案整理3</a><br><a href=\"https://github.com/qiu-deqing/FE-interview\" target=\"_blank\" rel=\"noopener\">前端开发面试问题及答案整理4</a><br>说完面试，再聊聊最近学习上的一些感悟。进入平安金科也有1年半。各个小组也都共事过一圈。从一账通到官网到旗舰店，平安金融卫士，到现在的移动端。每个小组和组长都有自己的特点，优势和不足。这一年收获很大。美国有句谚语“学会游泳的最好办法 就是把鸭子扔进河里”想学到东西方法很多，最有用的途径绝不是照本宣科，而是投在实际项目中不断的打怪升级。不要畏惧辛苦，手里有项目做，并且是有价值的项目是一件极好的事。<br>人无论水平高还是低，在自学的过程中都会有自己的瓶颈和盲点。有时我们或许很用心认真的按自己的逻辑完成一个demo，你觉得你已经倾其所能把它做到极致了。OK你觉得很完美。其实远远不够，多看别人的代码，会从中获取新的能量。我有时常看zf的代码会发现他做了跟我同样的东西，却用了不同的办法。然后思考他为什么这么做？好处是什么？思考之后，去其糟粕，取其精华，再回头把自己原来的代码进一步优化。可能忽然一下如醍醐灌顶。 </p>\n<p>古话说“他山之石，可以功玉” 可能你开始只会把别人的代码拷过来，后来渐渐会改一点。一点点从借用到巧用，但只要足够坚持，天道酬勤总有一天你会写出自己的东西。<br>我很喜欢图灵的书，觉的几乎每本都是精华，但每本图灵的书封总有那句话“站在巨人的肩膀上”!<br> 我觉得不管用什么方式，只要不涉及版权和盈利目地，在合理范围内以正常途径的抄写，借鉴，引用……只要可以从中吸收营养，推进自己进步都不失为一种好的学习途径。</p>\n"},{"title":"重新开博－hexo建站笔记","date":"2016-01-20T01:51:37.000Z","_content":"这两天重新搭了hexo博客.过程中一直不停的踩坑踩到脚软。一年前我搭过一个hexo博客。\n由于博客的域名前缀必须跟github账号名一至。介于以前的github用户名有点土，不符合我的个人风格，\n于是为了更土一点就重新注了个github账号。好了,开始入坑：\n<!-- more -->\n坑一：\n重新关联个帐呈本来不是什么难事，我以为本地仓库不用管，只要是把远程对接仓库的ssh和本地ssh对应上就好了。\n事实证明我to young to simple。\n本地的全局配置的用户名和邮箱没改，所以每次提交都说我的远程仓库没权限管理以前用户（yea..，土就不说全名了）。\n执行查看了一下全局配置：\n``` bash\n$ git config -l\n```\n 发现全局用户名和邮箱还是以前的，把这些依次改了，提交前会提示输入sshkey的密码。问题解决\n（其实这个问题上周五就解决过一次，当时不知道为啥好了。关机周一再启动又坏了。总之做之前先pull一下再说）以上是坑一。\n\n坑二:\nhexo搭建的时候我npm和hexo都全局安了。但hexo init后总报错.提示init完还要在npm install一下。\n我自作聪明的以为npm都全局安了就不用再install了。结果再次证明我to yuong to simple,\n老老实实按照提示安装（npm更新到最新版本以后不再提示再装）\n\n``` bash\n$ npm install \n```\n出现三个报错。后来在网上找了解决方案。\n\n``` bash\n$ sudo npm install --no-optional\n```\n\n不报了错了。其实这个报错不影响什么，但每执行都跟着就是很烦,强迫症的人不能忍。\n（ps:之后升级了npm以后这个错误又出现了,所以如果你也是mac能sudo尽量sudo吧）\n问题解决继续下一步，\n``` bash\n$ hexo generate。\n```\n启动本地服务：\n``` bash\n$ hexo server\n```\n启动服务后可以预览。发现皮肤太丑。就去git上找了个主题。下载完按要求到cd themes/xxx 执行了↪git pull。 \n发现主题没更新!觉得是缓存就hexo clean 下。我以为跟fis一样关掉再重新监听一下就好了。结果又一次证明我to yuong to simple。本地彻底访问不了了。一气之下把终端关了再启动，提示我没有npm指令。奇怪的是node和依赖npm下的各种包webpage.gulp less都在。上网求解答有人出主意说把npm下的这些包都删了，重新装npm再把这些包一个个安上就好了。我打开npm的目录一看里面不下十个。\n够安一阵了。一想姐如果就为搭个hexo把电脑都重装了也真是够了。\n再一琢磨，好像npm是集成在node上的。抱着试试看的心里重新安了一下node，npm好了。但博客依然访问不了仍报错。\n\n就这个问题去找我们前端组的领袖@凯哥[凯歌博客](http://blog.css6.com)。他已经是hexo的老用户了,博客建的很好，经常去学习。\n哥看完对比了下他自己配置环境与我的不同，揣测我可能是node和npm版本太高了，建议我下个稳定版的。白天大家有工作缠身也不便多扰。\n大神给了建议就照着路子回去自己摸索吧。\n回座位在网上找了半天低版本无果。我心想既然如此。索性就把所有都升到最高。于是\n``` bash\nnpm upload npm -g\n```\n把npm等类都升到了最高。果然能跑起来了。然后我拷了模板（模板拷到themes目录在把就可以了，但是 git pull：相当于是从远程获取最新版本并merge到本地。git pull origin master相当于git fetch 和 git merge ） 和配置文件（配置文件不能拷贝覆盖？反正我只要逐行修改保存就可以，直接覆盖就崩溃，内容始终没找到差异，有知道的朋友欢迎指证）。\n我对着凯哥的配置文件一行行改。改一行启动服务一次查看，从头对到尾也没找出差异。\n继续下一步\n\n``` bash\nhexo new \"文章名\"\n```\n随便编了个内容部署到github:\n``` bash\nhexo deloy\n```\n\n报了一个错  hexo ERROR Deployer not found: github\n找了解决方案hexo3.0以上的版本:\n1.安装sudo npm install hexo-deployer-git --save\n2.将deploy 的 type由github改为git\n\n再次deloy成功部署到gibhub上。页面是404我的git用户名叫linjieFE。所以我的博客也得叫linjieaFE.github.io[我的博客地址](http://linjieaFE.github.io)。\n但是不能大写改成jinjiefe就好了。\n最后终于大功告成了。\n\n这里只是蜻蜓点水，如果想把博客建的更好更漂亮，\n一定要好好研读[hexo文档](http://wiki.jikexueyuan.com/project/hexo-document/)\n这里提供一些参考文档,也希望能对见到此文的人有所帮助都少踩坑:\n[Hexo 静态博客使用指南](http://www.jianshu.com/p/73779eacb494)\n[hexo常见问题解决方案](http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88)\n","source":"_posts/重新开博－hexo建站笔记.md","raw":"---\ntitle: 重新开博－hexo建站笔记\ndate: 2016-01-20 09:51:37\ncategories: 学习笔记\ntags:\n- hexo\n- 随笔\n---\n这两天重新搭了hexo博客.过程中一直不停的踩坑踩到脚软。一年前我搭过一个hexo博客。\n由于博客的域名前缀必须跟github账号名一至。介于以前的github用户名有点土，不符合我的个人风格，\n于是为了更土一点就重新注了个github账号。好了,开始入坑：\n<!-- more -->\n坑一：\n重新关联个帐呈本来不是什么难事，我以为本地仓库不用管，只要是把远程对接仓库的ssh和本地ssh对应上就好了。\n事实证明我to young to simple。\n本地的全局配置的用户名和邮箱没改，所以每次提交都说我的远程仓库没权限管理以前用户（yea..，土就不说全名了）。\n执行查看了一下全局配置：\n``` bash\n$ git config -l\n```\n 发现全局用户名和邮箱还是以前的，把这些依次改了，提交前会提示输入sshkey的密码。问题解决\n（其实这个问题上周五就解决过一次，当时不知道为啥好了。关机周一再启动又坏了。总之做之前先pull一下再说）以上是坑一。\n\n坑二:\nhexo搭建的时候我npm和hexo都全局安了。但hexo init后总报错.提示init完还要在npm install一下。\n我自作聪明的以为npm都全局安了就不用再install了。结果再次证明我to yuong to simple,\n老老实实按照提示安装（npm更新到最新版本以后不再提示再装）\n\n``` bash\n$ npm install \n```\n出现三个报错。后来在网上找了解决方案。\n\n``` bash\n$ sudo npm install --no-optional\n```\n\n不报了错了。其实这个报错不影响什么，但每执行都跟着就是很烦,强迫症的人不能忍。\n（ps:之后升级了npm以后这个错误又出现了,所以如果你也是mac能sudo尽量sudo吧）\n问题解决继续下一步，\n``` bash\n$ hexo generate。\n```\n启动本地服务：\n``` bash\n$ hexo server\n```\n启动服务后可以预览。发现皮肤太丑。就去git上找了个主题。下载完按要求到cd themes/xxx 执行了↪git pull。 \n发现主题没更新!觉得是缓存就hexo clean 下。我以为跟fis一样关掉再重新监听一下就好了。结果又一次证明我to yuong to simple。本地彻底访问不了了。一气之下把终端关了再启动，提示我没有npm指令。奇怪的是node和依赖npm下的各种包webpage.gulp less都在。上网求解答有人出主意说把npm下的这些包都删了，重新装npm再把这些包一个个安上就好了。我打开npm的目录一看里面不下十个。\n够安一阵了。一想姐如果就为搭个hexo把电脑都重装了也真是够了。\n再一琢磨，好像npm是集成在node上的。抱着试试看的心里重新安了一下node，npm好了。但博客依然访问不了仍报错。\n\n就这个问题去找我们前端组的领袖@凯哥[凯歌博客](http://blog.css6.com)。他已经是hexo的老用户了,博客建的很好，经常去学习。\n哥看完对比了下他自己配置环境与我的不同，揣测我可能是node和npm版本太高了，建议我下个稳定版的。白天大家有工作缠身也不便多扰。\n大神给了建议就照着路子回去自己摸索吧。\n回座位在网上找了半天低版本无果。我心想既然如此。索性就把所有都升到最高。于是\n``` bash\nnpm upload npm -g\n```\n把npm等类都升到了最高。果然能跑起来了。然后我拷了模板（模板拷到themes目录在把就可以了，但是 git pull：相当于是从远程获取最新版本并merge到本地。git pull origin master相当于git fetch 和 git merge ） 和配置文件（配置文件不能拷贝覆盖？反正我只要逐行修改保存就可以，直接覆盖就崩溃，内容始终没找到差异，有知道的朋友欢迎指证）。\n我对着凯哥的配置文件一行行改。改一行启动服务一次查看，从头对到尾也没找出差异。\n继续下一步\n\n``` bash\nhexo new \"文章名\"\n```\n随便编了个内容部署到github:\n``` bash\nhexo deloy\n```\n\n报了一个错  hexo ERROR Deployer not found: github\n找了解决方案hexo3.0以上的版本:\n1.安装sudo npm install hexo-deployer-git --save\n2.将deploy 的 type由github改为git\n\n再次deloy成功部署到gibhub上。页面是404我的git用户名叫linjieFE。所以我的博客也得叫linjieaFE.github.io[我的博客地址](http://linjieaFE.github.io)。\n但是不能大写改成jinjiefe就好了。\n最后终于大功告成了。\n\n这里只是蜻蜓点水，如果想把博客建的更好更漂亮，\n一定要好好研读[hexo文档](http://wiki.jikexueyuan.com/project/hexo-document/)\n这里提供一些参考文档,也希望能对见到此文的人有所帮助都少踩坑:\n[Hexo 静态博客使用指南](http://www.jianshu.com/p/73779eacb494)\n[hexo常见问题解决方案](http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88)\n","slug":"重新开博－hexo建站笔记","published":1,"updated":"2020-02-15T19:07:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr6eiskl000o3fwycr3a7pex","content":"<p>这两天重新搭了hexo博客.过程中一直不停的踩坑踩到脚软。一年前我搭过一个hexo博客。<br>由于博客的域名前缀必须跟github账号名一至。介于以前的github用户名有点土，不符合我的个人风格，<br>于是为了更土一点就重新注了个github账号。好了,开始入坑：<br><a id=\"more\"></a><br>坑一：<br>重新关联个帐呈本来不是什么难事，我以为本地仓库不用管，只要是把远程对接仓库的ssh和本地ssh对应上就好了。<br>事实证明我to young to simple。<br>本地的全局配置的用户名和邮箱没改，所以每次提交都说我的远程仓库没权限管理以前用户（yea..，土就不说全名了）。<br>执行查看了一下全局配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config -l</span><br></pre></td></tr></table></figure></p>\n<p> 发现全局用户名和邮箱还是以前的，把这些依次改了，提交前会提示输入sshkey的密码。问题解决<br>（其实这个问题上周五就解决过一次，当时不知道为啥好了。关机周一再启动又坏了。总之做之前先pull一下再说）以上是坑一。</p>\n<p>坑二:<br>hexo搭建的时候我npm和hexo都全局安了。但hexo init后总报错.提示init完还要在npm install一下。<br>我自作聪明的以为npm都全局安了就不用再install了。结果再次证明我to yuong to simple,<br>老老实实按照提示安装（npm更新到最新版本以后不再提示再装）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>出现三个报错。后来在网上找了解决方案。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install --no-optional</span><br></pre></td></tr></table></figure>\n<p>不报了错了。其实这个报错不影响什么，但每执行都跟着就是很烦,强迫症的人不能忍。<br>（ps:之后升级了npm以后这个错误又出现了,所以如果你也是mac能sudo尽量sudo吧）<br>问题解决继续下一步，<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate。</span><br></pre></td></tr></table></figure></p>\n<p>启动本地服务：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>启动服务后可以预览。发现皮肤太丑。就去git上找了个主题。下载完按要求到cd themes/xxx 执行了↪git pull。<br>发现主题没更新!觉得是缓存就hexo clean 下。我以为跟fis一样关掉再重新监听一下就好了。结果又一次证明我to yuong to simple。本地彻底访问不了了。一气之下把终端关了再启动，提示我没有npm指令。奇怪的是node和依赖npm下的各种包webpage.gulp less都在。上网求解答有人出主意说把npm下的这些包都删了，重新装npm再把这些包一个个安上就好了。我打开npm的目录一看里面不下十个。<br>够安一阵了。一想姐如果就为搭个hexo把电脑都重装了也真是够了。<br>再一琢磨，好像npm是集成在node上的。抱着试试看的心里重新安了一下node，npm好了。但博客依然访问不了仍报错。</p>\n<p>就这个问题去找我们前端组的领袖@凯哥<a href=\"http://blog.css6.com\" target=\"_blank\" rel=\"noopener\">凯歌博客</a>。他已经是hexo的老用户了,博客建的很好，经常去学习。<br>哥看完对比了下他自己配置环境与我的不同，揣测我可能是node和npm版本太高了，建议我下个稳定版的。白天大家有工作缠身也不便多扰。<br>大神给了建议就照着路子回去自己摸索吧。<br>回座位在网上找了半天低版本无果。我心想既然如此。索性就把所有都升到最高。于是<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm upload npm -g</span><br></pre></td></tr></table></figure></p>\n<p>把npm等类都升到了最高。果然能跑起来了。然后我拷了模板（模板拷到themes目录在把就可以了，但是 git pull：相当于是从远程获取最新版本并merge到本地。git pull origin master相当于git fetch 和 git merge ） 和配置文件（配置文件不能拷贝覆盖？反正我只要逐行修改保存就可以，直接覆盖就崩溃，内容始终没找到差异，有知道的朋友欢迎指证）。<br>我对着凯哥的配置文件一行行改。改一行启动服务一次查看，从头对到尾也没找出差异。<br>继续下一步</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"文章名\"</span></span><br></pre></td></tr></table></figure>\n<p>随便编了个内容部署到github:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deloy</span><br></pre></td></tr></table></figure></p>\n<p>报了一个错  hexo ERROR Deployer not found: github<br>找了解决方案hexo3.0以上的版本:<br>1.安装sudo npm install hexo-deployer-git –save<br>2.将deploy 的 type由github改为git</p>\n<p>再次deloy成功部署到gibhub上。页面是404我的git用户名叫linjieFE。所以我的博客也得叫linjieaFE.github.io<a href=\"http://linjieaFE.github.io\" target=\"_blank\" rel=\"noopener\">我的博客地址</a>。<br>但是不能大写改成jinjiefe就好了。<br>最后终于大功告成了。</p>\n<p>这里只是蜻蜓点水，如果想把博客建的更好更漂亮，<br>一定要好好研读<a href=\"http://wiki.jikexueyuan.com/project/hexo-document/\" target=\"_blank\" rel=\"noopener\">hexo文档</a><br>这里提供一些参考文档,也希望能对见到此文的人有所帮助都少踩坑:<br><a href=\"http://www.jianshu.com/p/73779eacb494\" target=\"_blank\" rel=\"noopener\">Hexo 静态博客使用指南</a><br><a href=\"http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" target=\"_blank\" rel=\"noopener\">hexo常见问题解决方案</a></p>\n","site":{"data":{}},"excerpt":"<p>这两天重新搭了hexo博客.过程中一直不停的踩坑踩到脚软。一年前我搭过一个hexo博客。<br>由于博客的域名前缀必须跟github账号名一至。介于以前的github用户名有点土，不符合我的个人风格，<br>于是为了更土一点就重新注了个github账号。好了,开始入坑：<br>","more":"<br>坑一：<br>重新关联个帐呈本来不是什么难事，我以为本地仓库不用管，只要是把远程对接仓库的ssh和本地ssh对应上就好了。<br>事实证明我to young to simple。<br>本地的全局配置的用户名和邮箱没改，所以每次提交都说我的远程仓库没权限管理以前用户（yea..，土就不说全名了）。<br>执行查看了一下全局配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config -l</span><br></pre></td></tr></table></figure></p>\n<p> 发现全局用户名和邮箱还是以前的，把这些依次改了，提交前会提示输入sshkey的密码。问题解决<br>（其实这个问题上周五就解决过一次，当时不知道为啥好了。关机周一再启动又坏了。总之做之前先pull一下再说）以上是坑一。</p>\n<p>坑二:<br>hexo搭建的时候我npm和hexo都全局安了。但hexo init后总报错.提示init完还要在npm install一下。<br>我自作聪明的以为npm都全局安了就不用再install了。结果再次证明我to yuong to simple,<br>老老实实按照提示安装（npm更新到最新版本以后不再提示再装）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>出现三个报错。后来在网上找了解决方案。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install --no-optional</span><br></pre></td></tr></table></figure>\n<p>不报了错了。其实这个报错不影响什么，但每执行都跟着就是很烦,强迫症的人不能忍。<br>（ps:之后升级了npm以后这个错误又出现了,所以如果你也是mac能sudo尽量sudo吧）<br>问题解决继续下一步，<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate。</span><br></pre></td></tr></table></figure></p>\n<p>启动本地服务：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>启动服务后可以预览。发现皮肤太丑。就去git上找了个主题。下载完按要求到cd themes/xxx 执行了↪git pull。<br>发现主题没更新!觉得是缓存就hexo clean 下。我以为跟fis一样关掉再重新监听一下就好了。结果又一次证明我to yuong to simple。本地彻底访问不了了。一气之下把终端关了再启动，提示我没有npm指令。奇怪的是node和依赖npm下的各种包webpage.gulp less都在。上网求解答有人出主意说把npm下的这些包都删了，重新装npm再把这些包一个个安上就好了。我打开npm的目录一看里面不下十个。<br>够安一阵了。一想姐如果就为搭个hexo把电脑都重装了也真是够了。<br>再一琢磨，好像npm是集成在node上的。抱着试试看的心里重新安了一下node，npm好了。但博客依然访问不了仍报错。</p>\n<p>就这个问题去找我们前端组的领袖@凯哥<a href=\"http://blog.css6.com\" target=\"_blank\" rel=\"noopener\">凯歌博客</a>。他已经是hexo的老用户了,博客建的很好，经常去学习。<br>哥看完对比了下他自己配置环境与我的不同，揣测我可能是node和npm版本太高了，建议我下个稳定版的。白天大家有工作缠身也不便多扰。<br>大神给了建议就照着路子回去自己摸索吧。<br>回座位在网上找了半天低版本无果。我心想既然如此。索性就把所有都升到最高。于是<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm upload npm -g</span><br></pre></td></tr></table></figure></p>\n<p>把npm等类都升到了最高。果然能跑起来了。然后我拷了模板（模板拷到themes目录在把就可以了，但是 git pull：相当于是从远程获取最新版本并merge到本地。git pull origin master相当于git fetch 和 git merge ） 和配置文件（配置文件不能拷贝覆盖？反正我只要逐行修改保存就可以，直接覆盖就崩溃，内容始终没找到差异，有知道的朋友欢迎指证）。<br>我对着凯哥的配置文件一行行改。改一行启动服务一次查看，从头对到尾也没找出差异。<br>继续下一步</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"文章名\"</span></span><br></pre></td></tr></table></figure>\n<p>随便编了个内容部署到github:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deloy</span><br></pre></td></tr></table></figure></p>\n<p>报了一个错  hexo ERROR Deployer not found: github<br>找了解决方案hexo3.0以上的版本:<br>1.安装sudo npm install hexo-deployer-git –save<br>2.将deploy 的 type由github改为git</p>\n<p>再次deloy成功部署到gibhub上。页面是404我的git用户名叫linjieFE。所以我的博客也得叫linjieaFE.github.io<a href=\"http://linjieaFE.github.io\" target=\"_blank\" rel=\"noopener\">我的博客地址</a>。<br>但是不能大写改成jinjiefe就好了。<br>最后终于大功告成了。</p>\n<p>这里只是蜻蜓点水，如果想把博客建的更好更漂亮，<br>一定要好好研读<a href=\"http://wiki.jikexueyuan.com/project/hexo-document/\" target=\"_blank\" rel=\"noopener\">hexo文档</a><br>这里提供一些参考文档,也希望能对见到此文的人有所帮助都少踩坑:<br><a href=\"http://www.jianshu.com/p/73779eacb494\" target=\"_blank\" rel=\"noopener\">Hexo 静态博客使用指南</a><br><a href=\"http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" target=\"_blank\" rel=\"noopener\">hexo常见问题解决方案</a></p>"},{"title":"土味正则表达式","date":"2021-07-16T05:12:22.000Z","_content":"\n很久没更新，本着生命不息，学习不止的态度，\n趁着大家顶着7月的烈日炎炎出去团建，而我在公司吹着免费空调、喝着吴老板请的星爸爸、摸着鱼……（好了不能再说了，否则要去财务领工资了）的时间打开沉封已久的博客，随便更新点东西\n今天不讲新技术，不说新轮子。扒一扒百家通用的基础 `正则`\n学习任何语言最好的线上教科书莫过于[官方文档](https://doc.houdunren.com/php/5%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F)，这里附上链接，大家自行翻阅\n\n## 土味介绍\n\n为什么说`正则`是百家通，如果你接触过某一门后端语言，无论那一种，都会用到正则表示式，前端也不例外， 你会发现它他们语法都差不多，正则就像一个小弟，需要依赖不同宿主的环境。只是不同的语法环境中使用不同的函数调用它就可以了。\n所以，你如果从一种语言环境切换到别一个种言环境中使用`正则`，你只需要学习这种语言调用`正则`的函数方法就可以了。\n\n## 正则的应用场景\n\n最多的应用场景 就是字符串的`增删改查`,可能这里有人会说，前端不是已经有很多处理一些字符串的方法了吗？说的没错，但`正则`的方式要更强悍些。这种感觉就好像过去的`老人机`与`智能机`的对比。\n话不闲扯，开始上干货……\n#### 举个🌰\n🌰1：从一堆字符串中全局找数字\n```js\nvar str ='linjie20210716';\n// 传统方式\nlet nums = [...str].filter(a=> !Number.isNaN(parsesInt(a))).join('')\n\n// 正则匹配 \nstr.match(/\\d/g).join('');\n```\n\n## 还有好多好多的 🌰\n\n#### 🌰1：字面量。比如：现在我们让正则在一堆字符串里找`小姐姐`\n\n```js\nvar str ='xiaojiejie20210716';\nconsole.log(/xiaojiejie/.test(str)) // => true\n\n// 这里 小姐姐 要是个字符串字面量，如果我们现在把 小姐姐 放在 变量里 返回的就是 false\nvar reg='xiaojiejie';\nconsole.log(/reg/.test(str)) // => false\n\n// 如果你一起想要用变量的形式 也有其它可以支持的方式，第一种就是 eval() ，🌰2：会绍第二种 \n\nconsole.log(eval(`/${reg}/`).test(str)) //=> true \n\n```\n\n####  🌰2：用对象创建正则表达式\n\n```js\n\nvar str ='xiaojiejie20210716xiaojiejie';\nlet reg = new RegExp('xiaojiejie','g') //g => 代指全局 \nreg.test(str)\n//这里的小姐姐也可以用变量代替 结果是一样的\nlet found = 'xiaojiejie'\nlet reg = new RegExp(found,'g')\n\n// 现在我们找出所有的小姐姐，进行替换\n\nstr.replace(reg, search => {\n    return '小姐姐';\n}) // => 小姐姐20210716小姐姐 \n\n```\n\n\n#### 选择符 `|` 类似于 js语法中的`或` `||`\n🌰3：这里判断一个电话号码是不是北京或上海的\n\n```js\nvar str ='010-12345678';\n/^(010|021)\\-\\d{7-8}$/.test(str) //=> 出现任意一种则返回 true \n//\n```\n\n***土味语义:`^`代指开始， `$`表示结束，是边界的限定， 010或021 为了简洁这里用`()` 学名`原子组`的东西括起来，`-`和`d`在正则有特殊意义故需要用`\\`转义，{7-8}属于`区间匹配` 代表数字7到8位`***\n\n有人说🙋‍♀️ ：那如果我们匹配很多数字的时候不是很麻烦，不是要`(1|2|3|4|5|6|7|8|9|0)`，\n\n这里就要提到正则的一个概念叫 `原子表` `[]` 代表一个可选范围\n\n[1234567890] 相当于 (1|2|3|4|5|6|7|8|9|0)\n \n继续简化 `-` 中线符 指定范围区间\n[0-9] 就相当于[0123456789]\n同样的区别匹配还有`[a-z][A-Z]`,要注意的是这里\b顺序不像`模式参数/gi`,\b它不可颠倒成`[z-a][9-0]`\n\n区分：\n```js\n'xiaojiejie'.match(/ie/g);//=>[\"ie\", \"ie\"]全量匹配ji为整体\n'xiaojiejie'.match(/[ie]/g);//=>[\"i\", \"i\", \"e\", \"i\", \"e\"]放在原子表里时,相当于j或i \n\n```\n即然提到`原子组`也顺带讲下`原子组`\n🌰如：我们现在匹配一日期 中间可以是\"-\"中线，也可以是\"/\"，前提条件是前后一至，若前一个用中线，后面必须也是中间。不可以是`2021-07/16`\n\n```js\nvar date = \"2021-07-16\"\nlet reg = /^\\d{4}([-\\/])\\d{2}\\1\\d{2}$/\nconsole.log(date.match(reg));//=>{true}\n```\n***土味语义: 关建节点在`([-\\/])`原子组 代表包含  了\"-“中线`或`”/“两种形式，由于其中/是特殊字面量，需用'\\'转义,\\1代表这里要求与第一个原子组的规则结果相同***\n\n🌰现在我们来实现一个需求：\n\n**将下面代码中的h1-h6 内容全部替换成空字符 **\n\n```js\n    var str='<div><h1>linjie.fe.com xiaojiejie</h1><h2>xiaojiejie2</h2><h3>xiaojiejie3</h3><H4></H4><h6>xiaojiejie666</h6></div>'\n    \n    var reg = /<(h[1-6])>[\\s\\S]*<\\/\\1>/gis;\n    \n    str.replace(reg,'')//=><div></div>;\n\n```\n\n***土味语义: 以 `<`开始 `(h[1-6])` 原子组中代只h1-h6 `[\\s\\S]*`表示空白加非空白所有字符 零个至多个字符 `<\\/\\1>` 代表 `</h1>-</h6>` `/\\1` 代表与第一个原子组规则相同 :***\n\n### 🌰4：特殊字面量的转义\n\n🌰4： 这里假设用正则匹配一个url地址\n\n```js\nvar url = 'https://linjieFE.github.io';\n\n/^(https:\\/\\/)?\\w+\\.\\w+\\.\\w+$/.test(url)\n```\n***土味语义:`^ $`开始结束边界的限定， `?`代码0或1次术语上又属于一种称为`禁止贪婪`的语法，`禁止贪婪`有趋向于最少数的性质，后面我会再次讲到。也可理解为`没有`或`有的时候只能有一个`(https://) `\\w`代表 字母大小写数字下划线 相当于 `[A-Za-z0-9_]`  `+` 学名也叫 `贪婪匹配`代表一个或多个字母大小写数字下划线 ***\n\n*注意*\n上面的字面量内容如果放在`正则表达式对象`里 情况则不同\n字面量`/^(https:\\/\\/)?\\w+\\.\\w+\\.\\w+$/`，单个反斜杠会自行转义\n\n但如果在 `new RegExp(\"(https:\\/\\/)?\\w+\\.\\w+\\.\\w+,'g')`中，于由第一个参数本身为数符串，正常使用则要改为`new RegExp(\"(https:\\\\/\\\\/)?\\\\w+\\\\.\\\\w+\\\\.\\\\w+\",'g')`\n\n### 🌰5： 字符边界的约束 `^$[]{}`\n这个前面已代过了 直接到🌰6\n\n### 🌰6： 数字空白元字符 `\\s`匹配空白包括 相当于 `[\\n\\f\\r\\t\\v]`\n\n\n```js\nvar url = '     小姐姐:021-1234556,  linjie:010-1234556 ';\n\nurl.match(/[-\\d:,]+/g);//=> :021-1234556,:010-1234556 全局匹配出一个或多个 中线、数字、冒号、逗号\nurl.match(/[^-\\d:,]+/g); // =>小姐姐linjie \n```\n\n`^` 在 [] `原子表`里面 代表取返`[^]`，术语称其为`排除匹配`, 这里要特别注意跟 `区间符`中的'开始'`^`区分开.\n\n***`排除匹配`土味语义: 全局匹配出一个或多个 `除` 中线、数字、冒号、逗号 的字符***\n\n- 另需注意\n    - 当原子组和原子表中使用特殊符号时没有换算关系，仅代表其中的字符本义，（所以转不转义也无妨）举例：\n```js\n'(xiaojiejie).+'.match(/[()]/g);//=>[\"(\", \")\"] 这里 “原子表\" 里包括了个“ 原子组” 实际上，原子表代表的只有字符串括号\n\n'(xiaojiejie).+'.match(/[.+]/g);//=>[\".\", \"+\"] \n\n```\n\n### 🌰7：在元字符里除了`^`,还有另一种特殊取反的方式 \n\nP如：\n\\d 代表数字 \\D 代表 除数字\n\\w 代表数字字母下划线 \\W 代表 除代表数字字母下划线\n相同的还有 \\s \\S 等等...\n`\\s`代三空格、换行、等同与[\\n\\r]\n\n如：我们匹配一个电话号码 \n```js\n'010 - 1234567'.match(/^\\d+\\s?\\-\\s?\\d{7,8}$/);\n```\n***土味语义: `\\d+` 贪婪匹配一个或多个数字 `\\s?``有一个`或`没有`空字符 ,`\\-`中线 最后`\\d{7-8}` 精准匹配7-8位数字 `$`结束***\n\n\n `.` 贪婪的点 代表除 `换行符`以外所有的字符\n\n### 🌰7 更加贪婪的全字符\n我们知道 哪怕最贪婪的`.`也排除了一个换行符\n\n如：我们想匹配一段代码标签内的所有内容\n可以用双向取反的方式 例如：`[\\s\\S] [\\w\\W] `\n```js\nvar str =`<span>\n    <b>xiaojiejie1</b>\n    <em>xiaojiejie2</em>\n</span>`;\n\nstr.match(/^<span>[\\d\\D]+<\\/span>$/);\n```\n### 🌰8 正则的修正符`i` `g` 's'\n\n修正符一般用在正则表达示的结尾\n如:我们匹配xiaoJiejie中的`j`\n```js\n'xiaoJiejie'.match(/j/gi);//=>Jj\n```\n***土味语义: `/gi` 这里结尾中的`i`带代不分大小写，`g`代表全局 否则这里只会匹配一个就会跳出，这里`/gi` 同样可以写成 `/ig`***\n*** `/s` 是忽略换行符 当文档出来换行符时，将其看作一行 ***\n\n### 🌰9 多行匹配\n\n业务要求:将str中包含在`#`号中的数据过滤为\n`[{name:'成都小姐姐',age:'18'}]`数组对象格式\n\n\n```js\n// step1\nvar str = `    #1 上海小姐姐,18  #\n#2 成都小姐姐,19  #\n#3 北京小姐姐,20  # xiaojiejie\n#4 杭州小姐姐,21  #\n`\n\nvar step1 = str.match(/^\\s*#\\d+\\s+.+\\s+#$/gms);//=> [\"#1 上海小姐姐,18  #\", \"#2 成都小姐姐,19  #\", \"#4 杭州小姐姐,21  #\"]\n\n//step2 替换掉 #号和井号后的数字\n\nstep2 = step1.map(v =>{\n    v=v.replace(/^\\s*#\\d+\\s*/,\"\").replace(/\\s#$/,\"\");//=>上海小姐姐,18  成都小姐姐,19  杭州小姐姐,21 \n\n    //step3 用逗号拆分 解构给'name','age'这个变量\n    console.log(v.split(',')) //=> ['上海小姐姐','18']  ['成都小姐姐','19']  ['杭州小姐姐','21' ]\n\n    //解构\n    const [name, age] = v.split(',');\n    return {name, age}\n})\n\n\n```\n\n***土味语义step1: `/gm` 这里结尾中的`m`代表每一行分别处理，`\\s*` 开始空白符`有`或`没有`都可，这里有有泛指 1 个到多个，`#`号 `\\d+`一个或多个数字，`\\s+` 一个或多个空白符 `.+`除换行符所有字符 `\\s+` 一个或多个空白符 `#`号结束***\n\n***土味语义step2: 先把开头部分替换，空白符 1 个到多个，`#`号 `\\d+`一个或多个数字，`\\s*`零个或多个空白符 替换为空字符串；再将结尾部分空折符到#号结属部分替换为空字符串***\n 后面的步骤不用多讲了，就是简单的解构 return对象\n\n### 🌰10 字符属性 汉字 和 宽字节\n\n在正则里字符串有自己的属性值prototype，比如`{L}`代表着字母属性\n\n```js\n'xjj1'.match(/\\p{L}/gu)//=>[\"x\", \"j\", \"j\"]\n\n// 匹配符号\n\n'xjj1.'.match(/\\p{P}/gu)//=>['.']\n\n\n// 匹配汉语\n\n'小姐姐xjj1.'.match(/\\p{sc=Han}/gu)//=>[\"小\", \"姐\", \"姐\"]\n\n```\n\n***土味语义: `\\p` 代码匹配属性是否为字母`{L}` ,`/gu` 全局 *这里注意*匹配属性必段要带`/u` ，带特别是用来试别`宽字节`时, 例如匹配一些罗码字符时***\n\n### 🌰10 lastindex\n### 🌰11 有效率的/y模式\n\n### 🌰12 `&'`和  `$&`\n$& 相于于字符串 自身\n\n```js\n\nvar str='xiaojiejie';\nstr.replace(/jiejie/g,\"$&\");//=>\"xiaojiejie\"\n```\n\n### 🌰13 断言匹配\n\n 敲码不易，请多多赞赏！","source":"_posts/关于正则.md","raw":"---\ntitle: 土味正则表达式\ndate: 2021-07-16 13:12:22\ntags:\n  - 学习笔记\ncategories: 学习笔记\n---\n\n很久没更新，本着生命不息，学习不止的态度，\n趁着大家顶着7月的烈日炎炎出去团建，而我在公司吹着免费空调、喝着吴老板请的星爸爸、摸着鱼……（好了不能再说了，否则要去财务领工资了）的时间打开沉封已久的博客，随便更新点东西\n今天不讲新技术，不说新轮子。扒一扒百家通用的基础 `正则`\n学习任何语言最好的线上教科书莫过于[官方文档](https://doc.houdunren.com/php/5%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F)，这里附上链接，大家自行翻阅\n\n## 土味介绍\n\n为什么说`正则`是百家通，如果你接触过某一门后端语言，无论那一种，都会用到正则表示式，前端也不例外， 你会发现它他们语法都差不多，正则就像一个小弟，需要依赖不同宿主的环境。只是不同的语法环境中使用不同的函数调用它就可以了。\n所以，你如果从一种语言环境切换到别一个种言环境中使用`正则`，你只需要学习这种语言调用`正则`的函数方法就可以了。\n\n## 正则的应用场景\n\n最多的应用场景 就是字符串的`增删改查`,可能这里有人会说，前端不是已经有很多处理一些字符串的方法了吗？说的没错，但`正则`的方式要更强悍些。这种感觉就好像过去的`老人机`与`智能机`的对比。\n话不闲扯，开始上干货……\n#### 举个🌰\n🌰1：从一堆字符串中全局找数字\n```js\nvar str ='linjie20210716';\n// 传统方式\nlet nums = [...str].filter(a=> !Number.isNaN(parsesInt(a))).join('')\n\n// 正则匹配 \nstr.match(/\\d/g).join('');\n```\n\n## 还有好多好多的 🌰\n\n#### 🌰1：字面量。比如：现在我们让正则在一堆字符串里找`小姐姐`\n\n```js\nvar str ='xiaojiejie20210716';\nconsole.log(/xiaojiejie/.test(str)) // => true\n\n// 这里 小姐姐 要是个字符串字面量，如果我们现在把 小姐姐 放在 变量里 返回的就是 false\nvar reg='xiaojiejie';\nconsole.log(/reg/.test(str)) // => false\n\n// 如果你一起想要用变量的形式 也有其它可以支持的方式，第一种就是 eval() ，🌰2：会绍第二种 \n\nconsole.log(eval(`/${reg}/`).test(str)) //=> true \n\n```\n\n####  🌰2：用对象创建正则表达式\n\n```js\n\nvar str ='xiaojiejie20210716xiaojiejie';\nlet reg = new RegExp('xiaojiejie','g') //g => 代指全局 \nreg.test(str)\n//这里的小姐姐也可以用变量代替 结果是一样的\nlet found = 'xiaojiejie'\nlet reg = new RegExp(found,'g')\n\n// 现在我们找出所有的小姐姐，进行替换\n\nstr.replace(reg, search => {\n    return '小姐姐';\n}) // => 小姐姐20210716小姐姐 \n\n```\n\n\n#### 选择符 `|` 类似于 js语法中的`或` `||`\n🌰3：这里判断一个电话号码是不是北京或上海的\n\n```js\nvar str ='010-12345678';\n/^(010|021)\\-\\d{7-8}$/.test(str) //=> 出现任意一种则返回 true \n//\n```\n\n***土味语义:`^`代指开始， `$`表示结束，是边界的限定， 010或021 为了简洁这里用`()` 学名`原子组`的东西括起来，`-`和`d`在正则有特殊意义故需要用`\\`转义，{7-8}属于`区间匹配` 代表数字7到8位`***\n\n有人说🙋‍♀️ ：那如果我们匹配很多数字的时候不是很麻烦，不是要`(1|2|3|4|5|6|7|8|9|0)`，\n\n这里就要提到正则的一个概念叫 `原子表` `[]` 代表一个可选范围\n\n[1234567890] 相当于 (1|2|3|4|5|6|7|8|9|0)\n \n继续简化 `-` 中线符 指定范围区间\n[0-9] 就相当于[0123456789]\n同样的区别匹配还有`[a-z][A-Z]`,要注意的是这里\b顺序不像`模式参数/gi`,\b它不可颠倒成`[z-a][9-0]`\n\n区分：\n```js\n'xiaojiejie'.match(/ie/g);//=>[\"ie\", \"ie\"]全量匹配ji为整体\n'xiaojiejie'.match(/[ie]/g);//=>[\"i\", \"i\", \"e\", \"i\", \"e\"]放在原子表里时,相当于j或i \n\n```\n即然提到`原子组`也顺带讲下`原子组`\n🌰如：我们现在匹配一日期 中间可以是\"-\"中线，也可以是\"/\"，前提条件是前后一至，若前一个用中线，后面必须也是中间。不可以是`2021-07/16`\n\n```js\nvar date = \"2021-07-16\"\nlet reg = /^\\d{4}([-\\/])\\d{2}\\1\\d{2}$/\nconsole.log(date.match(reg));//=>{true}\n```\n***土味语义: 关建节点在`([-\\/])`原子组 代表包含  了\"-“中线`或`”/“两种形式，由于其中/是特殊字面量，需用'\\'转义,\\1代表这里要求与第一个原子组的规则结果相同***\n\n🌰现在我们来实现一个需求：\n\n**将下面代码中的h1-h6 内容全部替换成空字符 **\n\n```js\n    var str='<div><h1>linjie.fe.com xiaojiejie</h1><h2>xiaojiejie2</h2><h3>xiaojiejie3</h3><H4></H4><h6>xiaojiejie666</h6></div>'\n    \n    var reg = /<(h[1-6])>[\\s\\S]*<\\/\\1>/gis;\n    \n    str.replace(reg,'')//=><div></div>;\n\n```\n\n***土味语义: 以 `<`开始 `(h[1-6])` 原子组中代只h1-h6 `[\\s\\S]*`表示空白加非空白所有字符 零个至多个字符 `<\\/\\1>` 代表 `</h1>-</h6>` `/\\1` 代表与第一个原子组规则相同 :***\n\n### 🌰4：特殊字面量的转义\n\n🌰4： 这里假设用正则匹配一个url地址\n\n```js\nvar url = 'https://linjieFE.github.io';\n\n/^(https:\\/\\/)?\\w+\\.\\w+\\.\\w+$/.test(url)\n```\n***土味语义:`^ $`开始结束边界的限定， `?`代码0或1次术语上又属于一种称为`禁止贪婪`的语法，`禁止贪婪`有趋向于最少数的性质，后面我会再次讲到。也可理解为`没有`或`有的时候只能有一个`(https://) `\\w`代表 字母大小写数字下划线 相当于 `[A-Za-z0-9_]`  `+` 学名也叫 `贪婪匹配`代表一个或多个字母大小写数字下划线 ***\n\n*注意*\n上面的字面量内容如果放在`正则表达式对象`里 情况则不同\n字面量`/^(https:\\/\\/)?\\w+\\.\\w+\\.\\w+$/`，单个反斜杠会自行转义\n\n但如果在 `new RegExp(\"(https:\\/\\/)?\\w+\\.\\w+\\.\\w+,'g')`中，于由第一个参数本身为数符串，正常使用则要改为`new RegExp(\"(https:\\\\/\\\\/)?\\\\w+\\\\.\\\\w+\\\\.\\\\w+\",'g')`\n\n### 🌰5： 字符边界的约束 `^$[]{}`\n这个前面已代过了 直接到🌰6\n\n### 🌰6： 数字空白元字符 `\\s`匹配空白包括 相当于 `[\\n\\f\\r\\t\\v]`\n\n\n```js\nvar url = '     小姐姐:021-1234556,  linjie:010-1234556 ';\n\nurl.match(/[-\\d:,]+/g);//=> :021-1234556,:010-1234556 全局匹配出一个或多个 中线、数字、冒号、逗号\nurl.match(/[^-\\d:,]+/g); // =>小姐姐linjie \n```\n\n`^` 在 [] `原子表`里面 代表取返`[^]`，术语称其为`排除匹配`, 这里要特别注意跟 `区间符`中的'开始'`^`区分开.\n\n***`排除匹配`土味语义: 全局匹配出一个或多个 `除` 中线、数字、冒号、逗号 的字符***\n\n- 另需注意\n    - 当原子组和原子表中使用特殊符号时没有换算关系，仅代表其中的字符本义，（所以转不转义也无妨）举例：\n```js\n'(xiaojiejie).+'.match(/[()]/g);//=>[\"(\", \")\"] 这里 “原子表\" 里包括了个“ 原子组” 实际上，原子表代表的只有字符串括号\n\n'(xiaojiejie).+'.match(/[.+]/g);//=>[\".\", \"+\"] \n\n```\n\n### 🌰7：在元字符里除了`^`,还有另一种特殊取反的方式 \n\nP如：\n\\d 代表数字 \\D 代表 除数字\n\\w 代表数字字母下划线 \\W 代表 除代表数字字母下划线\n相同的还有 \\s \\S 等等...\n`\\s`代三空格、换行、等同与[\\n\\r]\n\n如：我们匹配一个电话号码 \n```js\n'010 - 1234567'.match(/^\\d+\\s?\\-\\s?\\d{7,8}$/);\n```\n***土味语义: `\\d+` 贪婪匹配一个或多个数字 `\\s?``有一个`或`没有`空字符 ,`\\-`中线 最后`\\d{7-8}` 精准匹配7-8位数字 `$`结束***\n\n\n `.` 贪婪的点 代表除 `换行符`以外所有的字符\n\n### 🌰7 更加贪婪的全字符\n我们知道 哪怕最贪婪的`.`也排除了一个换行符\n\n如：我们想匹配一段代码标签内的所有内容\n可以用双向取反的方式 例如：`[\\s\\S] [\\w\\W] `\n```js\nvar str =`<span>\n    <b>xiaojiejie1</b>\n    <em>xiaojiejie2</em>\n</span>`;\n\nstr.match(/^<span>[\\d\\D]+<\\/span>$/);\n```\n### 🌰8 正则的修正符`i` `g` 's'\n\n修正符一般用在正则表达示的结尾\n如:我们匹配xiaoJiejie中的`j`\n```js\n'xiaoJiejie'.match(/j/gi);//=>Jj\n```\n***土味语义: `/gi` 这里结尾中的`i`带代不分大小写，`g`代表全局 否则这里只会匹配一个就会跳出，这里`/gi` 同样可以写成 `/ig`***\n*** `/s` 是忽略换行符 当文档出来换行符时，将其看作一行 ***\n\n### 🌰9 多行匹配\n\n业务要求:将str中包含在`#`号中的数据过滤为\n`[{name:'成都小姐姐',age:'18'}]`数组对象格式\n\n\n```js\n// step1\nvar str = `    #1 上海小姐姐,18  #\n#2 成都小姐姐,19  #\n#3 北京小姐姐,20  # xiaojiejie\n#4 杭州小姐姐,21  #\n`\n\nvar step1 = str.match(/^\\s*#\\d+\\s+.+\\s+#$/gms);//=> [\"#1 上海小姐姐,18  #\", \"#2 成都小姐姐,19  #\", \"#4 杭州小姐姐,21  #\"]\n\n//step2 替换掉 #号和井号后的数字\n\nstep2 = step1.map(v =>{\n    v=v.replace(/^\\s*#\\d+\\s*/,\"\").replace(/\\s#$/,\"\");//=>上海小姐姐,18  成都小姐姐,19  杭州小姐姐,21 \n\n    //step3 用逗号拆分 解构给'name','age'这个变量\n    console.log(v.split(',')) //=> ['上海小姐姐','18']  ['成都小姐姐','19']  ['杭州小姐姐','21' ]\n\n    //解构\n    const [name, age] = v.split(',');\n    return {name, age}\n})\n\n\n```\n\n***土味语义step1: `/gm` 这里结尾中的`m`代表每一行分别处理，`\\s*` 开始空白符`有`或`没有`都可，这里有有泛指 1 个到多个，`#`号 `\\d+`一个或多个数字，`\\s+` 一个或多个空白符 `.+`除换行符所有字符 `\\s+` 一个或多个空白符 `#`号结束***\n\n***土味语义step2: 先把开头部分替换，空白符 1 个到多个，`#`号 `\\d+`一个或多个数字，`\\s*`零个或多个空白符 替换为空字符串；再将结尾部分空折符到#号结属部分替换为空字符串***\n 后面的步骤不用多讲了，就是简单的解构 return对象\n\n### 🌰10 字符属性 汉字 和 宽字节\n\n在正则里字符串有自己的属性值prototype，比如`{L}`代表着字母属性\n\n```js\n'xjj1'.match(/\\p{L}/gu)//=>[\"x\", \"j\", \"j\"]\n\n// 匹配符号\n\n'xjj1.'.match(/\\p{P}/gu)//=>['.']\n\n\n// 匹配汉语\n\n'小姐姐xjj1.'.match(/\\p{sc=Han}/gu)//=>[\"小\", \"姐\", \"姐\"]\n\n```\n\n***土味语义: `\\p` 代码匹配属性是否为字母`{L}` ,`/gu` 全局 *这里注意*匹配属性必段要带`/u` ，带特别是用来试别`宽字节`时, 例如匹配一些罗码字符时***\n\n### 🌰10 lastindex\n### 🌰11 有效率的/y模式\n\n### 🌰12 `&'`和  `$&`\n$& 相于于字符串 自身\n\n```js\n\nvar str='xiaojiejie';\nstr.replace(/jiejie/g,\"$&\");//=>\"xiaojiejie\"\n```\n\n### 🌰13 断言匹配\n\n 敲码不易，请多多赞赏！","slug":"关于正则","published":1,"updated":"2021-07-16T13:48:09.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr6eiskm000t3fwy13qo38v6","content":"<p>很久没更新，本着生命不息，学习不止的态度，<br>趁着大家顶着7月的烈日炎炎出去团建，而我在公司吹着免费空调、喝着吴老板请的星爸爸、摸着鱼……（好了不能再说了，否则要去财务领工资了）的时间打开沉封已久的博客，随便更新点东西<br>今天不讲新技术，不说新轮子。扒一扒百家通用的基础 <code>正则</code><br>学习任何语言最好的线上教科书莫过于<a href=\"https://doc.houdunren.com/php/5%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">官方文档</a>，这里附上链接，大家自行翻阅</p>\n<h2 id=\"土味介绍\"><a href=\"#土味介绍\" class=\"headerlink\" title=\"土味介绍\"></a>土味介绍</h2><p>为什么说<code>正则</code>是百家通，如果你接触过某一门后端语言，无论那一种，都会用到正则表示式，前端也不例外， 你会发现它他们语法都差不多，正则就像一个小弟，需要依赖不同宿主的环境。只是不同的语法环境中使用不同的函数调用它就可以了。<br>所以，你如果从一种语言环境切换到别一个种言环境中使用<code>正则</code>，你只需要学习这种语言调用<code>正则</code>的函数方法就可以了。</p>\n<h2 id=\"正则的应用场景\"><a href=\"#正则的应用场景\" class=\"headerlink\" title=\"正则的应用场景\"></a>正则的应用场景</h2><p>最多的应用场景 就是字符串的<code>增删改查</code>,可能这里有人会说，前端不是已经有很多处理一些字符串的方法了吗？说的没错，但<code>正则</code>的方式要更强悍些。这种感觉就好像过去的<code>老人机</code>与<code>智能机</code>的对比。<br>话不闲扯，开始上干货……</p>\n<h4 id=\"举个🌰\"><a href=\"#举个🌰\" class=\"headerlink\" title=\"举个🌰\"></a>举个🌰</h4><p>🌰1：从一堆字符串中全局找数字<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str =<span class=\"string\">'linjie20210716'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 传统方式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nums = [...str].filter(<span class=\"function\"><span class=\"params\">a</span>=&gt;</span> !<span class=\"built_in\">Number</span>.isNaN(parsesInt(a))).join(<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正则匹配 </span></span><br><span class=\"line\">str.match(<span class=\"regexp\">/\\d/g</span>).join(<span class=\"string\">''</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"还有好多好多的-🌰\"><a href=\"#还有好多好多的-🌰\" class=\"headerlink\" title=\"还有好多好多的 🌰\"></a>还有好多好多的 🌰</h2><h4 id=\"🌰1：字面量。比如：现在我们让正则在一堆字符串里找小姐姐\"><a href=\"#🌰1：字面量。比如：现在我们让正则在一堆字符串里找小姐姐\" class=\"headerlink\" title=\"🌰1：字面量。比如：现在我们让正则在一堆字符串里找小姐姐\"></a>🌰1：字面量。比如：现在我们让正则在一堆字符串里找<code>小姐姐</code></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str =<span class=\"string\">'xiaojiejie20210716'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/xiaojiejie/</span>.test(str)) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里 小姐姐 要是个字符串字面量，如果我们现在把 小姐姐 放在 变量里 返回的就是 false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg=<span class=\"string\">'xiaojiejie'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/reg/</span>.test(str)) <span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你一起想要用变量的形式 也有其它可以支持的方式，第一种就是 eval() ，🌰2：会绍第二种 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">eval</span>(<span class=\"string\">`/<span class=\"subst\">$&#123;reg&#125;</span>/`</span>).test(str)) <span class=\"comment\">//=&gt; true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"🌰2：用对象创建正则表达式\"><a href=\"#🌰2：用对象创建正则表达式\" class=\"headerlink\" title=\"🌰2：用对象创建正则表达式\"></a>🌰2：用对象创建正则表达式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str =<span class=\"string\">'xiaojiejie20210716xiaojiejie'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'xiaojiejie'</span>,<span class=\"string\">'g'</span>) <span class=\"comment\">//g =&gt; 代指全局 </span></span><br><span class=\"line\">reg.test(str)</span><br><span class=\"line\"><span class=\"comment\">//这里的小姐姐也可以用变量代替 结果是一样的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> found = <span class=\"string\">'xiaojiejie'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(found,<span class=\"string\">'g'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在我们找出所有的小姐姐，进行替换</span></span><br><span class=\"line\"></span><br><span class=\"line\">str.replace(reg, search =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'小姐姐'</span>;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// =&gt; 小姐姐20210716小姐姐</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"选择符-类似于-js语法中的或\"><a href=\"#选择符-类似于-js语法中的或\" class=\"headerlink\" title=\"选择符 | 类似于 js语法中的或 ||\"></a>选择符 <code>|</code> 类似于 js语法中的<code>或</code> <code>||</code></h4><p>🌰3：这里判断一个电话号码是不是北京或上海的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str =<span class=\"string\">'010-12345678'</span>;</span><br><span class=\"line\">/^(<span class=\"number\">010</span>|<span class=\"number\">021</span>)\\-\\d&#123;<span class=\"number\">7</span><span class=\"number\">-8</span>&#125;$/.test(str) <span class=\"comment\">//=&gt; 出现任意一种则返回 true </span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>土味语义:<code>^</code>代指开始， <code>$</code>表示结束，是边界的限定， 010或021 为了简洁这里用<code>()</code> 学名<code>原子组</code>的东西括起来，<code>-</code>和<code>d</code>在正则有特殊意义故需要用<code>\\</code>转义，{7-8}属于<code>区间匹配</code> 代表数字7到8位`</em></strong></p>\n<p>有人说🙋‍♀️ ：那如果我们匹配很多数字的时候不是很麻烦，不是要<code>(1|2|3|4|5|6|7|8|9|0)</code>，</p>\n<p>这里就要提到正则的一个概念叫 <code>原子表</code> <code>[]</code> 代表一个可选范围</p>\n<p>[1234567890] 相当于 (1|2|3|4|5|6|7|8|9|0)</p>\n<p>继续简化 <code>-</code> 中线符 指定范围区间<br>[0-9] 就相当于[0123456789]<br>同样的区别匹配还有<code>[a-z][A-Z]</code>,要注意的是这里\b顺序不像<code>模式参数/gi</code>,\b它不可颠倒成<code>[z-a][9-0]</code></p>\n<p>区分：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'xiaojiejie'</span>.match(<span class=\"regexp\">/ie/g</span>);<span class=\"comment\">//=&gt;[\"ie\", \"ie\"]全量匹配ji为整体</span></span><br><span class=\"line\"><span class=\"string\">'xiaojiejie'</span>.match(<span class=\"regexp\">/[ie]/g</span>);<span class=\"comment\">//=&gt;[\"i\", \"i\", \"e\", \"i\", \"e\"]放在原子表里时,相当于j或i</span></span><br></pre></td></tr></table></figure></p>\n<p>即然提到<code>原子组</code>也顺带讲下<code>原子组</code><br>🌰如：我们现在匹配一日期 中间可以是”-“中线，也可以是”/“，前提条件是前后一至，若前一个用中线，后面必须也是中间。不可以是<code>2021-07/16</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"string\">\"2021-07-16\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^\\d&#123;4&#125;([-\\/])\\d&#123;2&#125;\\1\\d&#123;2&#125;$/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.match(reg));<span class=\"comment\">//=&gt;&#123;true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>土味语义: 关建节点在<code>([-\\/])</code>原子组 代表包含  了”-“中线<code>或</code>”/“两种形式，由于其中/是特殊字面量，需用’\\’转义,\\1代表这里要求与第一个原子组的规则结果相同</em></strong></p>\n<p>🌰现在我们来实现一个需求：</p>\n<p><strong>将下面代码中的h1-h6 内容全部替换成空字符 </strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">'&lt;div&gt;&lt;h1&gt;linjie.fe.com xiaojiejie&lt;/h1&gt;&lt;h2&gt;xiaojiejie2&lt;/h2&gt;&lt;h3&gt;xiaojiejie3&lt;/h3&gt;&lt;H4&gt;&lt;/H4&gt;&lt;h6&gt;xiaojiejie666&lt;/h6&gt;&lt;/div&gt;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/&lt;(h[1-6])&gt;[\\s\\S]*&lt;\\/\\1&gt;/gi</span>s;</span><br><span class=\"line\"></span><br><span class=\"line\">str.replace(reg,<span class=\"string\">''</span>)<span class=\"comment\">//=&gt;&lt;div&gt;&lt;/div&gt;;</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>土味语义: 以 <code>&lt;</code>开始 <code>(h[1-6])</code> 原子组中代只h1-h6 `[\\s\\S]</em><code>表示空白加非空白所有字符 零个至多个字符</code>&lt;\\/\\1&gt;<code>代表</code>-<code></code>/\\1` 代表与第一个原子组规则相同 :*</strong></p>\n<h3 id=\"🌰4：特殊字面量的转义\"><a href=\"#🌰4：特殊字面量的转义\" class=\"headerlink\" title=\"🌰4：特殊字面量的转义\"></a>🌰4：特殊字面量的转义</h3><p>🌰4： 这里假设用正则匹配一个url地址</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'https://linjieFE.github.io'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">/^(https:\\/\\/)?\\w+\\.\\w+\\.\\w+$/.test(url)</span><br></pre></td></tr></table></figure>\n<p><strong><em>土味语义:<code>^ $</code>开始结束边界的限定， <code>?</code>代码0或1次术语上又属于一种称为<code>禁止贪婪</code>的语法，<code>禁止贪婪</code>有趋向于最少数的性质，后面我会再次讲到。也可理解为<code>没有</code>或<code>有的时候只能有一个</code>(https://) <code>\\w</code>代表 字母大小写数字下划线 相当于 <code>[A-Za-z0-9_]</code>  <code>+</code> 学名也叫 <code>贪婪匹配</code>代表一个或多个字母大小写数字下划线 </em></strong></p>\n<p><em>注意</em><br>上面的字面量内容如果放在<code>正则表达式对象</code>里 情况则不同<br>字面量<code>/^(https:\\/\\/)?\\w+\\.\\w+\\.\\w+$/</code>，单个反斜杠会自行转义</p>\n<p>但如果在 <code>new RegExp(&quot;(https:\\/\\/)?\\w+\\.\\w+\\.\\w+,&#39;g&#39;)</code>中，于由第一个参数本身为数符串，正常使用则要改为<code>new RegExp(&quot;(https:\\\\/\\\\/)?\\\\w+\\\\.\\\\w+\\\\.\\\\w+&quot;,&#39;g&#39;)</code></p>\n<h3 id=\"🌰5：-字符边界的约束\"><a href=\"#🌰5：-字符边界的约束\" class=\"headerlink\" title=\"🌰5： 字符边界的约束 ^$[]{}\"></a>🌰5： 字符边界的约束 <code>^$[]{}</code></h3><p>这个前面已代过了 直接到🌰6</p>\n<h3 id=\"🌰6：-数字空白元字符-s匹配空白包括-相当于-n-f-r-t-v\"><a href=\"#🌰6：-数字空白元字符-s匹配空白包括-相当于-n-f-r-t-v\" class=\"headerlink\" title=\"🌰6： 数字空白元字符 \\s匹配空白包括 相当于 [\\n\\f\\r\\t\\v]\"></a>🌰6： 数字空白元字符 <code>\\s</code>匹配空白包括 相当于 <code>[\\n\\f\\r\\t\\v]</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'     小姐姐:021-1234556,  linjie:010-1234556 '</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">url.match(<span class=\"regexp\">/[-\\d:,]+/g</span>);<span class=\"comment\">//=&gt; :021-1234556,:010-1234556 全局匹配出一个或多个 中线、数字、冒号、逗号</span></span><br><span class=\"line\">url.match(<span class=\"regexp\">/[^-\\d:,]+/g</span>); <span class=\"comment\">// =&gt;小姐姐linjie</span></span><br></pre></td></tr></table></figure>\n<p><code>^</code> 在 [] <code>原子表</code>里面 代表取返<code>[^]</code>，术语称其为<code>排除匹配</code>, 这里要特别注意跟 <code>区间符</code>中的’开始’<code>^</code>区分开.</p>\n<p><strong><em><code>排除匹配</code>土味语义: 全局匹配出一个或多个 <code>除</code> 中线、数字、冒号、逗号 的字符</em></strong></p>\n<ul>\n<li>另需注意<ul>\n<li>当原子组和原子表中使用特殊符号时没有换算关系，仅代表其中的字符本义，（所以转不转义也无妨）举例：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'(xiaojiejie).+'</span>.match(<span class=\"regexp\">/[()]/g</span>);<span class=\"comment\">//=&gt;[\"(\", \")\"] 这里 “原子表\" 里包括了个“ 原子组” 实际上，原子表代表的只有字符串括号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'(xiaojiejie).+'</span>.match(<span class=\"regexp\">/[.+]/g</span>);<span class=\"comment\">//=&gt;[\".\", \"+\"]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"🌰7：在元字符里除了-还有另一种特殊取反的方式\"><a href=\"#🌰7：在元字符里除了-还有另一种特殊取反的方式\" class=\"headerlink\" title=\"🌰7：在元字符里除了^,还有另一种特殊取反的方式\"></a>🌰7：在元字符里除了<code>^</code>,还有另一种特殊取反的方式</h3><p>P如：<br>\\d 代表数字 \\D 代表 除数字<br>\\w 代表数字字母下划线 \\W 代表 除代表数字字母下划线<br>相同的还有 \\s \\S 等等…<br><code>\\s</code>代三空格、换行、等同与[\\n\\r]</p>\n<p>如：我们匹配一个电话号码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'010 - 1234567'</span>.match(<span class=\"regexp\">/^\\d+\\s?\\-\\s?\\d&#123;7,8&#125;$/</span>);</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>土味语义: <code>\\d+</code> 贪婪匹配一个或多个数字 <code>\\s?`</code>有一个<code>或</code>没有<code>空字符 ,</code>-<code>中线 最后</code>\\d{7-8}<code>精准匹配7-8位数字</code>$`结束</em></strong></p>\n<p> <code>.</code> 贪婪的点 代表除 <code>换行符</code>以外所有的字符</p>\n<h3 id=\"🌰7-更加贪婪的全字符\"><a href=\"#🌰7-更加贪婪的全字符\" class=\"headerlink\" title=\"🌰7 更加贪婪的全字符\"></a>🌰7 更加贪婪的全字符</h3><p>我们知道 哪怕最贪婪的<code>.</code>也排除了一个换行符</p>\n<p>如：我们想匹配一段代码标签内的所有内容<br>可以用双向取反的方式 例如：<code>[\\s\\S] [\\w\\W]</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str =<span class=\"string\">`&lt;span&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;b&gt;xiaojiejie1&lt;/b&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;em&gt;xiaojiejie2&lt;/em&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/span&gt;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str.match(<span class=\"regexp\">/^&lt;span&gt;[\\d\\D]+&lt;\\/span&gt;$/</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"🌰8-正则的修正符i-g-‘s’\"><a href=\"#🌰8-正则的修正符i-g-‘s’\" class=\"headerlink\" title=\"🌰8 正则的修正符i g ‘s’\"></a>🌰8 正则的修正符<code>i</code> <code>g</code> ‘s’</h3><p>修正符一般用在正则表达示的结尾<br>如:我们匹配xiaoJiejie中的<code>j</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'xiaoJiejie'</span>.match(<span class=\"regexp\">/j/gi</span>);<span class=\"comment\">//=&gt;Jj</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em>土味语义: <code>/gi</code> 这里结尾中的<code>i</code>带代不分大小写，<code>g</code>代表全局 否则这里只会匹配一个就会跳出，这里<code>/gi</code> 同样可以写成 <code>/ig</code></em></strong><br><strong><em> <code>/s</code> 是忽略换行符 当文档出来换行符时，将其看作一行 </em></strong></p>\n<h3 id=\"🌰9-多行匹配\"><a href=\"#🌰9-多行匹配\" class=\"headerlink\" title=\"🌰9 多行匹配\"></a>🌰9 多行匹配</h3><p>业务要求:将str中包含在<code>#</code>号中的数据过滤为<br><code>[{name:&#39;成都小姐姐&#39;,age:&#39;18&#39;}]</code>数组对象格式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// step1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">`    #1 上海小姐姐,18  #</span></span><br><span class=\"line\"><span class=\"string\">#2 成都小姐姐,19  #</span></span><br><span class=\"line\"><span class=\"string\">#3 北京小姐姐,20  # xiaojiejie</span></span><br><span class=\"line\"><span class=\"string\">#4 杭州小姐姐,21  #</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> step1 = str.match(<span class=\"regexp\">/^\\s*#\\d+\\s+.+\\s+#$/gm</span>s);<span class=\"comment\">//=&gt; [\"#1 上海小姐姐,18  #\", \"#2 成都小姐姐,19  #\", \"#4 杭州小姐姐,21  #\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//step2 替换掉 #号和井号后的数字</span></span><br><span class=\"line\"></span><br><span class=\"line\">step2 = step1.map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span>&#123;</span><br><span class=\"line\">    v=v.replace(<span class=\"regexp\">/^\\s*#\\d+\\s*/</span>,<span class=\"string\">\"\"</span>).replace(<span class=\"regexp\">/\\s#$/</span>,<span class=\"string\">\"\"</span>);<span class=\"comment\">//=&gt;上海小姐姐,18  成都小姐姐,19  杭州小姐姐,21 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//step3 用逗号拆分 解构给'name','age'这个变量</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v.split(<span class=\"string\">','</span>)) <span class=\"comment\">//=&gt; ['上海小姐姐','18']  ['成都小姐姐','19']  ['杭州小姐姐','21' ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//解构</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [name, age] = v.split(<span class=\"string\">','</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;name, age&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong><em>土味语义step1: <code>/gm</code> 这里结尾中的<code>m</code>代表每一行分别处理，`\\s</em><code>开始空白符</code>有<code>或</code>没有<code>都可，这里有有泛指 1 个到多个，</code>#<code>号</code>\\d+<code>一个或多个数字，</code>\\s+<code>一个或多个空白符</code>.+<code>除换行符所有字符</code>\\s+<code>一个或多个空白符</code>#`号结束*</strong></p>\n<p><strong><em>土味语义step2: 先把开头部分替换，空白符 1 个到多个，<code>#</code>号 <code>\\d+</code>一个或多个数字，`\\s</em>`零个或多个空白符 替换为空字符串；再将结尾部分空折符到#号结属部分替换为空字符串*</strong><br> 后面的步骤不用多讲了，就是简单的解构 return对象</p>\n<h3 id=\"🌰10-字符属性-汉字-和-宽字节\"><a href=\"#🌰10-字符属性-汉字-和-宽字节\" class=\"headerlink\" title=\"🌰10 字符属性 汉字 和 宽字节\"></a>🌰10 字符属性 汉字 和 宽字节</h3><p>在正则里字符串有自己的属性值prototype，比如<code>{L}</code>代表着字母属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'xjj1'</span>.match(<span class=\"regexp\">/\\p&#123;L&#125;/gu</span>)<span class=\"comment\">//=&gt;[\"x\", \"j\", \"j\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配符号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'xjj1.'</span>.match(<span class=\"regexp\">/\\p&#123;P&#125;/gu</span>)<span class=\"comment\">//=&gt;['.']</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配汉语</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'小姐姐xjj1.'</span>.match(<span class=\"regexp\">/\\p&#123;sc=Han&#125;/gu</span>)<span class=\"comment\">//=&gt;[\"小\", \"姐\", \"姐\"]</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>土味语义: <code>\\p</code> 代码匹配属性是否为字母<code>{L}</code> ,<code>/gu</code> 全局 </em>这里注意<em>匹配属性必段要带<code>/u</code> ，带特别是用来试别<code>宽字节</code>时, 例如匹配一些罗码字符时</em></strong></p>\n<h3 id=\"🌰10-lastindex\"><a href=\"#🌰10-lastindex\" class=\"headerlink\" title=\"🌰10 lastindex\"></a>🌰10 lastindex</h3><h3 id=\"🌰11-有效率的-y模式\"><a href=\"#🌰11-有效率的-y模式\" class=\"headerlink\" title=\"🌰11 有效率的/y模式\"></a>🌰11 有效率的/y模式</h3><h3 id=\"🌰12-amp-39-和-amp\"><a href=\"#🌰12-amp-39-和-amp\" class=\"headerlink\" title=\"🌰12 &amp;&#39;和  $&amp;\"></a>🌰12 <code>&amp;&#39;</code>和  <code>$&amp;</code></h3><p>$&amp; 相于于字符串 自身</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">'xiaojiejie'</span>;</span><br><span class=\"line\">str.replace(<span class=\"regexp\">/jiejie/g</span>,<span class=\"string\">\"$&amp;\"</span>);<span class=\"comment\">//=&gt;\"xiaojiejie\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"🌰13-断言匹配\"><a href=\"#🌰13-断言匹配\" class=\"headerlink\" title=\"🌰13 断言匹配\"></a>🌰13 断言匹配</h3><p> 敲码不易，请多多赞赏！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>很久没更新，本着生命不息，学习不止的态度，<br>趁着大家顶着7月的烈日炎炎出去团建，而我在公司吹着免费空调、喝着吴老板请的星爸爸、摸着鱼……（好了不能再说了，否则要去财务领工资了）的时间打开沉封已久的博客，随便更新点东西<br>今天不讲新技术，不说新轮子。扒一扒百家通用的基础 <code>正则</code><br>学习任何语言最好的线上教科书莫过于<a href=\"https://doc.houdunren.com/php/5%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">官方文档</a>，这里附上链接，大家自行翻阅</p>\n<h2 id=\"土味介绍\"><a href=\"#土味介绍\" class=\"headerlink\" title=\"土味介绍\"></a>土味介绍</h2><p>为什么说<code>正则</code>是百家通，如果你接触过某一门后端语言，无论那一种，都会用到正则表示式，前端也不例外， 你会发现它他们语法都差不多，正则就像一个小弟，需要依赖不同宿主的环境。只是不同的语法环境中使用不同的函数调用它就可以了。<br>所以，你如果从一种语言环境切换到别一个种言环境中使用<code>正则</code>，你只需要学习这种语言调用<code>正则</code>的函数方法就可以了。</p>\n<h2 id=\"正则的应用场景\"><a href=\"#正则的应用场景\" class=\"headerlink\" title=\"正则的应用场景\"></a>正则的应用场景</h2><p>最多的应用场景 就是字符串的<code>增删改查</code>,可能这里有人会说，前端不是已经有很多处理一些字符串的方法了吗？说的没错，但<code>正则</code>的方式要更强悍些。这种感觉就好像过去的<code>老人机</code>与<code>智能机</code>的对比。<br>话不闲扯，开始上干货……</p>\n<h4 id=\"举个🌰\"><a href=\"#举个🌰\" class=\"headerlink\" title=\"举个🌰\"></a>举个🌰</h4><p>🌰1：从一堆字符串中全局找数字<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str =<span class=\"string\">'linjie20210716'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 传统方式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nums = [...str].filter(<span class=\"function\"><span class=\"params\">a</span>=&gt;</span> !<span class=\"built_in\">Number</span>.isNaN(parsesInt(a))).join(<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正则匹配 </span></span><br><span class=\"line\">str.match(<span class=\"regexp\">/\\d/g</span>).join(<span class=\"string\">''</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"还有好多好多的-🌰\"><a href=\"#还有好多好多的-🌰\" class=\"headerlink\" title=\"还有好多好多的 🌰\"></a>还有好多好多的 🌰</h2><h4 id=\"🌰1：字面量。比如：现在我们让正则在一堆字符串里找小姐姐\"><a href=\"#🌰1：字面量。比如：现在我们让正则在一堆字符串里找小姐姐\" class=\"headerlink\" title=\"🌰1：字面量。比如：现在我们让正则在一堆字符串里找小姐姐\"></a>🌰1：字面量。比如：现在我们让正则在一堆字符串里找<code>小姐姐</code></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str =<span class=\"string\">'xiaojiejie20210716'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/xiaojiejie/</span>.test(str)) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里 小姐姐 要是个字符串字面量，如果我们现在把 小姐姐 放在 变量里 返回的就是 false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg=<span class=\"string\">'xiaojiejie'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/reg/</span>.test(str)) <span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你一起想要用变量的形式 也有其它可以支持的方式，第一种就是 eval() ，🌰2：会绍第二种 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">eval</span>(<span class=\"string\">`/<span class=\"subst\">$&#123;reg&#125;</span>/`</span>).test(str)) <span class=\"comment\">//=&gt; true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"🌰2：用对象创建正则表达式\"><a href=\"#🌰2：用对象创建正则表达式\" class=\"headerlink\" title=\"🌰2：用对象创建正则表达式\"></a>🌰2：用对象创建正则表达式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str =<span class=\"string\">'xiaojiejie20210716xiaojiejie'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'xiaojiejie'</span>,<span class=\"string\">'g'</span>) <span class=\"comment\">//g =&gt; 代指全局 </span></span><br><span class=\"line\">reg.test(str)</span><br><span class=\"line\"><span class=\"comment\">//这里的小姐姐也可以用变量代替 结果是一样的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> found = <span class=\"string\">'xiaojiejie'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(found,<span class=\"string\">'g'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在我们找出所有的小姐姐，进行替换</span></span><br><span class=\"line\"></span><br><span class=\"line\">str.replace(reg, search =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'小姐姐'</span>;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// =&gt; 小姐姐20210716小姐姐</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"选择符-类似于-js语法中的或\"><a href=\"#选择符-类似于-js语法中的或\" class=\"headerlink\" title=\"选择符 | 类似于 js语法中的或 ||\"></a>选择符 <code>|</code> 类似于 js语法中的<code>或</code> <code>||</code></h4><p>🌰3：这里判断一个电话号码是不是北京或上海的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str =<span class=\"string\">'010-12345678'</span>;</span><br><span class=\"line\">/^(<span class=\"number\">010</span>|<span class=\"number\">021</span>)\\-\\d&#123;<span class=\"number\">7</span><span class=\"number\">-8</span>&#125;$/.test(str) <span class=\"comment\">//=&gt; 出现任意一种则返回 true </span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>土味语义:<code>^</code>代指开始， <code>$</code>表示结束，是边界的限定， 010或021 为了简洁这里用<code>()</code> 学名<code>原子组</code>的东西括起来，<code>-</code>和<code>d</code>在正则有特殊意义故需要用<code>\\</code>转义，{7-8}属于<code>区间匹配</code> 代表数字7到8位`</em></strong></p>\n<p>有人说🙋‍♀️ ：那如果我们匹配很多数字的时候不是很麻烦，不是要<code>(1|2|3|4|5|6|7|8|9|0)</code>，</p>\n<p>这里就要提到正则的一个概念叫 <code>原子表</code> <code>[]</code> 代表一个可选范围</p>\n<p>[1234567890] 相当于 (1|2|3|4|5|6|7|8|9|0)</p>\n<p>继续简化 <code>-</code> 中线符 指定范围区间<br>[0-9] 就相当于[0123456789]<br>同样的区别匹配还有<code>[a-z][A-Z]</code>,要注意的是这里\b顺序不像<code>模式参数/gi</code>,\b它不可颠倒成<code>[z-a][9-0]</code></p>\n<p>区分：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'xiaojiejie'</span>.match(<span class=\"regexp\">/ie/g</span>);<span class=\"comment\">//=&gt;[\"ie\", \"ie\"]全量匹配ji为整体</span></span><br><span class=\"line\"><span class=\"string\">'xiaojiejie'</span>.match(<span class=\"regexp\">/[ie]/g</span>);<span class=\"comment\">//=&gt;[\"i\", \"i\", \"e\", \"i\", \"e\"]放在原子表里时,相当于j或i</span></span><br></pre></td></tr></table></figure></p>\n<p>即然提到<code>原子组</code>也顺带讲下<code>原子组</code><br>🌰如：我们现在匹配一日期 中间可以是”-“中线，也可以是”/“，前提条件是前后一至，若前一个用中线，后面必须也是中间。不可以是<code>2021-07/16</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"string\">\"2021-07-16\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^\\d&#123;4&#125;([-\\/])\\d&#123;2&#125;\\1\\d&#123;2&#125;$/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.match(reg));<span class=\"comment\">//=&gt;&#123;true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>土味语义: 关建节点在<code>([-\\/])</code>原子组 代表包含  了”-“中线<code>或</code>”/“两种形式，由于其中/是特殊字面量，需用’\\’转义,\\1代表这里要求与第一个原子组的规则结果相同</em></strong></p>\n<p>🌰现在我们来实现一个需求：</p>\n<p><strong>将下面代码中的h1-h6 内容全部替换成空字符 </strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">'&lt;div&gt;&lt;h1&gt;linjie.fe.com xiaojiejie&lt;/h1&gt;&lt;h2&gt;xiaojiejie2&lt;/h2&gt;&lt;h3&gt;xiaojiejie3&lt;/h3&gt;&lt;H4&gt;&lt;/H4&gt;&lt;h6&gt;xiaojiejie666&lt;/h6&gt;&lt;/div&gt;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/&lt;(h[1-6])&gt;[\\s\\S]*&lt;\\/\\1&gt;/gi</span>s;</span><br><span class=\"line\"></span><br><span class=\"line\">str.replace(reg,<span class=\"string\">''</span>)<span class=\"comment\">//=&gt;&lt;div&gt;&lt;/div&gt;;</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>土味语义: 以 <code>&lt;</code>开始 <code>(h[1-6])</code> 原子组中代只h1-h6 `[\\s\\S]</em><code>表示空白加非空白所有字符 零个至多个字符</code>&lt;\\/\\1&gt;<code>代表</code>-<code></code>/\\1` 代表与第一个原子组规则相同 :*</strong></p>\n<h3 id=\"🌰4：特殊字面量的转义\"><a href=\"#🌰4：特殊字面量的转义\" class=\"headerlink\" title=\"🌰4：特殊字面量的转义\"></a>🌰4：特殊字面量的转义</h3><p>🌰4： 这里假设用正则匹配一个url地址</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'https://linjieFE.github.io'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">/^(https:\\/\\/)?\\w+\\.\\w+\\.\\w+$/.test(url)</span><br></pre></td></tr></table></figure>\n<p><strong><em>土味语义:<code>^ $</code>开始结束边界的限定， <code>?</code>代码0或1次术语上又属于一种称为<code>禁止贪婪</code>的语法，<code>禁止贪婪</code>有趋向于最少数的性质，后面我会再次讲到。也可理解为<code>没有</code>或<code>有的时候只能有一个</code>(https://) <code>\\w</code>代表 字母大小写数字下划线 相当于 <code>[A-Za-z0-9_]</code>  <code>+</code> 学名也叫 <code>贪婪匹配</code>代表一个或多个字母大小写数字下划线 </em></strong></p>\n<p><em>注意</em><br>上面的字面量内容如果放在<code>正则表达式对象</code>里 情况则不同<br>字面量<code>/^(https:\\/\\/)?\\w+\\.\\w+\\.\\w+$/</code>，单个反斜杠会自行转义</p>\n<p>但如果在 <code>new RegExp(&quot;(https:\\/\\/)?\\w+\\.\\w+\\.\\w+,&#39;g&#39;)</code>中，于由第一个参数本身为数符串，正常使用则要改为<code>new RegExp(&quot;(https:\\\\/\\\\/)?\\\\w+\\\\.\\\\w+\\\\.\\\\w+&quot;,&#39;g&#39;)</code></p>\n<h3 id=\"🌰5：-字符边界的约束\"><a href=\"#🌰5：-字符边界的约束\" class=\"headerlink\" title=\"🌰5： 字符边界的约束 ^$[]{}\"></a>🌰5： 字符边界的约束 <code>^$[]{}</code></h3><p>这个前面已代过了 直接到🌰6</p>\n<h3 id=\"🌰6：-数字空白元字符-s匹配空白包括-相当于-n-f-r-t-v\"><a href=\"#🌰6：-数字空白元字符-s匹配空白包括-相当于-n-f-r-t-v\" class=\"headerlink\" title=\"🌰6： 数字空白元字符 \\s匹配空白包括 相当于 [\\n\\f\\r\\t\\v]\"></a>🌰6： 数字空白元字符 <code>\\s</code>匹配空白包括 相当于 <code>[\\n\\f\\r\\t\\v]</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'     小姐姐:021-1234556,  linjie:010-1234556 '</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">url.match(<span class=\"regexp\">/[-\\d:,]+/g</span>);<span class=\"comment\">//=&gt; :021-1234556,:010-1234556 全局匹配出一个或多个 中线、数字、冒号、逗号</span></span><br><span class=\"line\">url.match(<span class=\"regexp\">/[^-\\d:,]+/g</span>); <span class=\"comment\">// =&gt;小姐姐linjie</span></span><br></pre></td></tr></table></figure>\n<p><code>^</code> 在 [] <code>原子表</code>里面 代表取返<code>[^]</code>，术语称其为<code>排除匹配</code>, 这里要特别注意跟 <code>区间符</code>中的’开始’<code>^</code>区分开.</p>\n<p><strong><em><code>排除匹配</code>土味语义: 全局匹配出一个或多个 <code>除</code> 中线、数字、冒号、逗号 的字符</em></strong></p>\n<ul>\n<li>另需注意<ul>\n<li>当原子组和原子表中使用特殊符号时没有换算关系，仅代表其中的字符本义，（所以转不转义也无妨）举例：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'(xiaojiejie).+'</span>.match(<span class=\"regexp\">/[()]/g</span>);<span class=\"comment\">//=&gt;[\"(\", \")\"] 这里 “原子表\" 里包括了个“ 原子组” 实际上，原子表代表的只有字符串括号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'(xiaojiejie).+'</span>.match(<span class=\"regexp\">/[.+]/g</span>);<span class=\"comment\">//=&gt;[\".\", \"+\"]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"🌰7：在元字符里除了-还有另一种特殊取反的方式\"><a href=\"#🌰7：在元字符里除了-还有另一种特殊取反的方式\" class=\"headerlink\" title=\"🌰7：在元字符里除了^,还有另一种特殊取反的方式\"></a>🌰7：在元字符里除了<code>^</code>,还有另一种特殊取反的方式</h3><p>P如：<br>\\d 代表数字 \\D 代表 除数字<br>\\w 代表数字字母下划线 \\W 代表 除代表数字字母下划线<br>相同的还有 \\s \\S 等等…<br><code>\\s</code>代三空格、换行、等同与[\\n\\r]</p>\n<p>如：我们匹配一个电话号码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'010 - 1234567'</span>.match(<span class=\"regexp\">/^\\d+\\s?\\-\\s?\\d&#123;7,8&#125;$/</span>);</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>土味语义: <code>\\d+</code> 贪婪匹配一个或多个数字 <code>\\s?`</code>有一个<code>或</code>没有<code>空字符 ,</code>-<code>中线 最后</code>\\d{7-8}<code>精准匹配7-8位数字</code>$`结束</em></strong></p>\n<p> <code>.</code> 贪婪的点 代表除 <code>换行符</code>以外所有的字符</p>\n<h3 id=\"🌰7-更加贪婪的全字符\"><a href=\"#🌰7-更加贪婪的全字符\" class=\"headerlink\" title=\"🌰7 更加贪婪的全字符\"></a>🌰7 更加贪婪的全字符</h3><p>我们知道 哪怕最贪婪的<code>.</code>也排除了一个换行符</p>\n<p>如：我们想匹配一段代码标签内的所有内容<br>可以用双向取反的方式 例如：<code>[\\s\\S] [\\w\\W]</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str =<span class=\"string\">`&lt;span&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;b&gt;xiaojiejie1&lt;/b&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;em&gt;xiaojiejie2&lt;/em&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/span&gt;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str.match(<span class=\"regexp\">/^&lt;span&gt;[\\d\\D]+&lt;\\/span&gt;$/</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"🌰8-正则的修正符i-g-‘s’\"><a href=\"#🌰8-正则的修正符i-g-‘s’\" class=\"headerlink\" title=\"🌰8 正则的修正符i g ‘s’\"></a>🌰8 正则的修正符<code>i</code> <code>g</code> ‘s’</h3><p>修正符一般用在正则表达示的结尾<br>如:我们匹配xiaoJiejie中的<code>j</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'xiaoJiejie'</span>.match(<span class=\"regexp\">/j/gi</span>);<span class=\"comment\">//=&gt;Jj</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em>土味语义: <code>/gi</code> 这里结尾中的<code>i</code>带代不分大小写，<code>g</code>代表全局 否则这里只会匹配一个就会跳出，这里<code>/gi</code> 同样可以写成 <code>/ig</code></em></strong><br><strong><em> <code>/s</code> 是忽略换行符 当文档出来换行符时，将其看作一行 </em></strong></p>\n<h3 id=\"🌰9-多行匹配\"><a href=\"#🌰9-多行匹配\" class=\"headerlink\" title=\"🌰9 多行匹配\"></a>🌰9 多行匹配</h3><p>业务要求:将str中包含在<code>#</code>号中的数据过滤为<br><code>[{name:&#39;成都小姐姐&#39;,age:&#39;18&#39;}]</code>数组对象格式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// step1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">`    #1 上海小姐姐,18  #</span></span><br><span class=\"line\"><span class=\"string\">#2 成都小姐姐,19  #</span></span><br><span class=\"line\"><span class=\"string\">#3 北京小姐姐,20  # xiaojiejie</span></span><br><span class=\"line\"><span class=\"string\">#4 杭州小姐姐,21  #</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> step1 = str.match(<span class=\"regexp\">/^\\s*#\\d+\\s+.+\\s+#$/gm</span>s);<span class=\"comment\">//=&gt; [\"#1 上海小姐姐,18  #\", \"#2 成都小姐姐,19  #\", \"#4 杭州小姐姐,21  #\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//step2 替换掉 #号和井号后的数字</span></span><br><span class=\"line\"></span><br><span class=\"line\">step2 = step1.map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span>&#123;</span><br><span class=\"line\">    v=v.replace(<span class=\"regexp\">/^\\s*#\\d+\\s*/</span>,<span class=\"string\">\"\"</span>).replace(<span class=\"regexp\">/\\s#$/</span>,<span class=\"string\">\"\"</span>);<span class=\"comment\">//=&gt;上海小姐姐,18  成都小姐姐,19  杭州小姐姐,21 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//step3 用逗号拆分 解构给'name','age'这个变量</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v.split(<span class=\"string\">','</span>)) <span class=\"comment\">//=&gt; ['上海小姐姐','18']  ['成都小姐姐','19']  ['杭州小姐姐','21' ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//解构</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [name, age] = v.split(<span class=\"string\">','</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;name, age&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong><em>土味语义step1: <code>/gm</code> 这里结尾中的<code>m</code>代表每一行分别处理，`\\s</em><code>开始空白符</code>有<code>或</code>没有<code>都可，这里有有泛指 1 个到多个，</code>#<code>号</code>\\d+<code>一个或多个数字，</code>\\s+<code>一个或多个空白符</code>.+<code>除换行符所有字符</code>\\s+<code>一个或多个空白符</code>#`号结束*</strong></p>\n<p><strong><em>土味语义step2: 先把开头部分替换，空白符 1 个到多个，<code>#</code>号 <code>\\d+</code>一个或多个数字，`\\s</em>`零个或多个空白符 替换为空字符串；再将结尾部分空折符到#号结属部分替换为空字符串*</strong><br> 后面的步骤不用多讲了，就是简单的解构 return对象</p>\n<h3 id=\"🌰10-字符属性-汉字-和-宽字节\"><a href=\"#🌰10-字符属性-汉字-和-宽字节\" class=\"headerlink\" title=\"🌰10 字符属性 汉字 和 宽字节\"></a>🌰10 字符属性 汉字 和 宽字节</h3><p>在正则里字符串有自己的属性值prototype，比如<code>{L}</code>代表着字母属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'xjj1'</span>.match(<span class=\"regexp\">/\\p&#123;L&#125;/gu</span>)<span class=\"comment\">//=&gt;[\"x\", \"j\", \"j\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配符号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'xjj1.'</span>.match(<span class=\"regexp\">/\\p&#123;P&#125;/gu</span>)<span class=\"comment\">//=&gt;['.']</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配汉语</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'小姐姐xjj1.'</span>.match(<span class=\"regexp\">/\\p&#123;sc=Han&#125;/gu</span>)<span class=\"comment\">//=&gt;[\"小\", \"姐\", \"姐\"]</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>土味语义: <code>\\p</code> 代码匹配属性是否为字母<code>{L}</code> ,<code>/gu</code> 全局 </em>这里注意<em>匹配属性必段要带<code>/u</code> ，带特别是用来试别<code>宽字节</code>时, 例如匹配一些罗码字符时</em></strong></p>\n<h3 id=\"🌰10-lastindex\"><a href=\"#🌰10-lastindex\" class=\"headerlink\" title=\"🌰10 lastindex\"></a>🌰10 lastindex</h3><h3 id=\"🌰11-有效率的-y模式\"><a href=\"#🌰11-有效率的-y模式\" class=\"headerlink\" title=\"🌰11 有效率的/y模式\"></a>🌰11 有效率的/y模式</h3><h3 id=\"🌰12-amp-39-和-amp\"><a href=\"#🌰12-amp-39-和-amp\" class=\"headerlink\" title=\"🌰12 &amp;&#39;和  $&amp;\"></a>🌰12 <code>&amp;&#39;</code>和  <code>$&amp;</code></h3><p>$&amp; 相于于字符串 自身</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">'xiaojiejie'</span>;</span><br><span class=\"line\">str.replace(<span class=\"regexp\">/jiejie/g</span>,<span class=\"string\">\"$&amp;\"</span>);<span class=\"comment\">//=&gt;\"xiaojiejie\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"🌰13-断言匹配\"><a href=\"#🌰13-断言匹配\" class=\"headerlink\" title=\"🌰13 断言匹配\"></a>🌰13 断言匹配</h3><p> 敲码不易，请多多赞赏！</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckr6eisjy00003fwyipe621xc","category_id":"ckr6eisk700023fwyvy1aw1qa","_id":"ckr6eiskf000b3fwyvtjecth7"},{"post_id":"ckr6eiskd00093fwyq642sdwd","category_id":"ckr6eisk700023fwyvy1aw1qa","_id":"ckr6eiskj000h3fwyy8u095of"},{"post_id":"ckr6eisk400013fwyx1yqp837","category_id":"ckr6eiskd00073fwygkhjhxo2","_id":"ckr6eiskl000m3fwy8vksobmd"},{"post_id":"ckr6eiske000a3fwycediek88","category_id":"ckr6eisk700023fwyvy1aw1qa","_id":"ckr6eiskm000p3fwymm7tt9ma"},{"post_id":"ckr6eisk900043fwyp8tby9rf","category_id":"ckr6eiskd00073fwygkhjhxo2","_id":"ckr6eiskn000u3fwyd76n5n8x"},{"post_id":"ckr6eiski000g3fwy5arvlije","category_id":"ckr6eisk700023fwyvy1aw1qa","_id":"ckr6eiskn000v3fwyu4n35m2l"},{"post_id":"ckr6eiskb00053fwy07p4btdj","category_id":"ckr6eiskd00073fwygkhjhxo2","_id":"ckr6eiskn000y3fwyk1amplka"},{"post_id":"ckr6eiskl000o3fwycr3a7pex","category_id":"ckr6eisk700023fwyvy1aw1qa","_id":"ckr6eisko00103fwyn1302e8i"},{"post_id":"ckr6eiskm000t3fwy13qo38v6","category_id":"ckr6eisk700023fwyvy1aw1qa","_id":"ckr6eisko00133fwyrgrycsf5"},{"post_id":"ckr6eiskc00063fwy20xznrs2","category_id":"ckr6eiskm000q3fwy713nhbae","_id":"ckr6eisko00143fwyu6qnng72"}],"PostTag":[{"post_id":"ckr6eisjy00003fwyipe621xc","tag_id":"ckr6eisk800033fwyg0v2o2ca","_id":"ckr6eiski000f3fwykynzin5x"},{"post_id":"ckr6eisjy00003fwyipe621xc","tag_id":"ckr6eiskd00083fwyb64wa7i4","_id":"ckr6eiskj000i3fwyx07hnp18"},{"post_id":"ckr6eisk400013fwyx1yqp837","tag_id":"ckr6eiskf000d3fwylvpa8e72","_id":"ckr6eiskl000n3fwytp6hvkj1"},{"post_id":"ckr6eiski000g3fwy5arvlije","tag_id":"ckr6eiskd00083fwyb64wa7i4","_id":"ckr6eiskm000r3fwyucnu39zz"},{"post_id":"ckr6eiskm000t3fwy13qo38v6","tag_id":"ckr6eiskd00083fwyb64wa7i4","_id":"ckr6eiskn000w3fwym9yd94kr"},{"post_id":"ckr6eisk900043fwyp8tby9rf","tag_id":"ckr6eiskk000k3fwy0z7xmxhr","_id":"ckr6eisko000z3fwy6r48sffx"},{"post_id":"ckr6eisk900043fwyp8tby9rf","tag_id":"ckr6eiskd00083fwyb64wa7i4","_id":"ckr6eisko00113fwyg58xjcpe"},{"post_id":"ckr6eiskb00053fwy07p4btdj","tag_id":"ckr6eiskf000d3fwylvpa8e72","_id":"ckr6eiskp00163fwypl6uxbhh"},{"post_id":"ckr6eiskb00053fwy07p4btdj","tag_id":"ckr6eisko00123fwy02udjdsx","_id":"ckr6eiskp00173fwy7m7icbjr"},{"post_id":"ckr6eiskc00063fwy20xznrs2","tag_id":"ckr6eisko00153fwyba9xtnlk","_id":"ckr6eiskp00193fwymbcym2sc"},{"post_id":"ckr6eiskd00093fwyq642sdwd","tag_id":"ckr6eiskp00183fwyfy397q2p","_id":"ckr6eiskq001b3fwyy0nis8l8"},{"post_id":"ckr6eiskd00093fwyq642sdwd","tag_id":"ckr6eiskd00083fwyb64wa7i4","_id":"ckr6eiskq001c3fwyg1k4hmsq"},{"post_id":"ckr6eiske000a3fwycediek88","tag_id":"ckr6eiskd00083fwyb64wa7i4","_id":"ckr6eiskq001e3fwyixdxivwi"},{"post_id":"ckr6eiske000a3fwycediek88","tag_id":"ckr6eiskp001a3fwyn5z0tayw","_id":"ckr6eiskq001f3fwyqx7so9lr"},{"post_id":"ckr6eiskh000e3fwy45211vf2","tag_id":"ckr6eiskq001d3fwyy1oq30iv","_id":"ckr6eiskq001h3fwy9nsgu75c"},{"post_id":"ckr6eiskk000l3fwy2ozvlpb7","tag_id":"ckr6eiskq001g3fwyuidslx49","_id":"ckr6eiskr001k3fwyzix05zkp"},{"post_id":"ckr6eiskk000l3fwy2ozvlpb7","tag_id":"ckr6eisko00153fwyba9xtnlk","_id":"ckr6eiskr001l3fwyjjrj7dup"},{"post_id":"ckr6eiskl000o3fwycr3a7pex","tag_id":"ckr6eiskr001j3fwykz2ru7t0","_id":"ckr6eiskr001n3fwyx2w55wkp"},{"post_id":"ckr6eiskl000o3fwycr3a7pex","tag_id":"ckr6eisko00153fwyba9xtnlk","_id":"ckr6eiskr001o3fwyyuafbqim"}],"Tag":[{"name":"javascript","_id":"ckr6eisk800033fwyg0v2o2ca"},{"name":"学习笔记","_id":"ckr6eiskd00083fwyb64wa7i4"},{"name":"mac技巧","_id":"ckr6eiskf000d3fwylvpa8e72"},{"name":"vim","_id":"ckr6eiskk000k3fwy0z7xmxhr"},{"name":"终端","_id":"ckr6eisko00123fwy02udjdsx"},{"name":"随笔","_id":"ckr6eisko00153fwyba9xtnlk"},{"name":"gulp","_id":"ckr6eiskp00183fwyfy397q2p"},{"name":"react-native","_id":"ckr6eiskp001a3fwyn5z0tayw"},{"name":"react","_id":"ckr6eiskq001d3fwyy1oq30iv"},{"name":"前题面试题","_id":"ckr6eiskq001g3fwyuidslx49"},{"name":"hexo","_id":"ckr6eiskr001j3fwykz2ru7t0"}]}}